import LeanRV64DLEAN.Sail.Sail
import LeanRV64DLEAN.Sail.BitVec
import LeanRV64DLEAN.Sail.IntRange
import LeanRV64DLEAN.Defs
import LeanRV64DLEAN.Specialization
import LeanRV64DLEAN.RiscvExtras

set_option maxHeartbeats 1_000_000_000
set_option maxRecDepth 10_000
set_option linter.unusedVariables false
set_option match.ignoreUnusedAlts true

open Sail

noncomputable section

open zicondop
open wxfunct6
open wvxfunct6
open wvvfunct6
open wvfunct6
open write_kind
open word_width
open wmvxfunct6
open wmvvfunct6
open vxsgfunct6
open vxmsfunct6
open vxmfunct6
open vxmcfunct6
open vxfunct6
open vxcmpfunct6
open vvmsfunct6
open vvmfunct6
open vvmcfunct6
open vvfunct6
open vvcmpfunct6
open vregno
open vregidx
open vmlsop
open vlewidth
open visgfunct6
open virtaddr
open vimsfunct6
open vimfunct6
open vimcfunct6
open vifunct6
open vicmpfunct6
open vfwunary0
open vfunary1
open vfunary0
open vfnunary0
open vext8funct6
open vext4funct6
open vext2funct6
open uop
open sopw
open sop
open seed_opst
open rounding_mode
open ropw
open rop
open rmvvfunct6
open rivvfunct6
open rfvvfunct6
open regno
open regidx
open read_kind
open pmpMatch
open pmpAddrMatch
open physaddr
open option
open nxsfunct6
open nxfunct6
open nvsfunct6
open nvfunct6
open nisfunct6
open nifunct6
open mvxmafunct6
open mvxfunct6
open mvvmafunct6
open mvvfunct6
open mmfunct6
open maskfunct3
open iop
open fwvvmafunct6
open fwvvfunct6
open fwvfunct6
open fwvfmafunct6
open fwvffunct6
open fwffunct6
open fvvmfunct6
open fvvmafunct6
open fvvfunct6
open fvfmfunct6
open fvfmafunct6
open fvffunct6
open f_un_x_op_H
open f_un_x_op_D
open f_un_rm_xf_op_S
open f_un_rm_xf_op_H
open f_un_rm_xf_op_D
open f_un_rm_fx_op_S
open f_un_rm_fx_op_H
open f_un_rm_fx_op_D
open f_un_rm_ff_op_S
open f_un_rm_ff_op_H
open f_un_rm_ff_op_D
open f_un_op_x_S
open f_un_op_f_S
open f_un_f_op_H
open f_un_f_op_D
open f_madd_op_S
open f_madd_op_H
open f_madd_op_D
open f_bin_x_op_H
open f_bin_x_op_D
open f_bin_rm_op_S
open f_bin_rm_op_H
open f_bin_rm_op_D
open f_bin_op_x_S
open f_bin_op_f_S
open f_bin_f_op_H
open f_bin_f_op_D
open extop_zbb
open extension
open exception
open ctl_result
open csrop
open cregidx
open cbop_zicbom
open bropw_zbb
open bropw_zba
open brop_zbs
open brop_zbkb
open brop_zbb
open brop_zba
open bop
open biop_zbs
open barrier_kind
open ast
open amoop
open agtype
open TrapVectorMode
open TR_Result
open SATPMode
open Retired
open Register
open Privilege
open PmpAddrMatchType
open PTW_Result
open PTW_Error
open PTE_Check
open InterruptType
open FetchResult
open Ext_PhysAddr_Check
open Ext_FetchAddr_Check
open Ext_DataAddr_Check
open Ext_ControlAddr_Check
open ExtStatus
open ExceptionType
open Architecture
open AccessType

namespace Functions

/-- Type quantifiers: k_a : Type -/
def is_none (opt : (Option k_a)) : Bool :=
  match opt with
  | .some _ => false
  | none => true

/-- Type quantifiers: k_a : Type -/
def is_some (opt : (Option k_a)) : Bool :=
  match opt with
  | .some _ => true
  | none => false

/-- Type quantifiers: k_ex99223# : Bool, k_ex99222# : Bool -/
def neq_bool (x : Bool) (y : Bool) : Bool :=
  (Bool.not (BEq.beq x y))

/-- Type quantifiers: x : Int -/
def __id (x : Int) : Int :=
  x

def sub_virtaddr_xlenbits (typ_0 : virtaddr) (offset : (BitVec (2 ^ 3 * 8))) : virtaddr :=
  let .virtaddr addr : virtaddr := typ_0
  (virtaddr (addr - offset))

/-- Type quantifiers: n : Int, m : Int -/
def _shl_int_general (m : Int) (n : Int) : Int :=
  if (n ≥b 0)
  then (Int.shiftl m n)
  else (Int.shiftr m (Neg.neg n))

/-- Type quantifiers: n : Int, m : Int -/
def _shr_int_general (m : Int) (n : Int) : Int :=
  if (n ≥b 0)
  then (Int.shiftr m n)
  else (Int.shiftl m (Neg.neg n))

/-- Type quantifiers: m : Int, n : Int -/
def fdiv_int (n : Int) (m : Int) : Int :=
  if (Bool.and (n <b 0) (m >b 0))
  then ((Int.tdiv (n +i 1) m) -i 1)
  else
    if (Bool.and (n >b 0) (m <b 0))
    then ((Int.tdiv (n -i 1) m) -i 1)
    else (Int.tdiv n m)

/-- Type quantifiers: m : Int, n : Int -/
def fmod_int (n : Int) (m : Int) : Int :=
  (n -i (m *i (fdiv_int n m)))

/-- Type quantifiers: k_n : Int -/
def concat_str_bits (str : String) (x : (BitVec k_n)) : String :=
  (HAppend.hAppend str (BitVec.toFormatted x))

/-- Type quantifiers: x : Int -/
def concat_str_dec (str : String) (x : Int) : String :=
  (HAppend.hAppend str (Int.repr x))

def spc_forwards (_ : Unit) : String :=
  " "

def spc_forwards_matches (_ : Unit) : Bool :=
  true

def spc_backwards (x_0 : String) : Unit :=
  ()

def spc_backwards_matches (s : String) : Bool :=
  let len := (String.length s)
  (Bool.and (BEq.beq (String.leadingSpaces s) len) (len >b 0))

def opt_spc_forwards (_ : Unit) : String :=
  ""

def opt_spc_forwards_matches (_ : Unit) : Bool :=
  true

def opt_spc_backwards (x_0 : String) : Unit :=
  ()

def opt_spc_backwards_matches (s : String) : Bool :=
  (BEq.beq (String.leadingSpaces s) (String.length s))

def def_spc_forwards (_ : Unit) : String :=
  " "

def def_spc_forwards_matches (_ : Unit) : Bool :=
  true

def def_spc_backwards (x_0 : String) : Unit :=
  ()

def def_spc_backwards_matches (s : String) : Bool :=
  (BEq.beq (String.leadingSpaces s) (String.length s))

def sep_forwards (arg_ : Unit) : String :=
  match arg_ with
  | () =>
    (String.append (opt_spc_forwards ())
      (String.append "," (String.append (def_spc_forwards ()) "")))

def sep_backwards (arg_ : String) : SailM Unit := do
  match arg_ with
  | _ => throw Error.Exit

def sep_forwards_matches (arg_ : Unit) : Bool :=
  match arg_ with
  | () => true

def sep_backwards_matches (arg_ : String) : SailM Bool := do
  match arg_ with
  | _ => throw Error.Exit

/-- Type quantifiers: len : Nat, k_v : Nat, len ≥ 0 ∧ k_v ≥ 0 -/
def sail_mask (len : Nat) (v : (BitVec k_v)) : (BitVec len) :=
  if (len ≤b (Sail.BitVec.length v))
  then (Sail.BitVec.truncate v len)
  else (Sail.BitVec.zeroExtend v len)

/-- Type quantifiers: n : Nat, n ≥ 0 -/
def sail_ones (n : Nat) : (BitVec n) :=
  (Complement.complement (BitVec.zero n))

/-- Type quantifiers: l : Int, i : Int, n : Nat, n ≥ 0 -/
def slice_mask {n : _} (i : Int) (l : Int) : (BitVec n) :=
  if (l ≥b n)
  then ((sail_ones n) <<< i)
  else
    let one : (BitVec n) := (sail_mask n (0b1 : (BitVec 1)))
    (((one <<< l) - one) <<< i)

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def hex_bits_forwards (bv : (BitVec k_n)) : (Nat × String) :=
  ((Sail.BitVec.length bv), (Int.toHex (BitVec.toNat bv)))

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def hex_bits_forwards_matches (bv : (BitVec k_n)) : Bool :=
  true

/-- Type quantifiers: tuple_0.1 : Nat, tuple_0.1 > 0 -/
def hex_bits_backwards (tuple_0 : (Nat × String)) : (BitVec tuple_0.1) :=
  let (n, str) := tuple_0
  (parse_hex_bits n str)

/-- Type quantifiers: tuple_0.1 : Nat, tuple_0.1 > 0 -/
def hex_bits_backwards_matches (tuple_0 : (Nat × String)) : Bool :=
  let (n, str) := tuple_0
  (valid_hex_bits n str)

def hex_bits_1_forwards (arg_ : (BitVec 1)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (1, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_1_backwards (arg_ : String) : (BitVec 1) :=
  match arg_ with
  | s => (hex_bits_backwards (1, s))

def hex_bits_1_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (1, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_1_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_2_forwards (arg_ : (BitVec 2)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (2, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_2_backwards (arg_ : String) : (BitVec 2) :=
  match arg_ with
  | s => (hex_bits_backwards (2, s))

def hex_bits_2_forwards_matches (arg_ : (BitVec 2)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (2, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_2_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_3_forwards (arg_ : (BitVec 3)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (3, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_3_backwards (arg_ : String) : (BitVec 3) :=
  match arg_ with
  | s => (hex_bits_backwards (3, s))

def hex_bits_3_forwards_matches (arg_ : (BitVec 3)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (3, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_3_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_4_forwards (arg_ : (BitVec 4)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (4, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_4_backwards (arg_ : String) : (BitVec 4) :=
  match arg_ with
  | s => (hex_bits_backwards (4, s))

def hex_bits_4_forwards_matches (arg_ : (BitVec 4)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (4, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_4_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_5_forwards (arg_ : (BitVec 5)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (5, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_5_backwards (arg_ : String) : (BitVec 5) :=
  match arg_ with
  | s => (hex_bits_backwards (5, s))

def hex_bits_5_forwards_matches (arg_ : (BitVec 5)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (5, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_5_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_6_forwards (arg_ : (BitVec 6)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (6, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_6_backwards (arg_ : String) : (BitVec 6) :=
  match arg_ with
  | s => (hex_bits_backwards (6, s))

def hex_bits_6_forwards_matches (arg_ : (BitVec 6)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (6, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_6_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_7_forwards (arg_ : (BitVec 7)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (7, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_7_backwards (arg_ : String) : (BitVec 7) :=
  match arg_ with
  | s => (hex_bits_backwards (7, s))

def hex_bits_7_forwards_matches (arg_ : (BitVec 7)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (7, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_7_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_8_forwards (arg_ : (BitVec 8)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (8, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_8_backwards (arg_ : String) : (BitVec 8) :=
  match arg_ with
  | s => (hex_bits_backwards (8, s))

def hex_bits_8_forwards_matches (arg_ : (BitVec 8)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (8, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_8_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_9_forwards (arg_ : (BitVec 9)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (9, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_9_backwards (arg_ : String) : (BitVec 9) :=
  match arg_ with
  | s => (hex_bits_backwards (9, s))

def hex_bits_9_forwards_matches (arg_ : (BitVec 9)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (9, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_9_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_10_forwards (arg_ : (BitVec 10)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (10, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_10_backwards (arg_ : String) : (BitVec 10) :=
  match arg_ with
  | s => (hex_bits_backwards (10, s))

def hex_bits_10_forwards_matches (arg_ : (BitVec 10)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (10, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_10_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_11_forwards (arg_ : (BitVec 11)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (11, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_11_backwards (arg_ : String) : (BitVec 11) :=
  match arg_ with
  | s => (hex_bits_backwards (11, s))

def hex_bits_11_forwards_matches (arg_ : (BitVec 11)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (11, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_11_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_12_forwards (arg_ : (BitVec 12)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (12, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_12_backwards (arg_ : String) : (BitVec 12) :=
  match arg_ with
  | s => (hex_bits_backwards (12, s))

def hex_bits_12_forwards_matches (arg_ : (BitVec 12)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (12, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_12_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_13_forwards (arg_ : (BitVec 13)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (13, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_13_backwards (arg_ : String) : (BitVec 13) :=
  match arg_ with
  | s => (hex_bits_backwards (13, s))

def hex_bits_13_forwards_matches (arg_ : (BitVec 13)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (13, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_13_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_14_forwards (arg_ : (BitVec 14)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (14, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_14_backwards (arg_ : String) : (BitVec 14) :=
  match arg_ with
  | s => (hex_bits_backwards (14, s))

def hex_bits_14_forwards_matches (arg_ : (BitVec 14)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (14, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_14_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_15_forwards (arg_ : (BitVec 15)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (15, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_15_backwards (arg_ : String) : (BitVec 15) :=
  match arg_ with
  | s => (hex_bits_backwards (15, s))

def hex_bits_15_forwards_matches (arg_ : (BitVec 15)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (15, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_15_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_16_forwards (arg_ : (BitVec 16)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (16, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_16_backwards (arg_ : String) : (BitVec 16) :=
  match arg_ with
  | s => (hex_bits_backwards (16, s))

def hex_bits_16_forwards_matches (arg_ : (BitVec 16)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (16, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_16_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_17_forwards (arg_ : (BitVec 17)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (17, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_17_backwards (arg_ : String) : (BitVec 17) :=
  match arg_ with
  | s => (hex_bits_backwards (17, s))

def hex_bits_17_forwards_matches (arg_ : (BitVec 17)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (17, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_17_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_18_forwards (arg_ : (BitVec 18)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (18, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_18_backwards (arg_ : String) : (BitVec 18) :=
  match arg_ with
  | s => (hex_bits_backwards (18, s))

def hex_bits_18_forwards_matches (arg_ : (BitVec 18)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (18, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_18_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_19_forwards (arg_ : (BitVec 19)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (19, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_19_backwards (arg_ : String) : (BitVec 19) :=
  match arg_ with
  | s => (hex_bits_backwards (19, s))

def hex_bits_19_forwards_matches (arg_ : (BitVec 19)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (19, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_19_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_20_forwards (arg_ : (BitVec 20)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (20, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_20_backwards (arg_ : String) : (BitVec 20) :=
  match arg_ with
  | s => (hex_bits_backwards (20, s))

def hex_bits_20_forwards_matches (arg_ : (BitVec 20)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (20, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_20_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_21_forwards (arg_ : (BitVec 21)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (21, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_21_backwards (arg_ : String) : (BitVec 21) :=
  match arg_ with
  | s => (hex_bits_backwards (21, s))

def hex_bits_21_forwards_matches (arg_ : (BitVec 21)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (21, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_21_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_22_forwards (arg_ : (BitVec 22)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (22, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_22_backwards (arg_ : String) : (BitVec 22) :=
  match arg_ with
  | s => (hex_bits_backwards (22, s))

def hex_bits_22_forwards_matches (arg_ : (BitVec 22)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (22, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_22_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_23_forwards (arg_ : (BitVec 23)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (23, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_23_backwards (arg_ : String) : (BitVec 23) :=
  match arg_ with
  | s => (hex_bits_backwards (23, s))

def hex_bits_23_forwards_matches (arg_ : (BitVec 23)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (23, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_23_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_24_forwards (arg_ : (BitVec 24)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (24, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_24_backwards (arg_ : String) : (BitVec 24) :=
  match arg_ with
  | s => (hex_bits_backwards (24, s))

def hex_bits_24_forwards_matches (arg_ : (BitVec 24)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (24, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_24_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_25_forwards (arg_ : (BitVec 25)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (25, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_25_backwards (arg_ : String) : (BitVec 25) :=
  match arg_ with
  | s => (hex_bits_backwards (25, s))

def hex_bits_25_forwards_matches (arg_ : (BitVec 25)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (25, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_25_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_26_forwards (arg_ : (BitVec 26)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (26, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_26_backwards (arg_ : String) : (BitVec 26) :=
  match arg_ with
  | s => (hex_bits_backwards (26, s))

def hex_bits_26_forwards_matches (arg_ : (BitVec 26)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (26, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_26_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_27_forwards (arg_ : (BitVec 27)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (27, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_27_backwards (arg_ : String) : (BitVec 27) :=
  match arg_ with
  | s => (hex_bits_backwards (27, s))

def hex_bits_27_forwards_matches (arg_ : (BitVec 27)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (27, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_27_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_28_forwards (arg_ : (BitVec 28)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (28, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_28_backwards (arg_ : String) : (BitVec 28) :=
  match arg_ with
  | s => (hex_bits_backwards (28, s))

def hex_bits_28_forwards_matches (arg_ : (BitVec 28)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (28, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_28_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_29_forwards (arg_ : (BitVec 29)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (29, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_29_backwards (arg_ : String) : (BitVec 29) :=
  match arg_ with
  | s => (hex_bits_backwards (29, s))

def hex_bits_29_forwards_matches (arg_ : (BitVec 29)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (29, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_29_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_30_forwards (arg_ : (BitVec 30)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (30, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_30_backwards (arg_ : String) : (BitVec 30) :=
  match arg_ with
  | s => (hex_bits_backwards (30, s))

def hex_bits_30_forwards_matches (arg_ : (BitVec 30)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (30, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_30_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_31_forwards (arg_ : (BitVec 31)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (31, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_31_backwards (arg_ : String) : (BitVec 31) :=
  match arg_ with
  | s => (hex_bits_backwards (31, s))

def hex_bits_31_forwards_matches (arg_ : (BitVec 31)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (31, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_31_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_32_forwards (arg_ : (BitVec 32)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (32, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_32_backwards (arg_ : String) : (BitVec 32) :=
  match arg_ with
  | s => (hex_bits_backwards (32, s))

def hex_bits_32_forwards_matches (arg_ : (BitVec 32)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (32, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_32_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_33_forwards (arg_ : (BitVec 33)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (33, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_33_backwards (arg_ : String) : (BitVec 33) :=
  match arg_ with
  | s => (hex_bits_backwards (33, s))

def hex_bits_33_forwards_matches (arg_ : (BitVec 33)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (33, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_33_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_34_forwards (arg_ : (BitVec 34)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (34, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_34_backwards (arg_ : String) : (BitVec 34) :=
  match arg_ with
  | s => (hex_bits_backwards (34, s))

def hex_bits_34_forwards_matches (arg_ : (BitVec 34)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (34, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_34_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_35_forwards (arg_ : (BitVec 35)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (35, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_35_backwards (arg_ : String) : (BitVec 35) :=
  match arg_ with
  | s => (hex_bits_backwards (35, s))

def hex_bits_35_forwards_matches (arg_ : (BitVec 35)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (35, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_35_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_36_forwards (arg_ : (BitVec 36)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (36, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_36_backwards (arg_ : String) : (BitVec 36) :=
  match arg_ with
  | s => (hex_bits_backwards (36, s))

def hex_bits_36_forwards_matches (arg_ : (BitVec 36)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (36, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_36_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_37_forwards (arg_ : (BitVec 37)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (37, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_37_backwards (arg_ : String) : (BitVec 37) :=
  match arg_ with
  | s => (hex_bits_backwards (37, s))

def hex_bits_37_forwards_matches (arg_ : (BitVec 37)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (37, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_37_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_38_forwards (arg_ : (BitVec 38)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (38, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_38_backwards (arg_ : String) : (BitVec 38) :=
  match arg_ with
  | s => (hex_bits_backwards (38, s))

def hex_bits_38_forwards_matches (arg_ : (BitVec 38)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (38, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_38_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_39_forwards (arg_ : (BitVec 39)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (39, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_39_backwards (arg_ : String) : (BitVec 39) :=
  match arg_ with
  | s => (hex_bits_backwards (39, s))

def hex_bits_39_forwards_matches (arg_ : (BitVec 39)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (39, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_39_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_40_forwards (arg_ : (BitVec 40)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (40, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_40_backwards (arg_ : String) : (BitVec 40) :=
  match arg_ with
  | s => (hex_bits_backwards (40, s))

def hex_bits_40_forwards_matches (arg_ : (BitVec 40)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (40, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_40_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_41_forwards (arg_ : (BitVec 41)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (41, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_41_backwards (arg_ : String) : (BitVec 41) :=
  match arg_ with
  | s => (hex_bits_backwards (41, s))

def hex_bits_41_forwards_matches (arg_ : (BitVec 41)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (41, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_41_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_42_forwards (arg_ : (BitVec 42)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (42, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_42_backwards (arg_ : String) : (BitVec 42) :=
  match arg_ with
  | s => (hex_bits_backwards (42, s))

def hex_bits_42_forwards_matches (arg_ : (BitVec 42)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (42, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_42_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_43_forwards (arg_ : (BitVec 43)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (43, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_43_backwards (arg_ : String) : (BitVec 43) :=
  match arg_ with
  | s => (hex_bits_backwards (43, s))

def hex_bits_43_forwards_matches (arg_ : (BitVec 43)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (43, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_43_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_44_forwards (arg_ : (BitVec 44)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (44, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_44_backwards (arg_ : String) : (BitVec 44) :=
  match arg_ with
  | s => (hex_bits_backwards (44, s))

def hex_bits_44_forwards_matches (arg_ : (BitVec 44)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (44, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_44_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_45_forwards (arg_ : (BitVec 45)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (45, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_45_backwards (arg_ : String) : (BitVec 45) :=
  match arg_ with
  | s => (hex_bits_backwards (45, s))

def hex_bits_45_forwards_matches (arg_ : (BitVec 45)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (45, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_45_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_46_forwards (arg_ : (BitVec 46)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (46, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_46_backwards (arg_ : String) : (BitVec 46) :=
  match arg_ with
  | s => (hex_bits_backwards (46, s))

def hex_bits_46_forwards_matches (arg_ : (BitVec 46)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (46, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_46_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_47_forwards (arg_ : (BitVec 47)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (47, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_47_backwards (arg_ : String) : (BitVec 47) :=
  match arg_ with
  | s => (hex_bits_backwards (47, s))

def hex_bits_47_forwards_matches (arg_ : (BitVec 47)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (47, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_47_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_48_forwards (arg_ : (BitVec 48)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (48, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_48_backwards (arg_ : String) : (BitVec 48) :=
  match arg_ with
  | s => (hex_bits_backwards (48, s))

def hex_bits_48_forwards_matches (arg_ : (BitVec 48)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (48, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_48_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_49_forwards (arg_ : (BitVec 49)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (49, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_49_backwards (arg_ : String) : (BitVec 49) :=
  match arg_ with
  | s => (hex_bits_backwards (49, s))

def hex_bits_49_forwards_matches (arg_ : (BitVec 49)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (49, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_49_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_50_forwards (arg_ : (BitVec 50)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (50, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_50_backwards (arg_ : String) : (BitVec 50) :=
  match arg_ with
  | s => (hex_bits_backwards (50, s))

def hex_bits_50_forwards_matches (arg_ : (BitVec 50)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (50, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_50_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_51_forwards (arg_ : (BitVec 51)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (51, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_51_backwards (arg_ : String) : (BitVec 51) :=
  match arg_ with
  | s => (hex_bits_backwards (51, s))

def hex_bits_51_forwards_matches (arg_ : (BitVec 51)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (51, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_51_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_52_forwards (arg_ : (BitVec 52)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (52, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_52_backwards (arg_ : String) : (BitVec 52) :=
  match arg_ with
  | s => (hex_bits_backwards (52, s))

def hex_bits_52_forwards_matches (arg_ : (BitVec 52)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (52, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_52_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_53_forwards (arg_ : (BitVec 53)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (53, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_53_backwards (arg_ : String) : (BitVec 53) :=
  match arg_ with
  | s => (hex_bits_backwards (53, s))

def hex_bits_53_forwards_matches (arg_ : (BitVec 53)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (53, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_53_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_54_forwards (arg_ : (BitVec 54)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (54, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_54_backwards (arg_ : String) : (BitVec 54) :=
  match arg_ with
  | s => (hex_bits_backwards (54, s))

def hex_bits_54_forwards_matches (arg_ : (BitVec 54)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (54, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_54_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_55_forwards (arg_ : (BitVec 55)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (55, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_55_backwards (arg_ : String) : (BitVec 55) :=
  match arg_ with
  | s => (hex_bits_backwards (55, s))

def hex_bits_55_forwards_matches (arg_ : (BitVec 55)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (55, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_55_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_56_forwards (arg_ : (BitVec 56)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (56, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_56_backwards (arg_ : String) : (BitVec 56) :=
  match arg_ with
  | s => (hex_bits_backwards (56, s))

def hex_bits_56_forwards_matches (arg_ : (BitVec 56)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (56, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_56_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_57_forwards (arg_ : (BitVec 57)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (57, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_57_backwards (arg_ : String) : (BitVec 57) :=
  match arg_ with
  | s => (hex_bits_backwards (57, s))

def hex_bits_57_forwards_matches (arg_ : (BitVec 57)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (57, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_57_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_58_forwards (arg_ : (BitVec 58)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (58, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_58_backwards (arg_ : String) : (BitVec 58) :=
  match arg_ with
  | s => (hex_bits_backwards (58, s))

def hex_bits_58_forwards_matches (arg_ : (BitVec 58)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (58, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_58_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_59_forwards (arg_ : (BitVec 59)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (59, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_59_backwards (arg_ : String) : (BitVec 59) :=
  match arg_ with
  | s => (hex_bits_backwards (59, s))

def hex_bits_59_forwards_matches (arg_ : (BitVec 59)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (59, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_59_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_60_forwards (arg_ : (BitVec 60)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (60, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_60_backwards (arg_ : String) : (BitVec 60) :=
  match arg_ with
  | s => (hex_bits_backwards (60, s))

def hex_bits_60_forwards_matches (arg_ : (BitVec 60)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (60, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_60_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_61_forwards (arg_ : (BitVec 61)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (61, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_61_backwards (arg_ : String) : (BitVec 61) :=
  match arg_ with
  | s => (hex_bits_backwards (61, s))

def hex_bits_61_forwards_matches (arg_ : (BitVec 61)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (61, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_61_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_62_forwards (arg_ : (BitVec 62)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (62, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_62_backwards (arg_ : String) : (BitVec 62) :=
  match arg_ with
  | s => (hex_bits_backwards (62, s))

def hex_bits_62_forwards_matches (arg_ : (BitVec 62)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (62, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_62_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_63_forwards (arg_ : (BitVec 63)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (63, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_63_backwards (arg_ : String) : (BitVec 63) :=
  match arg_ with
  | s => (hex_bits_backwards (63, s))

def hex_bits_63_forwards_matches (arg_ : (BitVec 63)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (63, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_63_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_64_forwards (arg_ : (BitVec 64)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (64, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_64_backwards (arg_ : String) : (BitVec 64) :=
  match arg_ with
  | s => (hex_bits_backwards (64, s))

def hex_bits_64_forwards_matches (arg_ : (BitVec 64)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_forwards_matches mapping0_)
    then
      match (hex_bits_forwards mapping0_) with
      | (64, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_64_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def hex_bits_signed_forwards (bv : (BitVec k_n)) : (Nat × String) :=
  let len := (Sail.BitVec.length bv)
  let s :=
    if (BEq.beq (BitVec.access bv (len -i 1)) 1#1)
    then (HAppend.hAppend "-" (Int.toHex ((BitVec.toNat (Complement.complement bv)) +i 1)))
    else (Int.toHex (BitVec.toNat bv))
  ((Sail.BitVec.length bv), s)

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def hex_bits_signed_forwards_matches (bv : (BitVec k_n)) : Bool :=
  true

/-- Type quantifiers: tuple_0.1 : Nat, tuple_0.1 > 0 -/
def hex_bits_signed_backwards (tuple_0 : (Nat × String)) : (BitVec tuple_0.1) :=
  let (n, str) := tuple_0
  if (BEq.beq (String.take str 1) "-")
  then ((BitVec.zero n) - (parse_hex_bits n (String.drop str 1)))
  else
    let parsed := (parse_hex_bits n str)
    if (BEq.beq (BitVec.access parsed (n -i 1)) 0#1)
    then parsed
    else (BitVec.zero n)

/-- Type quantifiers: tuple_0.1 : Nat, tuple_0.1 > 0 -/
def hex_bits_signed_backwards_matches (tuple_0 : (Nat × String)) : Bool :=
  let (n, str) := tuple_0
  if (BEq.beq (String.take str 1) "-")
  then (valid_hex_bits n (String.drop str 1))
  else
    if (valid_hex_bits n str)
    then
      let parsed := (parse_hex_bits n str)
      (BEq.beq (BitVec.access parsed (n -i 1)) 0#1)
    else false

def hex_bits_signed_1_forwards (arg_ : (BitVec 1)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (1, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_1_backwards (arg_ : String) : (BitVec 1) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (1, s))

def hex_bits_signed_1_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (1, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_1_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_2_forwards (arg_ : (BitVec 2)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (2, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_2_backwards (arg_ : String) : (BitVec 2) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (2, s))

def hex_bits_signed_2_forwards_matches (arg_ : (BitVec 2)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (2, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_2_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_3_forwards (arg_ : (BitVec 3)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (3, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_3_backwards (arg_ : String) : (BitVec 3) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (3, s))

def hex_bits_signed_3_forwards_matches (arg_ : (BitVec 3)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (3, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_3_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_4_forwards (arg_ : (BitVec 4)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (4, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_4_backwards (arg_ : String) : (BitVec 4) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (4, s))

def hex_bits_signed_4_forwards_matches (arg_ : (BitVec 4)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (4, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_4_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_5_forwards (arg_ : (BitVec 5)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (5, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_5_backwards (arg_ : String) : (BitVec 5) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (5, s))

def hex_bits_signed_5_forwards_matches (arg_ : (BitVec 5)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (5, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_5_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_6_forwards (arg_ : (BitVec 6)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (6, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_6_backwards (arg_ : String) : (BitVec 6) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (6, s))

def hex_bits_signed_6_forwards_matches (arg_ : (BitVec 6)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (6, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_6_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_7_forwards (arg_ : (BitVec 7)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (7, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_7_backwards (arg_ : String) : (BitVec 7) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (7, s))

def hex_bits_signed_7_forwards_matches (arg_ : (BitVec 7)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (7, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_7_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_8_forwards (arg_ : (BitVec 8)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (8, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_8_backwards (arg_ : String) : (BitVec 8) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (8, s))

def hex_bits_signed_8_forwards_matches (arg_ : (BitVec 8)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (8, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_8_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_9_forwards (arg_ : (BitVec 9)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (9, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_9_backwards (arg_ : String) : (BitVec 9) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (9, s))

def hex_bits_signed_9_forwards_matches (arg_ : (BitVec 9)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (9, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_9_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_10_forwards (arg_ : (BitVec 10)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (10, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_10_backwards (arg_ : String) : (BitVec 10) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (10, s))

def hex_bits_signed_10_forwards_matches (arg_ : (BitVec 10)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (10, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_10_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_11_forwards (arg_ : (BitVec 11)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (11, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_11_backwards (arg_ : String) : (BitVec 11) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (11, s))

def hex_bits_signed_11_forwards_matches (arg_ : (BitVec 11)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (11, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_11_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_12_forwards (arg_ : (BitVec 12)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (12, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_12_backwards (arg_ : String) : (BitVec 12) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (12, s))

def hex_bits_signed_12_forwards_matches (arg_ : (BitVec 12)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (12, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_12_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_13_forwards (arg_ : (BitVec 13)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (13, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_13_backwards (arg_ : String) : (BitVec 13) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (13, s))

def hex_bits_signed_13_forwards_matches (arg_ : (BitVec 13)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (13, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_13_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_14_forwards (arg_ : (BitVec 14)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (14, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_14_backwards (arg_ : String) : (BitVec 14) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (14, s))

def hex_bits_signed_14_forwards_matches (arg_ : (BitVec 14)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (14, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_14_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_15_forwards (arg_ : (BitVec 15)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (15, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_15_backwards (arg_ : String) : (BitVec 15) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (15, s))

def hex_bits_signed_15_forwards_matches (arg_ : (BitVec 15)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (15, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_15_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_16_forwards (arg_ : (BitVec 16)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (16, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_16_backwards (arg_ : String) : (BitVec 16) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (16, s))

def hex_bits_signed_16_forwards_matches (arg_ : (BitVec 16)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (16, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_16_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_17_forwards (arg_ : (BitVec 17)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (17, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_17_backwards (arg_ : String) : (BitVec 17) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (17, s))

def hex_bits_signed_17_forwards_matches (arg_ : (BitVec 17)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (17, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_17_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_18_forwards (arg_ : (BitVec 18)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (18, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_18_backwards (arg_ : String) : (BitVec 18) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (18, s))

def hex_bits_signed_18_forwards_matches (arg_ : (BitVec 18)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (18, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_18_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_19_forwards (arg_ : (BitVec 19)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (19, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_19_backwards (arg_ : String) : (BitVec 19) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (19, s))

def hex_bits_signed_19_forwards_matches (arg_ : (BitVec 19)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (19, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_19_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_20_forwards (arg_ : (BitVec 20)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (20, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_20_backwards (arg_ : String) : (BitVec 20) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (20, s))

def hex_bits_signed_20_forwards_matches (arg_ : (BitVec 20)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (20, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_20_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_21_forwards (arg_ : (BitVec 21)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (21, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_21_backwards (arg_ : String) : (BitVec 21) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (21, s))

def hex_bits_signed_21_forwards_matches (arg_ : (BitVec 21)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (21, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_21_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_22_forwards (arg_ : (BitVec 22)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (22, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_22_backwards (arg_ : String) : (BitVec 22) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (22, s))

def hex_bits_signed_22_forwards_matches (arg_ : (BitVec 22)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (22, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_22_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_23_forwards (arg_ : (BitVec 23)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (23, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_23_backwards (arg_ : String) : (BitVec 23) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (23, s))

def hex_bits_signed_23_forwards_matches (arg_ : (BitVec 23)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (23, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_23_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_24_forwards (arg_ : (BitVec 24)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (24, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_24_backwards (arg_ : String) : (BitVec 24) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (24, s))

def hex_bits_signed_24_forwards_matches (arg_ : (BitVec 24)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (24, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_24_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_25_forwards (arg_ : (BitVec 25)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (25, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_25_backwards (arg_ : String) : (BitVec 25) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (25, s))

def hex_bits_signed_25_forwards_matches (arg_ : (BitVec 25)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (25, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_25_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_26_forwards (arg_ : (BitVec 26)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (26, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_26_backwards (arg_ : String) : (BitVec 26) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (26, s))

def hex_bits_signed_26_forwards_matches (arg_ : (BitVec 26)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (26, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_26_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_27_forwards (arg_ : (BitVec 27)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (27, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_27_backwards (arg_ : String) : (BitVec 27) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (27, s))

def hex_bits_signed_27_forwards_matches (arg_ : (BitVec 27)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (27, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_27_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_28_forwards (arg_ : (BitVec 28)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (28, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_28_backwards (arg_ : String) : (BitVec 28) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (28, s))

def hex_bits_signed_28_forwards_matches (arg_ : (BitVec 28)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (28, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_28_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_29_forwards (arg_ : (BitVec 29)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (29, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_29_backwards (arg_ : String) : (BitVec 29) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (29, s))

def hex_bits_signed_29_forwards_matches (arg_ : (BitVec 29)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (29, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_29_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_30_forwards (arg_ : (BitVec 30)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (30, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_30_backwards (arg_ : String) : (BitVec 30) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (30, s))

def hex_bits_signed_30_forwards_matches (arg_ : (BitVec 30)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (30, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_30_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_31_forwards (arg_ : (BitVec 31)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (31, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_31_backwards (arg_ : String) : (BitVec 31) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (31, s))

def hex_bits_signed_31_forwards_matches (arg_ : (BitVec 31)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (31, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_31_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_32_forwards (arg_ : (BitVec 32)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (32, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_32_backwards (arg_ : String) : (BitVec 32) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (32, s))

def hex_bits_signed_32_forwards_matches (arg_ : (BitVec 32)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (32, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_32_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_33_forwards (arg_ : (BitVec 33)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (33, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_33_backwards (arg_ : String) : (BitVec 33) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (33, s))

def hex_bits_signed_33_forwards_matches (arg_ : (BitVec 33)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (33, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_33_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_34_forwards (arg_ : (BitVec 34)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (34, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_34_backwards (arg_ : String) : (BitVec 34) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (34, s))

def hex_bits_signed_34_forwards_matches (arg_ : (BitVec 34)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (34, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_34_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_35_forwards (arg_ : (BitVec 35)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (35, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_35_backwards (arg_ : String) : (BitVec 35) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (35, s))

def hex_bits_signed_35_forwards_matches (arg_ : (BitVec 35)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (35, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_35_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_36_forwards (arg_ : (BitVec 36)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (36, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_36_backwards (arg_ : String) : (BitVec 36) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (36, s))

def hex_bits_signed_36_forwards_matches (arg_ : (BitVec 36)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (36, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_36_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_37_forwards (arg_ : (BitVec 37)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (37, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_37_backwards (arg_ : String) : (BitVec 37) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (37, s))

def hex_bits_signed_37_forwards_matches (arg_ : (BitVec 37)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (37, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_37_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_38_forwards (arg_ : (BitVec 38)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (38, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_38_backwards (arg_ : String) : (BitVec 38) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (38, s))

def hex_bits_signed_38_forwards_matches (arg_ : (BitVec 38)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (38, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_38_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_39_forwards (arg_ : (BitVec 39)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (39, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_39_backwards (arg_ : String) : (BitVec 39) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (39, s))

def hex_bits_signed_39_forwards_matches (arg_ : (BitVec 39)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (39, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_39_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_40_forwards (arg_ : (BitVec 40)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (40, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_40_backwards (arg_ : String) : (BitVec 40) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (40, s))

def hex_bits_signed_40_forwards_matches (arg_ : (BitVec 40)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (40, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_40_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_41_forwards (arg_ : (BitVec 41)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (41, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_41_backwards (arg_ : String) : (BitVec 41) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (41, s))

def hex_bits_signed_41_forwards_matches (arg_ : (BitVec 41)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (41, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_41_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_42_forwards (arg_ : (BitVec 42)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (42, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_42_backwards (arg_ : String) : (BitVec 42) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (42, s))

def hex_bits_signed_42_forwards_matches (arg_ : (BitVec 42)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (42, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_42_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_43_forwards (arg_ : (BitVec 43)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (43, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_43_backwards (arg_ : String) : (BitVec 43) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (43, s))

def hex_bits_signed_43_forwards_matches (arg_ : (BitVec 43)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (43, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_43_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_44_forwards (arg_ : (BitVec 44)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (44, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_44_backwards (arg_ : String) : (BitVec 44) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (44, s))

def hex_bits_signed_44_forwards_matches (arg_ : (BitVec 44)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (44, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_44_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_45_forwards (arg_ : (BitVec 45)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (45, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_45_backwards (arg_ : String) : (BitVec 45) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (45, s))

def hex_bits_signed_45_forwards_matches (arg_ : (BitVec 45)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (45, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_45_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_46_forwards (arg_ : (BitVec 46)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (46, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_46_backwards (arg_ : String) : (BitVec 46) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (46, s))

def hex_bits_signed_46_forwards_matches (arg_ : (BitVec 46)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (46, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_46_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_47_forwards (arg_ : (BitVec 47)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (47, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_47_backwards (arg_ : String) : (BitVec 47) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (47, s))

def hex_bits_signed_47_forwards_matches (arg_ : (BitVec 47)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (47, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_47_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_48_forwards (arg_ : (BitVec 48)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (48, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_48_backwards (arg_ : String) : (BitVec 48) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (48, s))

def hex_bits_signed_48_forwards_matches (arg_ : (BitVec 48)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (48, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_48_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_49_forwards (arg_ : (BitVec 49)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (49, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_49_backwards (arg_ : String) : (BitVec 49) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (49, s))

def hex_bits_signed_49_forwards_matches (arg_ : (BitVec 49)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (49, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_49_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_50_forwards (arg_ : (BitVec 50)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (50, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_50_backwards (arg_ : String) : (BitVec 50) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (50, s))

def hex_bits_signed_50_forwards_matches (arg_ : (BitVec 50)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (50, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_50_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_51_forwards (arg_ : (BitVec 51)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (51, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_51_backwards (arg_ : String) : (BitVec 51) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (51, s))

def hex_bits_signed_51_forwards_matches (arg_ : (BitVec 51)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (51, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_51_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_52_forwards (arg_ : (BitVec 52)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (52, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_52_backwards (arg_ : String) : (BitVec 52) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (52, s))

def hex_bits_signed_52_forwards_matches (arg_ : (BitVec 52)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (52, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_52_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_53_forwards (arg_ : (BitVec 53)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (53, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_53_backwards (arg_ : String) : (BitVec 53) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (53, s))

def hex_bits_signed_53_forwards_matches (arg_ : (BitVec 53)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (53, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_53_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_54_forwards (arg_ : (BitVec 54)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (54, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_54_backwards (arg_ : String) : (BitVec 54) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (54, s))

def hex_bits_signed_54_forwards_matches (arg_ : (BitVec 54)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (54, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_54_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_55_forwards (arg_ : (BitVec 55)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (55, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_55_backwards (arg_ : String) : (BitVec 55) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (55, s))

def hex_bits_signed_55_forwards_matches (arg_ : (BitVec 55)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (55, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_55_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_56_forwards (arg_ : (BitVec 56)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (56, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_56_backwards (arg_ : String) : (BitVec 56) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (56, s))

def hex_bits_signed_56_forwards_matches (arg_ : (BitVec 56)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (56, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_56_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_57_forwards (arg_ : (BitVec 57)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (57, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_57_backwards (arg_ : String) : (BitVec 57) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (57, s))

def hex_bits_signed_57_forwards_matches (arg_ : (BitVec 57)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (57, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_57_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_58_forwards (arg_ : (BitVec 58)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (58, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_58_backwards (arg_ : String) : (BitVec 58) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (58, s))

def hex_bits_signed_58_forwards_matches (arg_ : (BitVec 58)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (58, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_58_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_59_forwards (arg_ : (BitVec 59)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (59, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_59_backwards (arg_ : String) : (BitVec 59) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (59, s))

def hex_bits_signed_59_forwards_matches (arg_ : (BitVec 59)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (59, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_59_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_60_forwards (arg_ : (BitVec 60)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (60, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_60_backwards (arg_ : String) : (BitVec 60) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (60, s))

def hex_bits_signed_60_forwards_matches (arg_ : (BitVec 60)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (60, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_60_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_61_forwards (arg_ : (BitVec 61)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (61, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_61_backwards (arg_ : String) : (BitVec 61) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (61, s))

def hex_bits_signed_61_forwards_matches (arg_ : (BitVec 61)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (61, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_61_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_62_forwards (arg_ : (BitVec 62)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (62, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_62_backwards (arg_ : String) : (BitVec 62) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (62, s))

def hex_bits_signed_62_forwards_matches (arg_ : (BitVec 62)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (62, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_62_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_63_forwards (arg_ : (BitVec 63)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (63, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_63_backwards (arg_ : String) : (BitVec 63) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (63, s))

def hex_bits_signed_63_forwards_matches (arg_ : (BitVec 63)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (63, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_63_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def hex_bits_signed_64_forwards (arg_ : (BitVec 64)) : SailM String := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (64, s) => (some s)
      | _ => none
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def hex_bits_signed_64_backwards (arg_ : String) : (BitVec 64) :=
  match arg_ with
  | s => (hex_bits_signed_backwards (64, s))

def hex_bits_signed_64_forwards_matches (arg_ : (BitVec 64)) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | (mapping0_) =>
    if (hex_bits_signed_forwards_matches mapping0_)
    then
      match (hex_bits_signed_forwards mapping0_) with
      | (64, s) => (some true)
      | _ => none
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def hex_bits_signed_64_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | s => true

def not_bit (b : (BitVec 1)) : (BitVec 1) :=
  if (BEq.beq b 1#1)
  then 0#1
  else 1#1

/-- Type quantifiers: k_p : Bool -/
def not (b : Bool) : Bool :=
  (Bool.not b)

def bit_str (b : (BitVec 1)) : SailM String := do
  match b with
  | 0#1 => (pure "0b0")
  | 1#1 => (pure "0b1")
  | _ =>
    assert false "Pattern match failure at prelude.sail:35.2-38.3"
    throw Error.Exit

def print_step (_ : Unit) : Unit :=
  ()

def get_config_print_instr (_ : Unit) : Bool :=
  false

def get_config_print_reg (_ : Unit) : Bool :=
  false

def get_config_print_mem (_ : Unit) : Bool :=
  false

def get_config_print_platform (_ : Unit) : Bool :=
  false

/-- Type quantifiers: k_n : Int, m : Int, m ≥ k_n -/
def sign_extend {m : _} (v : (BitVec k_n)) : (BitVec m) :=
  (Sail.BitVec.signExtend v m)

/-- Type quantifiers: k_n : Int, m : Int, m ≥ k_n -/
def zero_extend {m : _} (v : (BitVec k_n)) : (BitVec m) :=
  (Sail.BitVec.zeroExtend v m)

/-- Type quantifiers: n : Nat, n ≥ 0 -/
def zeros_implicit {n : _} : (BitVec n) :=
  (BitVec.zero n)

/-- Type quantifiers: n : Nat, n ≥ 0 -/
def ones {n : _} : (BitVec n) :=
  (sail_ones n)

/-- Type quantifiers: k_ex99746# : Bool -/
def bool_bit_forwards (arg_ : Bool) : (BitVec 1) :=
  match arg_ with
  | true => 1#1
  | false => 0#1

def bool_bit_backwards (arg_ : (BitVec 1)) : SailM Bool := do
  match arg_ with
  | 1#1 => (pure true)
  | 0#1 => (pure false)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: k_ex99747# : Bool -/
def bool_bit_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def bool_bit_backwards_matches (arg_ : (BitVec 1)) : Bool :=
  match arg_ with
  | 1#1 => true
  | 0#1 => true
  | g__1 => false

/-- Type quantifiers: k_ex99748# : Bool -/
def bool_bits_forwards (arg_ : Bool) : (BitVec 1) :=
  match arg_ with
  | true => (0b1 : (BitVec 1))
  | false => (0b0 : (BitVec 1))

def bool_bits_backwards (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else false

/-- Type quantifiers: k_ex99750# : Bool -/
def bool_bits_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def bool_bits_backwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b0 : (BitVec 1)))
    then true
    else false

/-- Type quantifiers: k_ex99753# : Bool -/
def bool_not_bits_forwards (arg_ : Bool) : (BitVec 1) :=
  match arg_ with
  | true => (0b0 : (BitVec 1))
  | false => (0b1 : (BitVec 1))

def bool_not_bits_backwards (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b0 : (BitVec 1)))
  then true
  else false

/-- Type quantifiers: k_ex99755# : Bool -/
def bool_not_bits_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def bool_not_bits_backwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b0 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b1 : (BitVec 1)))
    then true
    else false

/-- Type quantifiers: k_ex99758# : Bool -/
def bool_to_bit (x : Bool) : (BitVec 1) :=
  (bool_bit_forwards x)

def bit_to_bool (x : (BitVec 1)) : SailM Bool := do
  (bool_bit_backwards x)

/-- Type quantifiers: k_ex99760# : Bool -/
def bool_to_bits (x : Bool) : (BitVec 1) :=
  (bool_bits_forwards x)

def bits_to_bool (x : (BitVec 1)) : Bool :=
  (bool_bits_backwards x)

/-- Type quantifiers: n : Int, l : Nat, l ≥ 0 -/
def to_bits (l : Nat) (n : Int) : (BitVec l) :=
  (get_slice_int l n 0)

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def zopz0zI_s (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toInt x) <b (BitVec.toInt y))

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def zopz0zK_s (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toInt x) >b (BitVec.toInt y))

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def zopz0zIzJ_s (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toInt x) ≤b (BitVec.toInt y))

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def zopz0zKzJ_s (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toInt x) ≥b (BitVec.toInt y))

/-- Type quantifiers: k_n : Int -/
def zopz0zI_u (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toNat x) <b (BitVec.toNat y))

/-- Type quantifiers: k_n : Int -/
def zopz0zK_u (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toNat x) >b (BitVec.toNat y))

/-- Type quantifiers: k_n : Int -/
def zopz0zIzJ_u (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toNat x) ≤b (BitVec.toNat y))

/-- Type quantifiers: k_n : Int -/
def zopz0zKzJ_u (x : (BitVec k_n)) (y : (BitVec k_n)) : Bool :=
  ((BitVec.toNat x) ≥b (BitVec.toNat y))

/-- Type quantifiers: shift : Nat, k_n : Nat, k_n ≥ 1 ∧ shift ≥ 0 -/
def shift_right_arith (value : (BitVec k_n)) (shift : Nat) : (BitVec k_n) :=
  (Sail.BitVec.extractLsb (sign_extend (m := ((Sail.BitVec.length value) +i shift)) value)
    (((Sail.BitVec.length value) -i 1) +i shift) shift)

/-- Type quantifiers: k_m : Int, k_n : Nat, k_n ≥ 1 -/
def shift_bits_right_arith (value : (BitVec k_n)) (shift : (BitVec k_m)) : (BitVec k_n) :=
  (shift_right_arith value (BitVec.toNat shift))

/-- Type quantifiers: k_n : Int, k_m : Nat, k_m ≥ 0 -/
def rotate_bits_right (v : (BitVec k_n)) (n : (BitVec k_m)) : (BitVec k_n) :=
  ((shift_bits_right v n) ||| (shift_bits_left v
      ((to_bits (Sail.BitVec.length n) (Sail.BitVec.length v)) - n)))

/-- Type quantifiers: k_n : Int, k_m : Nat, k_m ≥ 0 -/
def rotate_bits_left (v : (BitVec k_n)) (n : (BitVec k_m)) : (BitVec k_n) :=
  ((shift_bits_left v n) ||| (shift_bits_right v
      ((to_bits (Sail.BitVec.length n) (Sail.BitVec.length v)) - n)))

/-- Type quantifiers: k_m : Nat, n : Nat, k_m ≥ n ∧ n ≥ 0 -/
def rotater (v : (BitVec k_m)) (n : Nat) : (BitVec k_m) :=
  ((shiftr v n) ||| (shiftl v ((Sail.BitVec.length v) -i n)))

/-- Type quantifiers: k_m : Nat, n : Nat, k_m ≥ n ∧ n ≥ 0 -/
def rotatel (v : (BitVec k_m)) (n : Nat) : (BitVec k_m) :=
  ((shiftl v n) ||| (shiftr v ((Sail.BitVec.length v) -i n)))

def reverse_bits_in_byte (xs : (BitVec 8)) : (BitVec 8) := Id.run do
  let ys : (BitVec 8) := (zeros_implicit (n := 8))
  let loop_i_lower := 0
  let loop_i_upper := 7
  let mut loop_vars := ys
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let ys := loop_vars
    loop_vars := (BitVec.update ys i (BitVec.access xs (7 -i i)))
  (pure loop_vars)

/-- Type quantifiers: n : Nat, n ∈ {1, 2, 4, 8, 16, 32, 64} -/
def log2 (n : Nat) : Int :=
  match n with
  | 1 => 0
  | 2 => 1
  | 4 => 2
  | 8 => 3
  | 16 => 4
  | 32 => 5
  | _ => 6

/-- Type quantifiers: k_a : Type -/
def not_implemented (message : String) : SailM k_a := do
  sailThrow ((Error_not_implemented message))

/-- Type quantifiers: line : Int, k_a : Type -/
def internal_error (file : String) (line : Int) (s : String) : SailM k_a := do
  assert false (HAppend.hAppend file
    (HAppend.hAppend ":" (HAppend.hAppend (Int.repr line) (HAppend.hAppend ": " s))))
  throw Error.Exit

def log2_xlen := (3 +i 3)

def log2_xlen_bytes := 3

def xlen_bytes := (2 ^i 3)

def xlen := ((2 ^i 3) *i 8)

def asidlen := 16

def flen_bytes := 8

def flen := (8 *i 8)

def get_elen_pow (_ : Unit) : Nat :=
  (sys_vector_elen_exp ())

def get_vlen_pow (_ : Unit) : Nat :=
  (sys_vector_vlen_exp ())

def VLEN := (2 ^i (get_vlen_pow ()))

def physaddrbits_len := 64

def physaddr_bits (app_0 : physaddr) : (BitVec 64) :=
  let .physaddr paddr := app_0
  paddr

def virtaddr_bits (app_0 : virtaddr) : (BitVec (2 ^ 3 * 8)) :=
  let .virtaddr vaddr := app_0
  vaddr

def default_meta : mem_meta := ()

/-- Type quantifiers: width : Nat, 1 ≤ width ∧ width ≤ 4096 -/
def __WriteRAM_Meta (addr : (BitVec 64)) (width : Nat) (meta : Unit) : Unit :=
  ()

/-- Type quantifiers: width : Nat, 1 ≤ width ∧ width ≤ 4096 -/
def __ReadRAM_Meta (addr : (BitVec 64)) (width : Nat) : Unit :=
  default_meta

/-- Type quantifiers: k_a : Type, k_b : Type -/
def is_ok (r : (Result k_a k_b)) : Bool :=
  match r with
  | .Ok _ => true
  | .Err _ => false

/-- Type quantifiers: k_a : Type, k_b : Type -/
def is_err (r : (Result k_a k_b)) : Bool :=
  match r with
  | .Ok _ => false
  | .Err _ => true

/-- Type quantifiers: k_a : Type, k_b : Type -/
def ok_option (r : (Result k_a k_b)) : (Option k_a) :=
  match r with
  | .Ok x => (some x)
  | .Err _ => none

/-- Type quantifiers: k_a : Type, k_b : Type -/
def err_option (r : (Result k_a k_b)) : (Option k_b) :=
  match r with
  | .Ok _ => none
  | .Err err => (some err)

/-- Type quantifiers: k_a : Type, k_b : Type -/
def unwrap_or (r : (Result k_a k_b)) (y : k_a) : k_a :=
  match r with
  | .Ok x => x
  | .Err _ => y

/-- Type quantifiers: k_n : Nat, k_n > 0 -/
def sail_instr_announce (x_0 : (BitVec k_n)) : Unit :=
  ()

/-- Type quantifiers: x_0 : Nat, x_0 ∈ {32, 64} -/
def sail_branch_announce (x_0 : Nat) (x_1 : (BitVec x_0)) : Unit :=
  ()

def sail_reset_registers (_ : Unit) : Unit :=
  ()

def sail_synchronize_registers (_ : Unit) : Unit :=
  ()

/-- Type quantifiers: k_a : Type -/
def sail_mark_register (x_0 : (RegisterRef k_a)) (x_1 : String) : Unit :=
  ()

/-- Type quantifiers: k_a : Type, k_b : Type -/
def sail_mark_register_pair (x_0 : (RegisterRef k_a)) (x_1 : (RegisterRef k_b)) (x_2 : String) : Unit :=
  ()

/-- Type quantifiers: k_a : Type -/
def sail_ignore_write_to (reg : (RegisterRef k_a)) : Unit :=
  (sail_mark_register reg "ignore_write")

/-- Type quantifiers: k_a : Type -/
def sail_pick_dependency (reg : (RegisterRef k_a)) : Unit :=
  (sail_mark_register reg "pick")

/-- Type quantifiers: k_n : Nat, k_n ≥ 0 -/
def __monomorphize (bv : (BitVec k_n)) : (BitVec k_n) :=
  bv

def undefined_Access_variety (_ : Unit) : SailM Access_variety := do
  (internal_pick [AV_plain, AV_exclusive, AV_atomic_rmw])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def Access_variety_of_num (arg_ : Nat) : Access_variety :=
  match arg_ with
  | 0 => AV_plain
  | 1 => AV_exclusive
  | _ => AV_atomic_rmw

def num_of_Access_variety (arg_ : Access_variety) : Int :=
  match arg_ with
  | AV_plain => 0
  | AV_exclusive => 1
  | AV_atomic_rmw => 2

def undefined_Access_strength (_ : Unit) : SailM Access_strength := do
  (internal_pick [AS_normal, AS_rel_or_acq, AS_acq_rcpc])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def Access_strength_of_num (arg_ : Nat) : Access_strength :=
  match arg_ with
  | 0 => AS_normal
  | 1 => AS_rel_or_acq
  | _ => AS_acq_rcpc

def num_of_Access_strength (arg_ : Access_strength) : Int :=
  match arg_ with
  | AS_normal => 0
  | AS_rel_or_acq => 1
  | AS_acq_rcpc => 2

def undefined_Explicit_access_kind (_ : Unit) : SailM Explicit_access_kind := do
  (pure { variety := (← (undefined_Access_variety ()))
          strength := (← (undefined_Access_strength ())) })

/-- Type quantifiers: k_n : Nat, k_vasize : Nat, k_pa : Type, k_translation_summary : Type, k_arch_ak
  : Type, k_n > 0 ∧ k_vasize > 0 -/
def mem_read_request_is_exclusive (request : (Mem_read_request k_n k_vasize k_pa k_translation_summary k_arch_ak)) : Bool :=
  match request.access_kind with
  | .AK_explicit eak =>
    match eak.variety with
    | AV_exclusive => true
    | _ => false
  | _ => false

/-- Type quantifiers: k_n : Nat, k_vasize : Nat, k_pa : Type, k_translation_summary : Type, k_arch_ak
  : Type, k_n > 0 ∧ k_vasize > 0 -/
def mem_read_request_is_ifetch (request : (Mem_read_request k_n k_vasize k_pa k_translation_summary k_arch_ak)) : Bool :=
  match request.access_kind with
  | .AK_ifetch () => true
  | _ => false

def __monomorphize_reads : Bool := false

def __monomorphize_writes : Bool := false

/-- Type quantifiers: k_n : Nat, k_vasize : Nat, k_pa : Type, k_translation_summary : Type, k_arch_ak
  : Type, k_n > 0 ∧ k_vasize > 0 -/
def mem_write_request_is_exclusive (request : (Mem_write_request k_n k_vasize k_pa k_translation_summary k_arch_ak)) : Bool :=
  match request.access_kind with
  | .AK_explicit eak =>
    match eak.variety with
    | AV_exclusive => true
    | _ => false
  | _ => false

/-- Type quantifiers: x_0 : Nat, x_0 ∈ {32, 64} -/
def sail_address_announce (x_0 : Nat) (x_1 : (BitVec x_0)) : Unit :=
  ()

def undefined_write_kind (_ : Unit) : SailM write_kind := do
  (internal_pick
    [Write_plain, Write_RISCV_release, Write_RISCV_strong_release, Write_RISCV_conditional, Write_RISCV_conditional_release, Write_RISCV_conditional_strong_release])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def write_kind_of_num (arg_ : Nat) : write_kind :=
  match arg_ with
  | 0 => Write_plain
  | 1 => Write_RISCV_release
  | 2 => Write_RISCV_strong_release
  | 3 => Write_RISCV_conditional
  | 4 => Write_RISCV_conditional_release
  | _ => Write_RISCV_conditional_strong_release

def num_of_write_kind (arg_ : write_kind) : Int :=
  match arg_ with
  | Write_plain => 0
  | Write_RISCV_release => 1
  | Write_RISCV_strong_release => 2
  | Write_RISCV_conditional => 3
  | Write_RISCV_conditional_release => 4
  | Write_RISCV_conditional_strong_release => 5

def undefined_read_kind (_ : Unit) : SailM read_kind := do
  (internal_pick
    [Read_plain, Read_ifetch, Read_RISCV_acquire, Read_RISCV_strong_acquire, Read_RISCV_reserved, Read_RISCV_reserved_acquire, Read_RISCV_reserved_strong_acquire])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 6 -/
def read_kind_of_num (arg_ : Nat) : read_kind :=
  match arg_ with
  | 0 => Read_plain
  | 1 => Read_ifetch
  | 2 => Read_RISCV_acquire
  | 3 => Read_RISCV_strong_acquire
  | 4 => Read_RISCV_reserved
  | 5 => Read_RISCV_reserved_acquire
  | _ => Read_RISCV_reserved_strong_acquire

def num_of_read_kind (arg_ : read_kind) : Int :=
  match arg_ with
  | Read_plain => 0
  | Read_ifetch => 1
  | Read_RISCV_acquire => 2
  | Read_RISCV_strong_acquire => 3
  | Read_RISCV_reserved => 4
  | Read_RISCV_reserved_acquire => 5
  | Read_RISCV_reserved_strong_acquire => 6

def undefined_barrier_kind (_ : Unit) : SailM barrier_kind := do
  (internal_pick
    [Barrier_RISCV_rw_rw, Barrier_RISCV_r_rw, Barrier_RISCV_r_r, Barrier_RISCV_rw_w, Barrier_RISCV_w_w, Barrier_RISCV_w_rw, Barrier_RISCV_rw_r, Barrier_RISCV_r_w, Barrier_RISCV_w_r, Barrier_RISCV_tso, Barrier_RISCV_i])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 10 -/
def barrier_kind_of_num (arg_ : Nat) : barrier_kind :=
  match arg_ with
  | 0 => Barrier_RISCV_rw_rw
  | 1 => Barrier_RISCV_r_rw
  | 2 => Barrier_RISCV_r_r
  | 3 => Barrier_RISCV_rw_w
  | 4 => Barrier_RISCV_w_w
  | 5 => Barrier_RISCV_w_rw
  | 6 => Barrier_RISCV_rw_r
  | 7 => Barrier_RISCV_r_w
  | 8 => Barrier_RISCV_w_r
  | 9 => Barrier_RISCV_tso
  | _ => Barrier_RISCV_i

def num_of_barrier_kind (arg_ : barrier_kind) : Int :=
  match arg_ with
  | Barrier_RISCV_rw_rw => 0
  | Barrier_RISCV_r_rw => 1
  | Barrier_RISCV_r_r => 2
  | Barrier_RISCV_rw_w => 3
  | Barrier_RISCV_w_w => 4
  | Barrier_RISCV_w_rw => 5
  | Barrier_RISCV_rw_r => 6
  | Barrier_RISCV_r_w => 7
  | Barrier_RISCV_w_r => 8
  | Barrier_RISCV_tso => 9
  | Barrier_RISCV_i => 10

def undefined_RISCV_strong_access (_ : Unit) : SailM RISCV_strong_access := do
  (pure { variety := (← (undefined_Access_variety ())) })

def physaddrbits_zero_extend (xs : (BitVec 64)) : (BitVec 64) :=
  (zero_extend (m := 64) xs)

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def write_ram (wk : write_kind) (app_1 : physaddr) (width : Nat) (data : (BitVec (8 * width))) (meta : Unit) : SailM Bool := do
  let .physaddr addr := app_1
  let request : (Mem_write_request width 64 physaddrbits Unit RISCV_strong_access) :=
    { access_kind := match wk with
      | Write_plain =>
        (AK_explicit
          { variety := AV_plain
            strength := AS_normal })
      | Write_RISCV_release =>
        (AK_explicit
          { variety := AV_plain
            strength := AS_rel_or_acq })
      | Write_RISCV_strong_release => (AK_arch { variety := AV_plain })
      | Write_RISCV_conditional =>
        (AK_explicit
          { variety := AV_exclusive
            strength := AS_normal })
      | Write_RISCV_conditional_release =>
        (AK_explicit
          { variety := AV_exclusive
            strength := AS_rel_or_acq })
      | Write_RISCV_conditional_strong_release => (AK_arch { variety := AV_exclusive })
      va := none
      pa := addr
      translation := ()
      size := width
      value := (some data)
      tag := none }
  match (← (sail_mem_write request)) with
  | .Ok _ =>
    let _ : Unit := (__WriteRAM_Meta addr width meta)
    (pure true)
  | .Err () => (pure false)

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def write_ram_ea (wk : write_kind) (app_1 : physaddr) (width : Nat) : Unit :=
  let .physaddr addr := app_1
  ()

/-- Type quantifiers: k_ex99901# : Bool, width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def read_ram (rk : read_kind) (app_1 : physaddr) (width : Nat) (read_meta : Bool) : SailM ((BitVec (8 * width)) × Unit) := do
  let .physaddr addr := app_1
  let meta :=
    if read_meta
    then (__ReadRAM_Meta addr width)
    else default_meta
  let request : (Mem_read_request width 64 physaddrbits Unit RISCV_strong_access) :=
    { access_kind := match rk with
      | Read_plain =>
        (AK_explicit
          { variety := AV_plain
            strength := AS_normal })
      | Read_ifetch => (AK_ifetch ())
      | Read_RISCV_acquire =>
        (AK_explicit
          { variety := AV_plain
            strength := AS_rel_or_acq })
      | Read_RISCV_strong_acquire => (AK_arch { variety := AV_plain })
      | Read_RISCV_reserved =>
        (AK_explicit
          { variety := AV_exclusive
            strength := AS_normal })
      | Read_RISCV_reserved_acquire =>
        (AK_explicit
          { variety := AV_exclusive
            strength := AS_rel_or_acq })
      | Read_RISCV_reserved_strong_acquire => (AK_arch { variety := AV_exclusive })
      va := none
      pa := addr
      translation := ()
      size := width
      tag := false }
  match (← (sail_mem_read request)) with
  | .Ok (value, _) => (pure (value, meta))
  | .Err () => throw Error.Exit

def init_ext_ptw : ext_ptw := ()

def ext_translate_exception (e : Unit) : Unit :=
  e

def ext_exc_type_to_bits (e : Unit) : (BitVec 8) :=
  (0x18 : (BitVec 8))

def num_of_ext_exc_type (e : Unit) : Int :=
  24

def ext_exc_type_to_str (e : Unit) : String :=
  "extension-exception"

def xlen_val := xlen

def xlen_max_unsigned := ((2 ^i xlen) -i 1)

def xlen_max_signed := ((2 ^i (xlen -i 1)) -i 1)

def xlen_min_signed := (0 -i (2 ^i (xlen -i 1)))

def pagesize_bits := 12

def regidx_offset (typ_0 : regidx) (o : (BitVec 5)) : regidx :=
  let .Regidx r : regidx := typ_0
  (Regidx (r + o))

def regidx_bits (app_0 : regidx) : (BitVec 5) :=
  let .Regidx b := app_0
  b

def regidx_to_regno (app_0 : regidx) : regno :=
  let .Regidx b := app_0
  (Regno (BitVec.toNat b))

def creg2reg_idx (app_0 : cregidx) : regidx :=
  let .Cregidx i := app_0
  (Regidx ((0b01 : (BitVec 2)) ++ i))

def zreg : regidx := (Regidx (0b00000 : (BitVec 5)))

def ra : regidx := (Regidx (0b00001 : (BitVec 5)))

def sp : regidx := (Regidx (0b00010 : (BitVec 5)))

def undefined_Architecture (_ : Unit) : SailM Architecture := do
  (internal_pick [RV32, RV64, RV128])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def Architecture_of_num (arg_ : Nat) : Architecture :=
  match arg_ with
  | 0 => RV32
  | 1 => RV64
  | _ => RV128

def num_of_Architecture (arg_ : Architecture) : Int :=
  match arg_ with
  | RV32 => 0
  | RV64 => 1
  | RV128 => 2

def architecture_forwards (arg_ : Architecture) : (BitVec 2) :=
  match arg_ with
  | RV32 => (0b01 : (BitVec 2))
  | RV64 => (0b10 : (BitVec 2))
  | RV128 => (0b11 : (BitVec 2))

def architecture_backwards (arg_ : (BitVec 2)) : SailM Architecture := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b01 : (BitVec 2)))
  then (pure RV32)
  else
    if (BEq.beq b__0 (0b10 : (BitVec 2)))
    then (pure RV64)
    else
      if (BEq.beq b__0 (0b11 : (BitVec 2)))
      then (pure RV128)
      else (internal_error "riscv_types.sail" 74 "architecture(0b00) is invalid")

def architecture_forwards_matches (arg_ : Architecture) : Bool :=
  match arg_ with
  | RV32 => true
  | RV64 => true
  | RV128 => true

def architecture_backwards_matches (arg_ : (BitVec 2)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b01 : (BitVec 2)))
  then true
  else
    if (BEq.beq b__0 (0b10 : (BitVec 2)))
    then true
    else
      if (BEq.beq b__0 (0b11 : (BitVec 2)))
      then true
      else
        if (BEq.beq b__0 (0b00 : (BitVec 2)))
        then true
        else false

def undefined_Privilege (_ : Unit) : SailM Privilege := do
  (internal_pick [User, Supervisor, Machine])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def Privilege_of_num (arg_ : Nat) : Privilege :=
  match arg_ with
  | 0 => User
  | 1 => Supervisor
  | _ => Machine

def num_of_Privilege (arg_ : Privilege) : Int :=
  match arg_ with
  | User => 0
  | Supervisor => 1
  | Machine => 2

def privLevel_to_bits (p : Privilege) : (BitVec 2) :=
  match p with
  | User => (0b00 : (BitVec 2))
  | Supervisor => (0b01 : (BitVec 2))
  | Machine => (0b11 : (BitVec 2))

def privLevel_of_bits (p : (BitVec 2)) : SailM Privilege := do
  let b__0 := p
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then (pure User)
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then (pure Supervisor)
    else
      if (BEq.beq b__0 (0b11 : (BitVec 2)))
      then (pure Machine)
      else
        (internal_error "riscv_types.sail" 100
          (HAppend.hAppend "Invalid privilege level: " (BitVec.toFormatted p)))

def privLevel_to_str (p : Privilege) : String :=
  match p with
  | User => "U"
  | Supervisor => "S"
  | Machine => "M"

def accessType_to_str (a : (AccessType Unit)) : String :=
  match a with
  | .Read _ => "R"
  | .Write _ => "W"
  | .ReadWrite (_, _) => "RW"
  | .Execute () => "X"

def csr_name_map_forwards (arg_ : (BitVec 12)) : SailM String := do
  let b__0 := arg_
  if (BEq.beq b__0 (0x301 : (BitVec 12)))
  then (pure "misa")
  else
    if (BEq.beq b__0 (0x300 : (BitVec 12)))
    then (pure "mstatus")
    else
      if (BEq.beq b__0 (0x30A : (BitVec 12)))
      then (pure "menvcfg")
      else
        if (BEq.beq b__0 (0x31A : (BitVec 12)))
        then (pure "menvcfgh")
        else
          if (BEq.beq b__0 (0x10A : (BitVec 12)))
          then (pure "senvcfg")
          else
            if (BEq.beq b__0 (0x304 : (BitVec 12)))
            then (pure "mie")
            else
              if (BEq.beq b__0 (0x344 : (BitVec 12)))
              then (pure "mip")
              else
                if (BEq.beq b__0 (0x302 : (BitVec 12)))
                then (pure "medeleg")
                else
                  if (BEq.beq b__0 (0x312 : (BitVec 12)))
                  then (pure "medelegh")
                  else
                    if (BEq.beq b__0 (0x303 : (BitVec 12)))
                    then (pure "mideleg")
                    else
                      if (BEq.beq b__0 (0x342 : (BitVec 12)))
                      then (pure "mcause")
                      else
                        if (BEq.beq b__0 (0x343 : (BitVec 12)))
                        then (pure "mtval")
                        else
                          if (BEq.beq b__0 (0x340 : (BitVec 12)))
                          then (pure "mscratch")
                          else
                            if (BEq.beq b__0 (0x106 : (BitVec 12)))
                            then (pure "scounteren")
                            else
                              if (BEq.beq b__0 (0x306 : (BitVec 12)))
                              then (pure "mcounteren")
                              else
                                if (BEq.beq b__0 (0x320 : (BitVec 12)))
                                then (pure "mcountinhibit")
                                else
                                  if (BEq.beq b__0 (0xF11 : (BitVec 12)))
                                  then (pure "mvendorid")
                                  else
                                    if (BEq.beq b__0 (0xF12 : (BitVec 12)))
                                    then (pure "marchid")
                                    else
                                      if (BEq.beq b__0 (0xF13 : (BitVec 12)))
                                      then (pure "mimpid")
                                      else
                                        if (BEq.beq b__0 (0xF14 : (BitVec 12)))
                                        then (pure "mhartid")
                                        else
                                          if (BEq.beq b__0 (0xF15 : (BitVec 12)))
                                          then (pure "mconfigptr")
                                          else
                                            if (BEq.beq b__0 (0x100 : (BitVec 12)))
                                            then (pure "sstatus")
                                            else
                                              if (BEq.beq b__0 (0x144 : (BitVec 12)))
                                              then (pure "sip")
                                              else
                                                if (BEq.beq b__0 (0x104 : (BitVec 12)))
                                                then (pure "sie")
                                                else
                                                  if (BEq.beq b__0 (0x140 : (BitVec 12)))
                                                  then (pure "sscratch")
                                                  else
                                                    if (BEq.beq b__0 (0x142 : (BitVec 12)))
                                                    then (pure "scause")
                                                    else
                                                      if (BEq.beq b__0 (0x143 : (BitVec 12)))
                                                      then (pure "stval")
                                                      else
                                                        if (BEq.beq b__0 (0x7A0 : (BitVec 12)))
                                                        then (pure "tselect")
                                                        else
                                                          if (BEq.beq b__0 (0x7A1 : (BitVec 12)))
                                                          then (pure "tdata1")
                                                          else
                                                            if (BEq.beq b__0 (0x7A2 : (BitVec 12)))
                                                            then (pure "tdata2")
                                                            else
                                                              if (BEq.beq b__0 (0x7A3 : (BitVec 12)))
                                                              then (pure "tdata3")
                                                              else
                                                                if (BEq.beq b__0
                                                                     (0x3A0 : (BitVec 12)))
                                                                then (pure "pmpcfg0")
                                                                else
                                                                  if (BEq.beq b__0
                                                                       (0x3A1 : (BitVec 12)))
                                                                  then (pure "pmpcfg1")
                                                                  else
                                                                    if (BEq.beq b__0
                                                                         (0x3A2 : (BitVec 12)))
                                                                    then (pure "pmpcfg2")
                                                                    else
                                                                      if (BEq.beq b__0
                                                                           (0x3A3 : (BitVec 12)))
                                                                      then (pure "pmpcfg3")
                                                                      else
                                                                        if (BEq.beq b__0
                                                                             (0x3A4 : (BitVec 12)))
                                                                        then (pure "pmpcfg4")
                                                                        else
                                                                          if (BEq.beq b__0
                                                                               (0x3A5 : (BitVec 12)))
                                                                          then (pure "pmpcfg5")
                                                                          else
                                                                            if (BEq.beq b__0
                                                                                 (0x3A6 : (BitVec 12)))
                                                                            then (pure "pmpcfg6")
                                                                            else
                                                                              if (BEq.beq b__0
                                                                                   (0x3A7 : (BitVec 12)))
                                                                              then (pure "pmpcfg7")
                                                                              else
                                                                                if (BEq.beq b__0
                                                                                     (0x3A8 : (BitVec 12)))
                                                                                then
                                                                                  (pure "pmpcfg8")
                                                                                else
                                                                                  if (BEq.beq b__0
                                                                                       (0x3A9 : (BitVec 12)))
                                                                                  then
                                                                                    (pure "pmpcfg9")
                                                                                  else
                                                                                    if (BEq.beq b__0
                                                                                         (0x3AA : (BitVec 12)))
                                                                                    then
                                                                                      (pure "pmpcfg10")
                                                                                    else
                                                                                      if (BEq.beq
                                                                                           b__0
                                                                                           (0x3AB : (BitVec 12)))
                                                                                      then
                                                                                        (pure "pmpcfg11")
                                                                                      else
                                                                                        if (BEq.beq
                                                                                             b__0
                                                                                             (0x3AC : (BitVec 12)))
                                                                                        then
                                                                                          (pure "pmpcfg12")
                                                                                        else
                                                                                          if (BEq.beq
                                                                                               b__0
                                                                                               (0x3AD : (BitVec 12)))
                                                                                          then
                                                                                            (pure "pmpcfg13")
                                                                                          else
                                                                                            if (BEq.beq
                                                                                                 b__0
                                                                                                 (0x3AE : (BitVec 12)))
                                                                                            then
                                                                                              (pure "pmpcfg14")
                                                                                            else
                                                                                              if (BEq.beq
                                                                                                   b__0
                                                                                                   (0x3AF : (BitVec 12)))
                                                                                              then
                                                                                                (pure "pmpcfg15")
                                                                                              else
                                                                                                if (BEq.beq
                                                                                                     b__0
                                                                                                     (0x3B0 : (BitVec 12)))
                                                                                                then
                                                                                                  (pure "pmpaddr0")
                                                                                                else
                                                                                                  if (BEq.beq
                                                                                                       b__0
                                                                                                       (0x3B1 : (BitVec 12)))
                                                                                                  then
                                                                                                    (pure "pmpaddr1")
                                                                                                  else
                                                                                                    if (BEq.beq
                                                                                                         b__0
                                                                                                         (0x3B2 : (BitVec 12)))
                                                                                                    then
                                                                                                      (pure "pmpaddr2")
                                                                                                    else
                                                                                                      if (BEq.beq
                                                                                                           b__0
                                                                                                           (0x3B3 : (BitVec 12)))
                                                                                                      then
                                                                                                        (pure "pmpaddr3")
                                                                                                      else
                                                                                                        if (BEq.beq
                                                                                                             b__0
                                                                                                             (0x3B4 : (BitVec 12)))
                                                                                                        then
                                                                                                          (pure "pmpaddr4")
                                                                                                        else
                                                                                                          if (BEq.beq
                                                                                                               b__0
                                                                                                               (0x3B5 : (BitVec 12)))
                                                                                                          then
                                                                                                            (pure "pmpaddr5")
                                                                                                          else
                                                                                                            if (BEq.beq
                                                                                                                 b__0
                                                                                                                 (0x3B6 : (BitVec 12)))
                                                                                                            then
                                                                                                              (pure "pmpaddr6")
                                                                                                            else
                                                                                                              if (BEq.beq
                                                                                                                   b__0
                                                                                                                   (0x3B7 : (BitVec 12)))
                                                                                                              then
                                                                                                                (pure "pmpaddr7")
                                                                                                              else
                                                                                                                if (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0x3B8 : (BitVec 12)))
                                                                                                                then
                                                                                                                  (pure "pmpaddr8")
                                                                                                                else
                                                                                                                  if (BEq.beq
                                                                                                                       b__0
                                                                                                                       (0x3B9 : (BitVec 12)))
                                                                                                                  then
                                                                                                                    (pure "pmpaddr9")
                                                                                                                  else
                                                                                                                    if (BEq.beq
                                                                                                                         b__0
                                                                                                                         (0x3BA : (BitVec 12)))
                                                                                                                    then
                                                                                                                      (pure "pmpaddr10")
                                                                                                                    else
                                                                                                                      if (BEq.beq
                                                                                                                           b__0
                                                                                                                           (0x3BB : (BitVec 12)))
                                                                                                                      then
                                                                                                                        (pure "pmpaddr11")
                                                                                                                      else
                                                                                                                        if (BEq.beq
                                                                                                                             b__0
                                                                                                                             (0x3BC : (BitVec 12)))
                                                                                                                        then
                                                                                                                          (pure "pmpaddr12")
                                                                                                                        else
                                                                                                                          if (BEq.beq
                                                                                                                               b__0
                                                                                                                               (0x3BD : (BitVec 12)))
                                                                                                                          then
                                                                                                                            (pure "pmpaddr13")
                                                                                                                          else
                                                                                                                            if (BEq.beq
                                                                                                                                 b__0
                                                                                                                                 (0x3BE : (BitVec 12)))
                                                                                                                            then
                                                                                                                              (pure "pmpaddr14")
                                                                                                                            else
                                                                                                                              if (BEq.beq
                                                                                                                                   b__0
                                                                                                                                   (0x3BF : (BitVec 12)))
                                                                                                                              then
                                                                                                                                (pure "pmpaddr15")
                                                                                                                              else
                                                                                                                                if (BEq.beq
                                                                                                                                     b__0
                                                                                                                                     (0x3C0 : (BitVec 12)))
                                                                                                                                then
                                                                                                                                  (pure "pmpaddr16")
                                                                                                                                else
                                                                                                                                  if (BEq.beq
                                                                                                                                       b__0
                                                                                                                                       (0x3C1 : (BitVec 12)))
                                                                                                                                  then
                                                                                                                                    (pure "pmpaddr17")
                                                                                                                                  else
                                                                                                                                    if (BEq.beq
                                                                                                                                         b__0
                                                                                                                                         (0x3C2 : (BitVec 12)))
                                                                                                                                    then
                                                                                                                                      (pure "pmpaddr18")
                                                                                                                                    else
                                                                                                                                      if (BEq.beq
                                                                                                                                           b__0
                                                                                                                                           (0x3C3 : (BitVec 12)))
                                                                                                                                      then
                                                                                                                                        (pure "pmpaddr19")
                                                                                                                                      else
                                                                                                                                        if (BEq.beq
                                                                                                                                             b__0
                                                                                                                                             (0x3C4 : (BitVec 12)))
                                                                                                                                        then
                                                                                                                                          (pure "pmpaddr20")
                                                                                                                                        else
                                                                                                                                          if (BEq.beq
                                                                                                                                               b__0
                                                                                                                                               (0x3C5 : (BitVec 12)))
                                                                                                                                          then
                                                                                                                                            (pure "pmpaddr21")
                                                                                                                                          else
                                                                                                                                            if (BEq.beq
                                                                                                                                                 b__0
                                                                                                                                                 (0x3C6 : (BitVec 12)))
                                                                                                                                            then
                                                                                                                                              (pure "pmpaddr22")
                                                                                                                                            else
                                                                                                                                              if (BEq.beq
                                                                                                                                                   b__0
                                                                                                                                                   (0x3C7 : (BitVec 12)))
                                                                                                                                              then
                                                                                                                                                (pure "pmpaddr23")
                                                                                                                                              else
                                                                                                                                                if (BEq.beq
                                                                                                                                                     b__0
                                                                                                                                                     (0x3C8 : (BitVec 12)))
                                                                                                                                                then
                                                                                                                                                  (pure "pmpaddr24")
                                                                                                                                                else
                                                                                                                                                  if (BEq.beq
                                                                                                                                                       b__0
                                                                                                                                                       (0x3C9 : (BitVec 12)))
                                                                                                                                                  then
                                                                                                                                                    (pure "pmpaddr25")
                                                                                                                                                  else
                                                                                                                                                    if (BEq.beq
                                                                                                                                                         b__0
                                                                                                                                                         (0x3CA : (BitVec 12)))
                                                                                                                                                    then
                                                                                                                                                      (pure "pmpaddr26")
                                                                                                                                                    else
                                                                                                                                                      if (BEq.beq
                                                                                                                                                           b__0
                                                                                                                                                           (0x3CB : (BitVec 12)))
                                                                                                                                                      then
                                                                                                                                                        (pure "pmpaddr27")
                                                                                                                                                      else
                                                                                                                                                        if (BEq.beq
                                                                                                                                                             b__0
                                                                                                                                                             (0x3CC : (BitVec 12)))
                                                                                                                                                        then
                                                                                                                                                          (pure "pmpaddr28")
                                                                                                                                                        else
                                                                                                                                                          if (BEq.beq
                                                                                                                                                               b__0
                                                                                                                                                               (0x3CD : (BitVec 12)))
                                                                                                                                                          then
                                                                                                                                                            (pure "pmpaddr29")
                                                                                                                                                          else
                                                                                                                                                            if (BEq.beq
                                                                                                                                                                 b__0
                                                                                                                                                                 (0x3CE : (BitVec 12)))
                                                                                                                                                            then
                                                                                                                                                              (pure "pmpaddr30")
                                                                                                                                                            else
                                                                                                                                                              if (BEq.beq
                                                                                                                                                                   b__0
                                                                                                                                                                   (0x3CF : (BitVec 12)))
                                                                                                                                                              then
                                                                                                                                                                (pure "pmpaddr31")
                                                                                                                                                              else
                                                                                                                                                                if (BEq.beq
                                                                                                                                                                     b__0
                                                                                                                                                                     (0x3D0 : (BitVec 12)))
                                                                                                                                                                then
                                                                                                                                                                  (pure "pmpaddr32")
                                                                                                                                                                else
                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                       b__0
                                                                                                                                                                       (0x3D1 : (BitVec 12)))
                                                                                                                                                                  then
                                                                                                                                                                    (pure "pmpaddr33")
                                                                                                                                                                  else
                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                         b__0
                                                                                                                                                                         (0x3D2 : (BitVec 12)))
                                                                                                                                                                    then
                                                                                                                                                                      (pure "pmpaddr34")
                                                                                                                                                                    else
                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                           b__0
                                                                                                                                                                           (0x3D3 : (BitVec 12)))
                                                                                                                                                                      then
                                                                                                                                                                        (pure "pmpaddr35")
                                                                                                                                                                      else
                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                             b__0
                                                                                                                                                                             (0x3D4 : (BitVec 12)))
                                                                                                                                                                        then
                                                                                                                                                                          (pure "pmpaddr36")
                                                                                                                                                                        else
                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                               b__0
                                                                                                                                                                               (0x3D5 : (BitVec 12)))
                                                                                                                                                                          then
                                                                                                                                                                            (pure "pmpaddr37")
                                                                                                                                                                          else
                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                 b__0
                                                                                                                                                                                 (0x3D6 : (BitVec 12)))
                                                                                                                                                                            then
                                                                                                                                                                              (pure "pmpaddr38")
                                                                                                                                                                            else
                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                   b__0
                                                                                                                                                                                   (0x3D7 : (BitVec 12)))
                                                                                                                                                                              then
                                                                                                                                                                                (pure "pmpaddr39")
                                                                                                                                                                              else
                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                     b__0
                                                                                                                                                                                     (0x3D8 : (BitVec 12)))
                                                                                                                                                                                then
                                                                                                                                                                                  (pure "pmpaddr40")
                                                                                                                                                                                else
                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                       b__0
                                                                                                                                                                                       (0x3D9 : (BitVec 12)))
                                                                                                                                                                                  then
                                                                                                                                                                                    (pure "pmpaddr41")
                                                                                                                                                                                  else
                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                         b__0
                                                                                                                                                                                         (0x3DA : (BitVec 12)))
                                                                                                                                                                                    then
                                                                                                                                                                                      (pure "pmpaddr42")
                                                                                                                                                                                    else
                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                           b__0
                                                                                                                                                                                           (0x3DB : (BitVec 12)))
                                                                                                                                                                                      then
                                                                                                                                                                                        (pure "pmpaddr43")
                                                                                                                                                                                      else
                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                             b__0
                                                                                                                                                                                             (0x3DC : (BitVec 12)))
                                                                                                                                                                                        then
                                                                                                                                                                                          (pure "pmpaddr44")
                                                                                                                                                                                        else
                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                               b__0
                                                                                                                                                                                               (0x3DD : (BitVec 12)))
                                                                                                                                                                                          then
                                                                                                                                                                                            (pure "pmpaddr45")
                                                                                                                                                                                          else
                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                 b__0
                                                                                                                                                                                                 (0x3DE : (BitVec 12)))
                                                                                                                                                                                            then
                                                                                                                                                                                              (pure "pmpaddr46")
                                                                                                                                                                                            else
                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                   b__0
                                                                                                                                                                                                   (0x3DF : (BitVec 12)))
                                                                                                                                                                                              then
                                                                                                                                                                                                (pure "pmpaddr47")
                                                                                                                                                                                              else
                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                     b__0
                                                                                                                                                                                                     (0x3E0 : (BitVec 12)))
                                                                                                                                                                                                then
                                                                                                                                                                                                  (pure "pmpaddr48")
                                                                                                                                                                                                else
                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                       b__0
                                                                                                                                                                                                       (0x3E1 : (BitVec 12)))
                                                                                                                                                                                                  then
                                                                                                                                                                                                    (pure "pmpaddr49")
                                                                                                                                                                                                  else
                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                         b__0
                                                                                                                                                                                                         (0x3E2 : (BitVec 12)))
                                                                                                                                                                                                    then
                                                                                                                                                                                                      (pure "pmpaddr50")
                                                                                                                                                                                                    else
                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                           b__0
                                                                                                                                                                                                           (0x3E3 : (BitVec 12)))
                                                                                                                                                                                                      then
                                                                                                                                                                                                        (pure "pmpaddr51")
                                                                                                                                                                                                      else
                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                             b__0
                                                                                                                                                                                                             (0x3E4 : (BitVec 12)))
                                                                                                                                                                                                        then
                                                                                                                                                                                                          (pure "pmpaddr52")
                                                                                                                                                                                                        else
                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                               b__0
                                                                                                                                                                                                               (0x3E5 : (BitVec 12)))
                                                                                                                                                                                                          then
                                                                                                                                                                                                            (pure "pmpaddr53")
                                                                                                                                                                                                          else
                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                 (0x3E6 : (BitVec 12)))
                                                                                                                                                                                                            then
                                                                                                                                                                                                              (pure "pmpaddr54")
                                                                                                                                                                                                            else
                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                   (0x3E7 : (BitVec 12)))
                                                                                                                                                                                                              then
                                                                                                                                                                                                                (pure "pmpaddr55")
                                                                                                                                                                                                              else
                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                     (0x3E8 : (BitVec 12)))
                                                                                                                                                                                                                then
                                                                                                                                                                                                                  (pure "pmpaddr56")
                                                                                                                                                                                                                else
                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                       (0x3E9 : (BitVec 12)))
                                                                                                                                                                                                                  then
                                                                                                                                                                                                                    (pure "pmpaddr57")
                                                                                                                                                                                                                  else
                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                         (0x3EA : (BitVec 12)))
                                                                                                                                                                                                                    then
                                                                                                                                                                                                                      (pure "pmpaddr58")
                                                                                                                                                                                                                    else
                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                           (0x3EB : (BitVec 12)))
                                                                                                                                                                                                                      then
                                                                                                                                                                                                                        (pure "pmpaddr59")
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                             (0x3EC : (BitVec 12)))
                                                                                                                                                                                                                        then
                                                                                                                                                                                                                          (pure "pmpaddr60")
                                                                                                                                                                                                                        else
                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                               (0x3ED : (BitVec 12)))
                                                                                                                                                                                                                          then
                                                                                                                                                                                                                            (pure "pmpaddr61")
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                 (0x3EE : (BitVec 12)))
                                                                                                                                                                                                                            then
                                                                                                                                                                                                                              (pure "pmpaddr62")
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                   (0x3EF : (BitVec 12)))
                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                (pure "pmpaddr63")
                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                     (0x008 : (BitVec 12)))
                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                  (pure "vstart")
                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                       (0x009 : (BitVec 12)))
                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                    (pure "vxsat")
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                         (0x00A : (BitVec 12)))
                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                      (pure "vxrm")
                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                           (0x00F : (BitVec 12)))
                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                        (pure "vcsr")
                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                             (0xC20 : (BitVec 12)))
                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                          (pure "vl")
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                               (0xC21 : (BitVec 12)))
                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                            (pure "vtype")
                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                 (0xC22 : (BitVec 12)))
                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                              (pure "vlenb")
                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                   (0x105 : (BitVec 12)))
                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                (pure "stvec")
                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                     (0x141 : (BitVec 12)))
                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                  (pure "sepc")
                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                       (0x305 : (BitVec 12)))
                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                    (pure "mtvec")
                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                         (0x341 : (BitVec 12)))
                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                      (pure "mepc")
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                           (0xC03 : (BitVec 12)))
                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                        (pure "hpmcounter3")
                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                             (0xC04 : (BitVec 12)))
                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                          (pure "hpmcounter4")
                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                               (0xC05 : (BitVec 12)))
                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                            (pure "hpmcounter5")
                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                 (0xC06 : (BitVec 12)))
                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                              (pure "hpmcounter6")
                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                   (0xC07 : (BitVec 12)))
                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                (pure "hpmcounter7")
                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                     (0xC08 : (BitVec 12)))
                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                  (pure "hpmcounter8")
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                       (0xC09 : (BitVec 12)))
                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                    (pure "hpmcounter9")
                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                         (0xC0A : (BitVec 12)))
                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                      (pure "hpmcounter10")
                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                           (0xC0B : (BitVec 12)))
                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                        (pure "hpmcounter11")
                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                             (0xC0C : (BitVec 12)))
                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                          (pure "hpmcounter12")
                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                               (0xC0D : (BitVec 12)))
                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                            (pure "hpmcounter13")
                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                 (0xC0E : (BitVec 12)))
                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                              (pure "hpmcounter14")
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                   (0xC0F : (BitVec 12)))
                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                (pure "hpmcounter15")
                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                     (0xC10 : (BitVec 12)))
                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                  (pure "hpmcounter16")
                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                       (0xC11 : (BitVec 12)))
                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                    (pure "hpmcounter17")
                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                         (0xC12 : (BitVec 12)))
                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                      (pure "hpmcounter18")
                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                           (0xC13 : (BitVec 12)))
                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                        (pure "hpmcounter19")
                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                             (0xC14 : (BitVec 12)))
                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                          (pure "hpmcounter20")
                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                               (0xC15 : (BitVec 12)))
                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                            (pure "hpmcounter21")
                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                 (0xC16 : (BitVec 12)))
                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                              (pure "hpmcounter22")
                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                   (0xC17 : (BitVec 12)))
                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                (pure "hpmcounter23")
                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                     (0xC18 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                  (pure "hpmcounter24")
                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                       (0xC19 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                    (pure "hpmcounter25")
                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                         (0xC1A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                      (pure "hpmcounter26")
                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                           (0xC1B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                        (pure "hpmcounter27")
                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                             (0xC1C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                          (pure "hpmcounter28")
                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                               (0xC1D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                            (pure "hpmcounter29")
                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                 (0xC1E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                              (pure "hpmcounter30")
                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                   (0xC1F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                (pure "hpmcounter31")
                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                     (0xC83 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                  (pure "hpmcounter3h")
                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                       (0xC84 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                    (pure "hpmcounter4h")
                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                         (0xC85 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                      (pure "hpmcounter5h")
                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                           (0xC86 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                        (pure "hpmcounter6h")
                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                             (0xC87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                          (pure "hpmcounter7h")
                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                               (0xC88 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                            (pure "hpmcounter8h")
                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                 (0xC89 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                              (pure "hpmcounter9h")
                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                   (0xC8A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                (pure "hpmcounter10h")
                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                     (0xC8B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                  (pure "hpmcounter11h")
                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                       (0xC8C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                    (pure "hpmcounter12h")
                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                         (0xC8D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                      (pure "hpmcounter13h")
                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                           (0xC8E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                        (pure "hpmcounter14h")
                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                             (0xC8F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                          (pure "hpmcounter15h")
                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                               (0xC90 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                            (pure "hpmcounter16h")
                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                 (0xC91 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                              (pure "hpmcounter17h")
                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                   (0xC92 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                (pure "hpmcounter18h")
                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                     (0xC93 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                  (pure "hpmcounter19h")
                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                       (0xC94 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                    (pure "hpmcounter20h")
                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                         (0xC95 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                      (pure "hpmcounter21h")
                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                           (0xC96 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                        (pure "hpmcounter22h")
                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                             (0xC97 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                          (pure "hpmcounter23h")
                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                               (0xC98 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                            (pure "hpmcounter24h")
                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                 (0xC99 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                              (pure "hpmcounter25h")
                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                   (0xC9A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                (pure "hpmcounter26h")
                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                     (0xC9B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                  (pure "hpmcounter27h")
                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                       (0xC9C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                    (pure "hpmcounter28h")
                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                         (0xC9D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                      (pure "hpmcounter29h")
                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                           (0xC9E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                        (pure "hpmcounter30h")
                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                             (0xC9F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                          (pure "hpmcounter31h")
                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                               (0x323 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmevent3")
                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                 (0x324 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmevent4")
                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                   (0x325 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmevent5")
                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                     (0x326 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmevent6")
                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                       (0x327 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmevent7")
                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                         (0x328 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmevent8")
                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                           (0x329 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmevent9")
                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                             (0x32A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmevent10")
                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                               (0x32B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmevent11")
                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                 (0x32C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmevent12")
                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                   (0x32D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmevent13")
                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                     (0x32E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmevent14")
                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                       (0x32F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmevent15")
                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                         (0x330 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmevent16")
                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                           (0x331 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmevent17")
                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                             (0x332 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmevent18")
                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                               (0x333 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmevent19")
                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                 (0x334 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmevent20")
                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                   (0x335 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmevent21")
                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                     (0x336 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmevent22")
                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                       (0x337 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmevent23")
                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                         (0x338 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmevent24")
                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                           (0x339 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmevent25")
                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                             (0x33A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmevent26")
                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                               (0x33B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmevent27")
                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                 (0x33C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmevent28")
                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                   (0x33D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmevent29")
                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                     (0x33E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmevent30")
                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                       (0x33F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmevent31")
                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB03 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmcounter3")
                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB04 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter4")
                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB05 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter5")
                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB06 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter6")
                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB07 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter7")
                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB08 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmcounter8")
                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB09 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmcounter9")
                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB0A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmcounter10")
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB0B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmcounter11")
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB0C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter12")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB0D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter13")
                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB0E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter14")
                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB0F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter15")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB10 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmcounter16")
                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB11 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmcounter17")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB12 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmcounter18")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB13 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmcounter19")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB14 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter20")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB15 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter21")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB16 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter22")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB17 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter23")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB18 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmcounter24")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB19 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmcounter25")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB1A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmcounter26")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB1B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmcounter27")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB1C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter28")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB1D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter29")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB1E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter30")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB1F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter31")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB83 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmcounter3h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB84 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmcounter4h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB85 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mhpmcounter5h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB86 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (pure "mhpmcounter6h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter7h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB88 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter8h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB89 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter9h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB8A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter10h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
xB8B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (pure "mhpmcounter11h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
b__0
xB8C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (pure "mhpmcounter12h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB8D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
pure "mhpmcounter13h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
if (BEq.beq
b__0
xB8E : (BitVec 12)))
then
pure "mhpmcounter14h")
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
xB8F : (BitVec 12)))
then
pure "mhpmcounter15h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
if (BEq.beq
b__0
xB90 : (BitVec 12)))
then
pure "mhpmcounter16h")
else
if (BEq.beq
b__0
xB91 : (BitVec 12)))
then
pure "mhpmcounter17h")
else
if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB92 : (BitVec 12)))
then
pure "mhpmcounter18h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB93 : (BitVec 12)))
then
pure "mhpmcounter19h")
else
if (BEq.beq
b__0
xB94 : (BitVec 12)))
then
pure "mhpmcounter20h")
else
if (BEq.beq
b__0
xB95 : (BitVec 12)))
then
pure "mhpmcounter21h")
else
if (BEq.beq
b__0
xB96 : (BitVec 12)))
then
pure "mhpmcounter22h")
else
if (BEq.beq
b__0
xB97 : (BitVec 12)))
then
pure "mhpmcounter23h")
else
if (BEq.beq
b__0
xB98 : (BitVec 12)))
then
pure "mhpmcounter24h")
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
xB99 : (BitVec 12)))
then
pure "mhpmcounter25h")
else
if (BEq.beq
b__0
xB9A : (BitVec 12)))
then
pure "mhpmcounter26h")
else
if (BEq.beq
b__0
xB9B : (BitVec 12)))
then
pure "mhpmcounter27h")
else
if (BEq.beq
b__0
xB9C : (BitVec 12)))
then
pure "mhpmcounter28h")
else
if (BEq.beq
b__0
xB9D : (BitVec 12)))
then
pure "mhpmcounter29h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
b__0
xB9E : (BitVec 12)))
then
pure "mhpmcounter30h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
b__0
xB9F : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (pure "mhpmcounter31h")
else
if (BEq.beq
b__0
xB83 : (BitVec 12)))
then
pure "mhpmcounter3h")
else
if (BEq.beq
b__0
xB84 : (BitVec 12)))
then
pure "mhpmcounter4h")
else
if (BEq.beq
b__0
xB85 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mhpmcounter5h")
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
xB86 : (BitVec 12)))
then
pure "mhpmcounter6h")
else
if (BEq.beq
b__0
xB87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
pure "mhpmcounter7h")
else
if (BEq.beq
b__0
xB88 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
pure "mhpmcounter8h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
if (BEq.beq
b__0
xB89 : (BitVec 12)))
then
pure "mhpmcounter9h")
else
if (BEq.beq
b__0
xB8A : (BitVec 12)))
then
pure "mhpmcounter10h")
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
xB8B : (BitVec 12)))
then
pure "mhpmcounter11h")
else
if (BEq.beq
b__0
xB8C : (BitVec 12)))
then
pure "mhpmcounter12h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
b__0
xB8D : (BitVec 12)))
then
pure "mhpmcounter13h")
else
if (BEq.beq
b__0
xB8E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
pure "mhpmcounter14h")
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
xB8F : (BitVec 12)))
then
pure "mhpmcounter15h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
xB90 : (BitVec 12)))
then
pure "mhpmcounter16h")
else
if (BEq.beq
b__0
xB91 : (BitVec 12)))
then
pure "mhpmcounter17h")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
b__0
xB92 : (BitVec 12)))
then
pure "mhpmcounter18h")
else
if (BEq.beq
b__0
xB93 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (pure "mhpmcounter19h")
else
if (BEq.beq
b__0
xB94 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (pure "mhpmcounter20h")
else
if (BEq.beq
b__0
xB95 : (BitVec 12)))
then
pure "mhpmcounter21h")
else
if (BEq.beq
b__0
xB96 : (BitVec 12)))
then
pure "mhpmcounter22h")
else
if (BEq.beq
b__0
xB97 : (BitVec 12)))
then
pure "mhpmcounter23h")
else
if (BEq.beq
b__0
xB98 : (BitVec 12)))
then
pure "mhpmcounter24h")
else
if (BEq.beq
b__0
xB99 : (BitVec 12)))
then
pure "mhpmcounter25h")
else
if (BEq.beq
b__0
xB9A : (BitVec 12)))
then
pure "mhpmcounter26h")
else
if (BEq.beq
b__0
xB9B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
pure "mhpmcounter27h")
else
if (BEq.beq
b__0
xB9C : (BitVec 12)))
then
pure "mhpmcounter28h")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
b__0
xB9D : (BitVec 12)))
then
pure "mhpmcounter29h")
else
if (BEq.beq
b__0
xB9E : (BitVec 12)))
then
pure "mhpmcounter30h")
else
if (BEq.beq
b__0
xB9F : (BitVec 12)))
then
pure "mhpmcounter31h")
else
if (BEq.beq
b__0
xDA0 : (BitVec 12)))
then
pure "scountovf")
else
if (BEq.beq
b__0
x015 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
pure "seed")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
xC00 : (BitVec 12)))
then
pure "cycle")
else
if (BEq.beq
b__0
xC01 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
pure "time")
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
b__0
xC02 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
pure "instret")
else
if (BEq.beq
b__0
xC80 : (BitVec 12)))
then
pure "cycleh")
else
if (BEq.beq
b__0
xC81 : (BitVec 12)))
then
pure "timeh")
else
if (BEq.beq
b__0
xC82 : (BitVec 12)))
then
pure "instreth")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
b__0
xB00 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (pure "mcycle")
else
if (BEq.beq
b__0
xB02 : (BitVec 12)))
then
pure "minstret")
else
if (BEq.beq
b__0
xB80 : (BitVec 12)))
then
pure "mcycleh")
else
if (BEq.beq
b__0
xB82 : (BitVec 12)))
then
pure "minstreth")
else
if (BEq.beq
b__0
x321 : (BitVec 12)))
then
pure "mcyclecfg")
else
if (BEq.beq
b__0
x721 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (pure "mcyclecfgh")
else
if (BEq.beq
b__0
x322 : (BitVec 12)))
then
pure "minstretcfg")
else
if (BEq.beq
b__0
x722 : (BitVec 12)))
then
pure "minstretcfgh")
else
if (BEq.beq
b__0
x180 : (BitVec 12)))
then
pure "satp")
else
hex_bits_12_forwards
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      b__0)

def csr_name (csr : (BitVec 12)) : SailM String := do
  (csr_name_map_forwards csr)

def exceptionType_to_str (e : ExceptionType) : String :=
  match e with
  | .E_Fetch_Addr_Align () => "misaligned-fetch"
  | .E_Fetch_Access_Fault () => "fetch-access-fault"
  | .E_Illegal_Instr () => "illegal-instruction"
  | .E_Breakpoint () => "breakpoint"
  | .E_Load_Addr_Align () => "misaligned-load"
  | .E_Load_Access_Fault () => "load-access-fault"
  | .E_SAMO_Addr_Align () => "misaligned-store/amo"
  | .E_SAMO_Access_Fault () => "store/amo-access-fault"
  | .E_U_EnvCall () => "u-call"
  | .E_S_EnvCall () => "s-call"
  | .E_Reserved_10 () => "reserved-0"
  | .E_M_EnvCall () => "m-call"
  | .E_Fetch_Page_Fault () => "fetch-page-fault"
  | .E_Load_Page_Fault () => "load-page-fault"
  | .E_Reserved_14 () => "reserved-1"
  | .E_SAMO_Page_Fault () => "store/amo-page-fault"
  | .E_Extension e => (ext_exc_type_to_str e)

def amo_mnemonic_forwards (arg_ : amoop) : String :=
  match arg_ with
  | AMOSWAP => "amoswap"
  | AMOADD => "amoadd"
  | AMOXOR => "amoxor"
  | AMOAND => "amoand"
  | AMOOR => "amoor"
  | AMOMIN => "amomin"
  | AMOMAX => "amomax"
  | AMOMINU => "amominu"
  | AMOMAXU => "amomaxu"

def btype_mnemonic_forwards (arg_ : bop) : String :=
  match arg_ with
  | RISCV_BEQ => "beq"
  | RISCV_BNE => "bne"
  | RISCV_BLT => "blt"
  | RISCV_BGE => "bge"
  | RISCV_BLTU => "bltu"
  | RISCV_BGEU => "bgeu"

def creg_name_raw_forwards (arg_ : (BitVec 3)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then "s0"
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then "s1"
    else
      if (BEq.beq b__0 (0b010 : (BitVec 3)))
      then "a0"
      else
        if (BEq.beq b__0 (0b011 : (BitVec 3)))
        then "a1"
        else
          if (BEq.beq b__0 (0b100 : (BitVec 3)))
          then "a2"
          else
            if (BEq.beq b__0 (0b101 : (BitVec 3)))
            then "a3"
            else
              if (BEq.beq b__0 (0b110 : (BitVec 3)))
              then "a4"
              else "a5"

def creg_name_forwards (arg_ : cregidx) : String :=
  match arg_ with
  | .Cregidx i => (creg_name_raw_forwards i)

def csr_mnemonic_forwards (arg_ : csrop) : String :=
  match arg_ with
  | CSRRW => "csrrw"
  | CSRRS => "csrrs"
  | CSRRC => "csrrc"

def bit_maybe_i_forwards (arg_ : (BitVec 1)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then "i"
  else ""

def bit_maybe_o_forwards (arg_ : (BitVec 1)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then "o"
  else ""

def bit_maybe_r_forwards (arg_ : (BitVec 1)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then "r"
  else ""

def bit_maybe_w_forwards (arg_ : (BitVec 1)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then "w"
  else ""

def fence_bits_forwards (arg_ : (BitVec 4)) : String :=
  match arg_ with
  | v__0 =>
    let i : (BitVec 1) := (Sail.BitVec.extractLsb v__0 3 3)
    let w : (BitVec 1) := (Sail.BitVec.extractLsb v__0 0 0)
    let r : (BitVec 1) := (Sail.BitVec.extractLsb v__0 1 1)
    let o : (BitVec 1) := (Sail.BitVec.extractLsb v__0 2 2)
    let i : (BitVec 1) := (Sail.BitVec.extractLsb v__0 3 3)
    (String.append (bit_maybe_i_forwards i)
      (String.append (bit_maybe_o_forwards o)
        (String.append (bit_maybe_r_forwards r) (String.append (bit_maybe_w_forwards w) ""))))

def itype_mnemonic_forwards (arg_ : iop) : String :=
  match arg_ with
  | RISCV_ADDI => "addi"
  | RISCV_SLTI => "slti"
  | RISCV_SLTIU => "sltiu"
  | RISCV_XORI => "xori"
  | RISCV_ORI => "ori"
  | RISCV_ANDI => "andi"

/-- Type quantifiers: k_ex100322# : Bool -/
def maybe_aq_forwards (arg_ : Bool) : String :=
  match arg_ with
  | true => ".aq"
  | false => ""

/-- Type quantifiers: k_ex100323# : Bool -/
def maybe_not_u_forwards (arg_ : Bool) : String :=
  match arg_ with
  | false => "u"
  | true => ""

/-- Type quantifiers: k_ex100324# : Bool -/
def maybe_rl_forwards (arg_ : Bool) : String :=
  match arg_ with
  | true => ".rl"
  | false => ""

/-- Type quantifiers: k_ex100325# : Bool -/
def maybe_u_forwards (arg_ : Bool) : String :=
  match arg_ with
  | true => "u"
  | false => ""

def mul_mnemonic_forwards (arg_ : mul_op) : SailM String := do
  match arg_ with
  | { high := false, signed_rs1 := true, signed_rs2 := true } => (pure "mul")
  | { high := true, signed_rs1 := true, signed_rs2 := true } => (pure "mulh")
  | { high := true, signed_rs1 := true, signed_rs2 := false } => (pure "mulhsu")
  | { high := true, signed_rs1 := false, signed_rs2 := false } => (pure "mulhu")
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def reg_name_raw_forwards (arg_ : (BitVec 5)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00000 : (BitVec 5)))
  then "zero"
  else
    if (BEq.beq b__0 (0b00001 : (BitVec 5)))
    then "ra"
    else
      if (BEq.beq b__0 (0b00010 : (BitVec 5)))
      then "sp"
      else
        if (BEq.beq b__0 (0b00011 : (BitVec 5)))
        then "gp"
        else
          if (BEq.beq b__0 (0b00100 : (BitVec 5)))
          then "tp"
          else
            if (BEq.beq b__0 (0b00101 : (BitVec 5)))
            then "t0"
            else
              if (BEq.beq b__0 (0b00110 : (BitVec 5)))
              then "t1"
              else
                if (BEq.beq b__0 (0b00111 : (BitVec 5)))
                then "t2"
                else
                  if (BEq.beq b__0 (0b01000 : (BitVec 5)))
                  then "fp"
                  else
                    if (BEq.beq b__0 (0b01001 : (BitVec 5)))
                    then "s1"
                    else
                      if (BEq.beq b__0 (0b01010 : (BitVec 5)))
                      then "a0"
                      else
                        if (BEq.beq b__0 (0b01011 : (BitVec 5)))
                        then "a1"
                        else
                          if (BEq.beq b__0 (0b01100 : (BitVec 5)))
                          then "a2"
                          else
                            if (BEq.beq b__0 (0b01101 : (BitVec 5)))
                            then "a3"
                            else
                              if (BEq.beq b__0 (0b01110 : (BitVec 5)))
                              then "a4"
                              else
                                if (BEq.beq b__0 (0b01111 : (BitVec 5)))
                                then "a5"
                                else
                                  if (BEq.beq b__0 (0b10000 : (BitVec 5)))
                                  then "a6"
                                  else
                                    if (BEq.beq b__0 (0b10001 : (BitVec 5)))
                                    then "a7"
                                    else
                                      if (BEq.beq b__0 (0b10010 : (BitVec 5)))
                                      then "s2"
                                      else
                                        if (BEq.beq b__0 (0b10011 : (BitVec 5)))
                                        then "s3"
                                        else
                                          if (BEq.beq b__0 (0b10100 : (BitVec 5)))
                                          then "s4"
                                          else
                                            if (BEq.beq b__0 (0b10101 : (BitVec 5)))
                                            then "s5"
                                            else
                                              if (BEq.beq b__0 (0b10110 : (BitVec 5)))
                                              then "s6"
                                              else
                                                if (BEq.beq b__0 (0b10111 : (BitVec 5)))
                                                then "s7"
                                                else
                                                  if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                                                  then "s8"
                                                  else
                                                    if (BEq.beq b__0 (0b11001 : (BitVec 5)))
                                                    then "s9"
                                                    else
                                                      if (BEq.beq b__0 (0b11010 : (BitVec 5)))
                                                      then "s10"
                                                      else
                                                        if (BEq.beq b__0 (0b11011 : (BitVec 5)))
                                                        then "s11"
                                                        else
                                                          if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                                                          then "t3"
                                                          else
                                                            if (BEq.beq b__0 (0b11101 : (BitVec 5)))
                                                            then "t4"
                                                            else
                                                              if (BEq.beq b__0
                                                                   (0b11110 : (BitVec 5)))
                                                              then "t5"
                                                              else "t6"

def reg_name_forwards (arg_ : regidx) : String :=
  match arg_ with
  | .Regidx i => (reg_name_raw_forwards i)

def rtype_mnemonic_forwards (arg_ : rop) : String :=
  match arg_ with
  | RISCV_ADD => "add"
  | RISCV_SLT => "slt"
  | RISCV_SLTU => "sltu"
  | RISCV_AND => "and"
  | RISCV_OR => "or"
  | RISCV_XOR => "xor"
  | RISCV_SLL => "sll"
  | RISCV_SRL => "srl"
  | RISCV_SUB => "sub"
  | RISCV_SRA => "sra"

def rtypew_mnemonic_forwards (arg_ : ropw) : String :=
  match arg_ with
  | RISCV_ADDW => "addw"
  | RISCV_SUBW => "subw"
  | RISCV_SLLW => "sllw"
  | RISCV_SRLW => "srlw"
  | RISCV_SRAW => "sraw"

def shiftiop_mnemonic_forwards (arg_ : sop) : String :=
  match arg_ with
  | RISCV_SLLI => "slli"
  | RISCV_SRLI => "srli"
  | RISCV_SRAI => "srai"

def shiftiwop_mnemonic_forwards (arg_ : sopw) : String :=
  match arg_ with
  | RISCV_SLLIW => "slliw"
  | RISCV_SRLIW => "srliw"
  | RISCV_SRAIW => "sraiw"

def size_mnemonic_forwards (arg_ : word_width) : String :=
  match arg_ with
  | BYTE => "b"
  | HALF => "h"
  | WORD => "w"
  | DOUBLE => "d"

def utype_mnemonic_forwards (arg_ : uop) : String :=
  match arg_ with
  | RISCV_LUI => "lui"
  | RISCV_AUIPC => "auipc"

def assembly_forwards (arg_ : ast) : SailM String := do
  match arg_ with
  | .UTYPE (imm, rd, op) =>
    (pure (String.append (utype_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_20_forwards imm)) ""))))))
  | .RISCV_JAL (imm, rd) =>
    (pure (String.append "jal"
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_21_forwards imm)) ""))))))
  | .RISCV_JALR (imm, rs1, rd) =>
    (pure (String.append "jalr"
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_12_forwards imm))
                (String.append "(" (String.append (reg_name_forwards rs1) (String.append ")" "")))))))))
  | .BTYPE (imm, rs2, rs1, op) =>
    (pure (String.append (btype_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rs1)
            (String.append (sep_forwards ())
              (String.append (reg_name_forwards rs2)
                (String.append (sep_forwards ())
                  (String.append (← (hex_bits_signed_13_forwards imm)) ""))))))))
  | .ITYPE (imm, rs1, rd, op) =>
    (pure (String.append (itype_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (reg_name_forwards rs1)
                (String.append (sep_forwards ())
                  (String.append (← (hex_bits_signed_12_forwards imm)) ""))))))))
  | .SHIFTIOP (shamt, rs1, rd, op) =>
    (pure (String.append (shiftiop_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (reg_name_forwards rs1)
                (String.append (sep_forwards ())
                  (String.append (← (hex_bits_6_forwards shamt)) ""))))))))
  | .RTYPE (rs2, rs1, rd, op) =>
    (pure (String.append (rtype_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (reg_name_forwards rs1)
                (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))
  | .LOAD (imm, rs1, rd, is_unsigned, size, aq, rl) =>
    (pure (String.append "l"
        (String.append (size_mnemonic_forwards size)
          (String.append (maybe_u_forwards is_unsigned)
            (String.append (maybe_aq_forwards aq)
              (String.append (maybe_rl_forwards rl)
                (String.append (spc_forwards ())
                  (String.append (reg_name_forwards rd)
                    (String.append (sep_forwards ())
                      (String.append (← (hex_bits_signed_12_forwards imm))
                        (String.append "("
                          (String.append (reg_name_forwards rs1) (String.append ")" "")))))))))))))
  | .STORE (imm, rs2, rs1, size, aq, rl) =>
    (pure (String.append "s"
        (String.append (size_mnemonic_forwards size)
          (String.append (maybe_aq_forwards aq)
            (String.append (maybe_rl_forwards rl)
              (String.append (spc_forwards ())
                (String.append (reg_name_forwards rs2)
                  (String.append (sep_forwards ())
                    (String.append (← (hex_bits_signed_12_forwards imm))
                      (String.append (opt_spc_forwards ())
                        (String.append "("
                          (String.append (opt_spc_forwards ())
                            (String.append (reg_name_forwards rs1)
                              (String.append (opt_spc_forwards ()) (String.append ")" "")))))))))))))))
  | .ADDIW (imm, rs1, rd) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "addiw"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ())
                    (String.append (← (hex_bits_signed_12_forwards imm)) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, op) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append (rtypew_mnemonic_forwards op)
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIWOP (shamt, rs1, rd, op) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append (shiftiwop_mnemonic_forwards op)
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ())
                    (String.append (← (hex_bits_5_forwards shamt)) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .FENCE (pred, succ) =>
    (pure (String.append "fence"
        (String.append (spc_forwards ())
          (String.append (fence_bits_forwards pred)
            (String.append (sep_forwards ()) (String.append (fence_bits_forwards succ) ""))))))
  | .FENCE_TSO (pred, succ) =>
    (pure (String.append "fence.tso"
        (String.append (spc_forwards ())
          (String.append (fence_bits_forwards pred)
            (String.append (sep_forwards ()) (String.append (fence_bits_forwards succ) ""))))))
  | .ECALL () => (pure "ecall")
  | .MRET () => (pure "mret")
  | .SRET () => (pure "sret")
  | .EBREAK () => (pure "ebreak")
  | .WFI () => (pure "wfi")
  | .SFENCE_VMA (rs1, rs2) =>
    (pure (String.append "sfence.vma"
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rs1)
            (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))
  | .FENCEI () => (pure "fence.i")
  | .LOADRES (aq, rl, rs1, size, rd) =>
    (pure (String.append "lr."
        (String.append (size_mnemonic_forwards size)
          (String.append (maybe_aq_forwards aq)
            (String.append (maybe_rl_forwards rl)
              (String.append (spc_forwards ())
                (String.append (reg_name_forwards rd)
                  (String.append (sep_forwards ())
                    (String.append "("
                      (String.append (reg_name_forwards rs1) (String.append ")" "")))))))))))
  | .STORECON (aq, rl, rs2, rs1, size, rd) =>
    (pure (String.append "sc."
        (String.append (size_mnemonic_forwards size)
          (String.append (maybe_aq_forwards aq)
            (String.append (maybe_rl_forwards rl)
              (String.append (spc_forwards ())
                (String.append (reg_name_forwards rd)
                  (String.append (sep_forwards ())
                    (String.append (reg_name_forwards rs2)
                      (String.append (sep_forwards ())
                        (String.append "("
                          (String.append (reg_name_forwards rs1) (String.append ")" "")))))))))))))
  | .AMO (op, aq, rl, rs2, rs1, width, rd) =>
    (pure (String.append (amo_mnemonic_forwards op)
        (String.append "."
          (String.append (size_mnemonic_forwards width)
            (String.append (maybe_aq_forwards aq)
              (String.append (maybe_rl_forwards rl)
                (String.append (spc_forwards ())
                  (String.append (reg_name_forwards rd)
                    (String.append (sep_forwards ())
                      (String.append (reg_name_forwards rs2)
                        (String.append (sep_forwards ())
                          (String.append "("
                            (String.append (reg_name_forwards rs1) (String.append ")" ""))))))))))))))
  | .C_NOP () => (pure "c.nop")
  | .C_ADDI4SPN (rdc, nzimm) =>
    if (bne nzimm (0x00 : (BitVec 8)))
    then
      (pure (String.append "c.addi4spn"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rdc)
              (String.append (sep_forwards ())
                (String.append
                  (← (hex_bits_10_forwards ((nzimm : (BitVec 8)) ++ (0b00 : (BitVec 2))))) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LW (uimm, rsc, rdc) =>
    (pure (String.append "c.lw"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rdc)
            (String.append (sep_forwards ())
              (String.append (creg_name_forwards rsc)
                (String.append (sep_forwards ())
                  (String.append
                    (← (hex_bits_7_forwards ((uimm : (BitVec 5)) ++ (0b00 : (BitVec 2))))) ""))))))))
  | .C_LD (uimm, rsc, rdc) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.ld"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rdc)
              (String.append (sep_forwards ())
                (String.append (creg_name_forwards rsc)
                  (String.append (sep_forwards ())
                    (String.append
                      (← (hex_bits_8_forwards ((uimm : (BitVec 5)) ++ (0b000 : (BitVec 3))))) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SW (uimm, rsc1, rsc2) =>
    (pure (String.append "c.sw"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsc1)
            (String.append (sep_forwards ())
              (String.append (creg_name_forwards rsc2)
                (String.append (sep_forwards ())
                  (String.append
                    (← (hex_bits_7_forwards ((uimm : (BitVec 5)) ++ (0b00 : (BitVec 2))))) ""))))))))
  | .C_SD (uimm, rsc1, rsc2) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.sd"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rsc1)
              (String.append (sep_forwards ())
                (String.append (creg_name_forwards rsc2)
                  (String.append (sep_forwards ())
                    (String.append
                      (← (hex_bits_8_forwards ((uimm : (BitVec 5)) ++ (0b000 : (BitVec 3))))) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI (nzi, rsd) =>
    if (Bool.and (bne nzi (0b000000 : (BitVec 6))) (bne rsd zreg))
    then
      (pure (String.append "c.addi"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rsd)
              (String.append (sep_forwards ())
                (String.append (← (hex_bits_signed_6_forwards nzi)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JAL imm =>
    if (BEq.beq xlen 32)
    then
      (pure (String.append "c.jal"
          (String.append (spc_forwards ())
            (String.append
              (← (hex_bits_signed_12_forwards ((imm : (BitVec 11)) ++ (0b0 : (BitVec 1))))) ""))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDIW (imm, rsd) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.addiw"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rsd)
              (String.append (sep_forwards ())
                (String.append (← (hex_bits_signed_6_forwards imm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LI (imm, rd) =>
    if (bne rd zreg)
    then
      (pure (String.append "c.li"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (← (hex_bits_signed_6_forwards imm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI16SP imm =>
    if (bne imm (0b000000 : (BitVec 6)))
    then
      (pure (String.append "c.addi16sp"
          (String.append (spc_forwards ()) (String.append (← (hex_bits_signed_6_forwards imm)) ""))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LUI (imm, rd) =>
    if (Bool.and (bne rd zreg) (Bool.and (bne rd sp) (bne imm (0b000000 : (BitVec 6)))))
    then
      (pure (String.append "c.lui"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (← (hex_bits_signed_6_forwards imm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRLI (shamt, rsd) =>
    if (bne shamt (0b000000 : (BitVec 6)))
    then
      (pure (String.append "c.srli"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards shamt)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRAI (shamt, rsd) =>
    if (bne shamt (0b000000 : (BitVec 6)))
    then
      (pure (String.append "c.srai"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards shamt)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ANDI (imm, rsd) =>
    (pure (String.append "c.andi"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsd)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_6_forwards imm)) ""))))))
  | .C_SUB (rsd, rs2) =>
    (pure (String.append "c.sub"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsd)
            (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
  | .C_XOR (rsd, rs2) =>
    (pure (String.append "c.xor"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsd)
            (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
  | .C_OR (rsd, rs2) =>
    (pure (String.append "c.or"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsd)
            (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
  | .C_AND (rsd, rs2) =>
    (pure (String.append "c.and"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rsd)
            (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
  | .C_SUBW (rsd, rs2) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.subw"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDW (rsd, rs2) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.addw"
          (String.append (spc_forwards ())
            (String.append (creg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (creg_name_forwards rs2) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_J imm =>
    (pure (String.append "c.j"
        (String.append (spc_forwards ())
          (String.append
            (← (hex_bits_signed_12_forwards ((imm : (BitVec 11)) ++ (0b0 : (BitVec 1))))) ""))))
  | .C_BEQZ (imm, rs) =>
    (pure (String.append "c.beqz"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rs)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_8_forwards imm)) ""))))))
  | .C_BNEZ (imm, rs) =>
    (pure (String.append "c.bnez"
        (String.append (spc_forwards ())
          (String.append (creg_name_forwards rs)
            (String.append (sep_forwards ())
              (String.append (← (hex_bits_signed_8_forwards imm)) ""))))))
  | .C_SLLI (shamt, rsd) =>
    if (Bool.and (bne shamt (0b000000 : (BitVec 6))) (bne rsd zreg))
    then
      (pure (String.append "c.slli"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards shamt)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LWSP (uimm, rd) =>
    if (bne rd zreg)
    then
      (pure (String.append "c.lwsp"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards uimm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LDSP (uimm, rd) =>
    if (Bool.and (bne rd zreg) (BEq.beq xlen 64))
    then
      (pure (String.append "c.ldsp"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards uimm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SWSP (uimm, rs2) =>
    (pure (String.append "c.swsp"
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rs2)
            (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards uimm)) ""))))))
  | .C_SDSP (uimm, rs2) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "c.sdsp"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rs2)
              (String.append (sep_forwards ()) (String.append (← (hex_bits_6_forwards uimm)) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JR rs1 =>
    if (bne rs1 zreg)
    then
      (pure (String.append "c.jr"
          (String.append (spc_forwards ()) (String.append (reg_name_forwards rs1) ""))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JALR rs1 =>
    if (bne rs1 zreg)
    then
      (pure (String.append "c.jalr"
          (String.append (spc_forwards ()) (String.append (reg_name_forwards rs1) ""))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_MV (rd, rs2) =>
    if (Bool.and (bne rd zreg) (bne rs2 zreg))
    then
      (pure (String.append "c.mv"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_EBREAK () => (pure "c.ebreak")
  | .C_ADD (rsd, rs2) =>
    if (Bool.and (bne rsd zreg) (bne rs2 zreg))
    then
      (pure (String.append "c.add"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rsd)
              (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .MUL (rs2, rs1, rd, mul_op) =>
    (pure (String.append (← (mul_mnemonic_forwards mul_op))
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (reg_name_forwards rs1)
                (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))
  | .DIV (rs2, rs1, rd, s) =>
    (pure (String.append "div"
        (String.append (maybe_not_u_forwards s)
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) "")))))))))
  | .REM (rs2, rs1, rd, s) =>
    (pure (String.append "rem"
        (String.append (maybe_not_u_forwards s)
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) "")))))))))
  | .MULW (rs2, rs1, rd) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "mulw"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (reg_name_forwards rs1)
                  (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .DIVW (rs2, rs1, rd, s) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "div"
          (String.append (maybe_not_u_forwards s)
            (String.append "w"
              (String.append (spc_forwards ())
                (String.append (reg_name_forwards rd)
                  (String.append (sep_forwards ())
                    (String.append (reg_name_forwards rs1)
                      (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .REMW (rs2, rs1, rd, s) =>
    if (BEq.beq xlen 64)
    then
      (pure (String.append "rem"
          (String.append (maybe_not_u_forwards s)
            (String.append "w"
              (String.append (spc_forwards ())
                (String.append (reg_name_forwards rd)
                  (String.append (sep_forwards ())
                    (String.append (reg_name_forwards rs1)
                      (String.append (sep_forwards ()) (String.append (reg_name_forwards rs2) ""))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .CSR (csr, .Regidx rs1_bits, rd, true, op) =>
    (pure (String.append (csr_mnemonic_forwards op)
        (String.append "i"
          (String.append (spc_forwards ())
            (String.append (reg_name_forwards rd)
              (String.append (sep_forwards ())
                (String.append (← (csr_name_map_forwards csr))
                  (String.append (sep_forwards ())
                    (String.append (← (hex_bits_5_forwards rs1_bits)) "")))))))))
  | .CSR (csr, rs1, rd, false, op) =>
    (pure (String.append (csr_mnemonic_forwards op)
        (String.append (spc_forwards ())
          (String.append (reg_name_forwards rd)
            (String.append (sep_forwards ())
              (String.append (← (csr_name_map_forwards csr))
                (String.append (sep_forwards ()) (String.append (reg_name_forwards rs1) ""))))))))
  | .C_NOP_HINT imm =>
    (pure (String.append "c.nop.hint." (String.append (← (hex_bits_6_forwards imm)) "")))
  | .C_ADDI_HINT rsd =>
    if (bne rsd zreg)
    then (pure (String.append "c.addi.hint." (String.append (reg_name_forwards rsd) "")))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LI_HINT imm =>
    (pure (String.append "c.li.hint." (String.append (← (hex_bits_6_forwards imm)) "")))
  | .C_LUI_HINT imm =>
    if (bne imm (0b000000 : (BitVec 6)))
    then (pure (String.append "c.lui.hint." (String.append (← (hex_bits_6_forwards imm)) "")))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_MV_HINT rs2 =>
    if (bne rs2 zreg)
    then (pure (String.append "c.mv.hint." (String.append (reg_name_forwards rs2) "")))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADD_HINT rs2 =>
    if (bne rs2 zreg)
    then (pure (String.append "c.add.hint." (String.append (reg_name_forwards rs2) "")))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SLLI_HINT (shamt, rsd) =>
    if (Bool.or (BEq.beq shamt (0b000000 : (BitVec 6))) (BEq.beq rsd zreg))
    then
      (pure (String.append "c.slli.hint."
          (String.append (reg_name_forwards rsd)
            (String.append "." (String.append (← (hex_bits_6_forwards shamt)) "")))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRLI_HINT rsd =>
    (pure (String.append "c.srli.hint." (String.append (creg_name_forwards rsd) "")))
  | .C_SRAI_HINT rsd =>
    (pure (String.append "c.srai.hint." (String.append (creg_name_forwards rsd) "")))
  | .FENCE_RESERVED (fm, pred, succ, rs, rd) =>
    if (Bool.or (Bool.and (bne fm (0x0 : (BitVec 4))) (bne fm (0x8 : (BitVec 4))))
         (Bool.or (bne rs zreg) (bne rd zreg)))
    then
      (pure (String.append "fence.reserved."
          (String.append (fence_bits_forwards pred)
            (String.append "."
              (String.append (fence_bits_forwards succ)
                (String.append "."
                  (String.append (reg_name_forwards rs)
                    (String.append "."
                      (String.append (reg_name_forwards rd)
                        (String.append "." (String.append (← (hex_bits_4_forwards fm)) "")))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .FENCEI_RESERVED (imm, rs, rd) =>
    if (Bool.or (bne imm (0x000 : (BitVec 12))) (Bool.or (bne rs zreg) (bne rd zreg)))
    then
      (pure (String.append "fence.i.reserved."
          (String.append (reg_name_forwards rd)
            (String.append "."
              (String.append (reg_name_forwards rs)
                (String.append "." (String.append (← (hex_bits_12_forwards imm)) "")))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .ILLEGAL s =>
    (pure (String.append "illegal"
        (String.append (spc_forwards ()) (String.append (← (hex_bits_32_forwards s)) ""))))
  | .C_ILLEGAL s =>
    (pure (String.append "c.illegal"
        (String.append (spc_forwards ()) (String.append (← (hex_bits_16_forwards s)) ""))))

def print_insn (insn : ast) : SailM String := do
  (assembly_forwards insn)

def ptw_error_to_str (e : PTW_Error) : String :=
  match e with
  | .PTW_Invalid_Addr () => "invalid-source-addr"
  | .PTW_Access () => "mem-access-error"
  | .PTW_Invalid_PTE () => "invalid-pte"
  | .PTW_No_Permission () => "no-permission"
  | .PTW_Misaligned () => "misaligned-superpage"
  | .PTW_PTE_Update () => "pte-update-needed"
  | .PTW_Ext_Error e => "extension-error"

def undefined_Retired (_ : Unit) : SailM Retired := do
  (internal_pick [RETIRE_SUCCESS, RETIRE_FAIL])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def Retired_of_num (arg_ : Nat) : Retired :=
  match arg_ with
  | 0 => RETIRE_SUCCESS
  | _ => RETIRE_FAIL

def num_of_Retired (arg_ : Retired) : Int :=
  match arg_ with
  | RETIRE_SUCCESS => 0
  | RETIRE_FAIL => 1

def undefined_word_width (_ : Unit) : SailM word_width := do
  (internal_pick [BYTE, HALF, WORD, DOUBLE])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def word_width_of_num (arg_ : Nat) : word_width :=
  match arg_ with
  | 0 => BYTE
  | 1 => HALF
  | 2 => WORD
  | _ => DOUBLE

def num_of_word_width (arg_ : word_width) : Int :=
  match arg_ with
  | BYTE => 0
  | HALF => 1
  | WORD => 2
  | DOUBLE => 3

def undefined_InterruptType (_ : Unit) : SailM InterruptType := do
  (internal_pick
    [I_U_Software, I_S_Software, I_M_Software, I_U_Timer, I_S_Timer, I_M_Timer, I_U_External, I_S_External, I_M_External])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 8 -/
def InterruptType_of_num (arg_ : Nat) : InterruptType :=
  match arg_ with
  | 0 => I_U_Software
  | 1 => I_S_Software
  | 2 => I_M_Software
  | 3 => I_U_Timer
  | 4 => I_S_Timer
  | 5 => I_M_Timer
  | 6 => I_U_External
  | 7 => I_S_External
  | _ => I_M_External

def num_of_InterruptType (arg_ : InterruptType) : Int :=
  match arg_ with
  | I_U_Software => 0
  | I_S_Software => 1
  | I_M_Software => 2
  | I_U_Timer => 3
  | I_S_Timer => 4
  | I_M_Timer => 5
  | I_U_External => 6
  | I_S_External => 7
  | I_M_External => 8

def interruptType_to_bits (i : InterruptType) : (BitVec 8) :=
  match i with
  | I_U_Software => (0x00 : (BitVec 8))
  | I_S_Software => (0x01 : (BitVec 8))
  | I_M_Software => (0x03 : (BitVec 8))
  | I_U_Timer => (0x04 : (BitVec 8))
  | I_S_Timer => (0x05 : (BitVec 8))
  | I_M_Timer => (0x07 : (BitVec 8))
  | I_U_External => (0x08 : (BitVec 8))
  | I_S_External => (0x09 : (BitVec 8))
  | I_M_External => (0x0B : (BitVec 8))

def exceptionType_to_bits (e : ExceptionType) : (BitVec 8) :=
  match e with
  | .E_Fetch_Addr_Align () => (0x00 : (BitVec 8))
  | .E_Fetch_Access_Fault () => (0x01 : (BitVec 8))
  | .E_Illegal_Instr () => (0x02 : (BitVec 8))
  | .E_Breakpoint () => (0x03 : (BitVec 8))
  | .E_Load_Addr_Align () => (0x04 : (BitVec 8))
  | .E_Load_Access_Fault () => (0x05 : (BitVec 8))
  | .E_SAMO_Addr_Align () => (0x06 : (BitVec 8))
  | .E_SAMO_Access_Fault () => (0x07 : (BitVec 8))
  | .E_U_EnvCall () => (0x08 : (BitVec 8))
  | .E_S_EnvCall () => (0x09 : (BitVec 8))
  | .E_Reserved_10 () => (0x0A : (BitVec 8))
  | .E_M_EnvCall () => (0x0B : (BitVec 8))
  | .E_Fetch_Page_Fault () => (0x0C : (BitVec 8))
  | .E_Load_Page_Fault () => (0x0D : (BitVec 8))
  | .E_Reserved_14 () => (0x0E : (BitVec 8))
  | .E_SAMO_Page_Fault () => (0x0F : (BitVec 8))
  | .E_Extension e => (ext_exc_type_to_bits e)

def num_of_ExceptionType (e : ExceptionType) : Int :=
  match e with
  | .E_Fetch_Addr_Align () => 0
  | .E_Fetch_Access_Fault () => 1
  | .E_Illegal_Instr () => 2
  | .E_Breakpoint () => 3
  | .E_Load_Addr_Align () => 4
  | .E_Load_Access_Fault () => 5
  | .E_SAMO_Addr_Align () => 6
  | .E_SAMO_Access_Fault () => 7
  | .E_U_EnvCall () => 8
  | .E_S_EnvCall () => 9
  | .E_Reserved_10 () => 10
  | .E_M_EnvCall () => 11
  | .E_Fetch_Page_Fault () => 12
  | .E_Load_Page_Fault () => 13
  | .E_Reserved_14 () => 14
  | .E_SAMO_Page_Fault () => 15
  | .E_Extension e => (num_of_ext_exc_type e)

def undefined_TrapVectorMode (_ : Unit) : SailM TrapVectorMode := do
  (internal_pick [TV_Direct, TV_Vector, TV_Reserved])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def TrapVectorMode_of_num (arg_ : Nat) : TrapVectorMode :=
  match arg_ with
  | 0 => TV_Direct
  | 1 => TV_Vector
  | _ => TV_Reserved

def num_of_TrapVectorMode (arg_ : TrapVectorMode) : Int :=
  match arg_ with
  | TV_Direct => 0
  | TV_Vector => 1
  | TV_Reserved => 2

def trapVectorMode_of_bits (m : (BitVec 2)) : TrapVectorMode :=
  let b__0 := m
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then TV_Direct
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then TV_Vector
    else TV_Reserved

def undefined_ExtStatus (_ : Unit) : SailM ExtStatus := do
  (internal_pick [Off, Initial, Clean, Dirty])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def ExtStatus_of_num (arg_ : Nat) : ExtStatus :=
  match arg_ with
  | 0 => Off
  | 1 => Initial
  | 2 => Clean
  | _ => Dirty

def num_of_ExtStatus (arg_ : ExtStatus) : Int :=
  match arg_ with
  | Off => 0
  | Initial => 1
  | Clean => 2
  | Dirty => 3

def extStatus_to_bits (e : ExtStatus) : (BitVec 2) :=
  match e with
  | Off => (0b00 : (BitVec 2))
  | Initial => (0b01 : (BitVec 2))
  | Clean => (0b10 : (BitVec 2))
  | Dirty => (0b11 : (BitVec 2))

def extStatus_of_bits (e : (BitVec 2)) : ExtStatus :=
  let b__0 := e
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then Off
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then Initial
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then Clean
      else Dirty

def undefined_SATPMode (_ : Unit) : SailM SATPMode := do
  (internal_pick [Bare, Sv32, Sv39, Sv48, Sv57])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def SATPMode_of_num (arg_ : Nat) : SATPMode :=
  match arg_ with
  | 0 => Bare
  | 1 => Sv32
  | 2 => Sv39
  | 3 => Sv48
  | _ => Sv57

def num_of_SATPMode (arg_ : SATPMode) : Int :=
  match arg_ with
  | Bare => 0
  | Sv32 => 1
  | Sv39 => 2
  | Sv48 => 3
  | Sv57 => 4

def satpMode_of_bits (a : Architecture) (m : (BitVec 4)) : (Option SATPMode) :=
  match (a, m) with
  | (g__0, b__0) =>
    if (BEq.beq b__0 (0x0 : (BitVec 4)))
    then (some Bare)
    else
      match (g__0, b__0) with
      | (RV32, b__0) =>
        if (BEq.beq b__0 (0x1 : (BitVec 4)))
        then (some Sv32)
        else
          match (RV32, b__0) with
          | (_, _) => none
      | (RV64, b__0) =>
        if (BEq.beq b__0 (0x8 : (BitVec 4)))
        then (some Sv39)
        else
          if (BEq.beq b__0 (0x9 : (BitVec 4)))
          then (some Sv48)
          else
            if (BEq.beq b__0 (0xA : (BitVec 4)))
            then (some Sv57)
            else
              match (RV64, b__0) with
              | (_, _) => none
      | (_, _) => none

def undefined_uop (_ : Unit) : SailM uop := do
  (internal_pick [RISCV_LUI, RISCV_AUIPC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def uop_of_num (arg_ : Nat) : uop :=
  match arg_ with
  | 0 => RISCV_LUI
  | _ => RISCV_AUIPC

def num_of_uop (arg_ : uop) : Int :=
  match arg_ with
  | RISCV_LUI => 0
  | RISCV_AUIPC => 1

def undefined_bop (_ : Unit) : SailM bop := do
  (internal_pick [RISCV_BEQ, RISCV_BNE, RISCV_BLT, RISCV_BGE, RISCV_BLTU, RISCV_BGEU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def bop_of_num (arg_ : Nat) : bop :=
  match arg_ with
  | 0 => RISCV_BEQ
  | 1 => RISCV_BNE
  | 2 => RISCV_BLT
  | 3 => RISCV_BGE
  | 4 => RISCV_BLTU
  | _ => RISCV_BGEU

def num_of_bop (arg_ : bop) : Int :=
  match arg_ with
  | RISCV_BEQ => 0
  | RISCV_BNE => 1
  | RISCV_BLT => 2
  | RISCV_BGE => 3
  | RISCV_BLTU => 4
  | RISCV_BGEU => 5

def undefined_iop (_ : Unit) : SailM iop := do
  (internal_pick [RISCV_ADDI, RISCV_SLTI, RISCV_SLTIU, RISCV_XORI, RISCV_ORI, RISCV_ANDI])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def iop_of_num (arg_ : Nat) : iop :=
  match arg_ with
  | 0 => RISCV_ADDI
  | 1 => RISCV_SLTI
  | 2 => RISCV_SLTIU
  | 3 => RISCV_XORI
  | 4 => RISCV_ORI
  | _ => RISCV_ANDI

def num_of_iop (arg_ : iop) : Int :=
  match arg_ with
  | RISCV_ADDI => 0
  | RISCV_SLTI => 1
  | RISCV_SLTIU => 2
  | RISCV_XORI => 3
  | RISCV_ORI => 4
  | RISCV_ANDI => 5

def undefined_sop (_ : Unit) : SailM sop := do
  (internal_pick [RISCV_SLLI, RISCV_SRLI, RISCV_SRAI])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def sop_of_num (arg_ : Nat) : sop :=
  match arg_ with
  | 0 => RISCV_SLLI
  | 1 => RISCV_SRLI
  | _ => RISCV_SRAI

def num_of_sop (arg_ : sop) : Int :=
  match arg_ with
  | RISCV_SLLI => 0
  | RISCV_SRLI => 1
  | RISCV_SRAI => 2

def undefined_rop (_ : Unit) : SailM rop := do
  (internal_pick
    [RISCV_ADD, RISCV_SUB, RISCV_SLL, RISCV_SLT, RISCV_SLTU, RISCV_XOR, RISCV_SRL, RISCV_SRA, RISCV_OR, RISCV_AND])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 9 -/
def rop_of_num (arg_ : Nat) : rop :=
  match arg_ with
  | 0 => RISCV_ADD
  | 1 => RISCV_SUB
  | 2 => RISCV_SLL
  | 3 => RISCV_SLT
  | 4 => RISCV_SLTU
  | 5 => RISCV_XOR
  | 6 => RISCV_SRL
  | 7 => RISCV_SRA
  | 8 => RISCV_OR
  | _ => RISCV_AND

def num_of_rop (arg_ : rop) : Int :=
  match arg_ with
  | RISCV_ADD => 0
  | RISCV_SUB => 1
  | RISCV_SLL => 2
  | RISCV_SLT => 3
  | RISCV_SLTU => 4
  | RISCV_XOR => 5
  | RISCV_SRL => 6
  | RISCV_SRA => 7
  | RISCV_OR => 8
  | RISCV_AND => 9

def undefined_ropw (_ : Unit) : SailM ropw := do
  (internal_pick [RISCV_ADDW, RISCV_SUBW, RISCV_SLLW, RISCV_SRLW, RISCV_SRAW])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def ropw_of_num (arg_ : Nat) : ropw :=
  match arg_ with
  | 0 => RISCV_ADDW
  | 1 => RISCV_SUBW
  | 2 => RISCV_SLLW
  | 3 => RISCV_SRLW
  | _ => RISCV_SRAW

def num_of_ropw (arg_ : ropw) : Int :=
  match arg_ with
  | RISCV_ADDW => 0
  | RISCV_SUBW => 1
  | RISCV_SLLW => 2
  | RISCV_SRLW => 3
  | RISCV_SRAW => 4

def undefined_sopw (_ : Unit) : SailM sopw := do
  (internal_pick [RISCV_SLLIW, RISCV_SRLIW, RISCV_SRAIW])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def sopw_of_num (arg_ : Nat) : sopw :=
  match arg_ with
  | 0 => RISCV_SLLIW
  | 1 => RISCV_SRLIW
  | _ => RISCV_SRAIW

def num_of_sopw (arg_ : sopw) : Int :=
  match arg_ with
  | RISCV_SLLIW => 0
  | RISCV_SRLIW => 1
  | RISCV_SRAIW => 2

def undefined_amoop (_ : Unit) : SailM amoop := do
  (internal_pick [AMOSWAP, AMOADD, AMOXOR, AMOAND, AMOOR, AMOMIN, AMOMAX, AMOMINU, AMOMAXU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 8 -/
def amoop_of_num (arg_ : Nat) : amoop :=
  match arg_ with
  | 0 => AMOSWAP
  | 1 => AMOADD
  | 2 => AMOXOR
  | 3 => AMOAND
  | 4 => AMOOR
  | 5 => AMOMIN
  | 6 => AMOMAX
  | 7 => AMOMINU
  | _ => AMOMAXU

def num_of_amoop (arg_ : amoop) : Int :=
  match arg_ with
  | AMOSWAP => 0
  | AMOADD => 1
  | AMOXOR => 2
  | AMOAND => 3
  | AMOOR => 4
  | AMOMIN => 5
  | AMOMAX => 6
  | AMOMINU => 7
  | AMOMAXU => 8

def undefined_csrop (_ : Unit) : SailM csrop := do
  (internal_pick [CSRRW, CSRRS, CSRRC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def csrop_of_num (arg_ : Nat) : csrop :=
  match arg_ with
  | 0 => CSRRW
  | 1 => CSRRS
  | _ => CSRRC

def num_of_csrop (arg_ : csrop) : Int :=
  match arg_ with
  | CSRRW => 0
  | CSRRS => 1
  | CSRRC => 2

def undefined_cbop_zicbom (_ : Unit) : SailM cbop_zicbom := do
  (internal_pick [CBO_CLEAN, CBO_FLUSH, CBO_INVAL])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def cbop_zicbom_of_num (arg_ : Nat) : cbop_zicbom :=
  match arg_ with
  | 0 => CBO_CLEAN
  | 1 => CBO_FLUSH
  | _ => CBO_INVAL

def num_of_cbop_zicbom (arg_ : cbop_zicbom) : Int :=
  match arg_ with
  | CBO_CLEAN => 0
  | CBO_FLUSH => 1
  | CBO_INVAL => 2

def undefined_brop_zba (_ : Unit) : SailM brop_zba := do
  (internal_pick [RISCV_SH1ADD, RISCV_SH2ADD, RISCV_SH3ADD])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def brop_zba_of_num (arg_ : Nat) : brop_zba :=
  match arg_ with
  | 0 => RISCV_SH1ADD
  | 1 => RISCV_SH2ADD
  | _ => RISCV_SH3ADD

def num_of_brop_zba (arg_ : brop_zba) : Int :=
  match arg_ with
  | RISCV_SH1ADD => 0
  | RISCV_SH2ADD => 1
  | RISCV_SH3ADD => 2

def undefined_brop_zbb (_ : Unit) : SailM brop_zbb := do
  (internal_pick
    [RISCV_ANDN, RISCV_ORN, RISCV_XNOR, RISCV_MAX, RISCV_MAXU, RISCV_MIN, RISCV_MINU, RISCV_ROL, RISCV_ROR])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 8 -/
def brop_zbb_of_num (arg_ : Nat) : brop_zbb :=
  match arg_ with
  | 0 => RISCV_ANDN
  | 1 => RISCV_ORN
  | 2 => RISCV_XNOR
  | 3 => RISCV_MAX
  | 4 => RISCV_MAXU
  | 5 => RISCV_MIN
  | 6 => RISCV_MINU
  | 7 => RISCV_ROL
  | _ => RISCV_ROR

def num_of_brop_zbb (arg_ : brop_zbb) : Int :=
  match arg_ with
  | RISCV_ANDN => 0
  | RISCV_ORN => 1
  | RISCV_XNOR => 2
  | RISCV_MAX => 3
  | RISCV_MAXU => 4
  | RISCV_MIN => 5
  | RISCV_MINU => 6
  | RISCV_ROL => 7
  | RISCV_ROR => 8

def undefined_brop_zbkb (_ : Unit) : SailM brop_zbkb := do
  (internal_pick [RISCV_PACK, RISCV_PACKH])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def brop_zbkb_of_num (arg_ : Nat) : brop_zbkb :=
  match arg_ with
  | 0 => RISCV_PACK
  | _ => RISCV_PACKH

def num_of_brop_zbkb (arg_ : brop_zbkb) : Int :=
  match arg_ with
  | RISCV_PACK => 0
  | RISCV_PACKH => 1

def undefined_brop_zbs (_ : Unit) : SailM brop_zbs := do
  (internal_pick [RISCV_BCLR, RISCV_BEXT, RISCV_BINV, RISCV_BSET])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def brop_zbs_of_num (arg_ : Nat) : brop_zbs :=
  match arg_ with
  | 0 => RISCV_BCLR
  | 1 => RISCV_BEXT
  | 2 => RISCV_BINV
  | _ => RISCV_BSET

def num_of_brop_zbs (arg_ : brop_zbs) : Int :=
  match arg_ with
  | RISCV_BCLR => 0
  | RISCV_BEXT => 1
  | RISCV_BINV => 2
  | RISCV_BSET => 3

def undefined_bropw_zba (_ : Unit) : SailM bropw_zba := do
  (internal_pick [RISCV_ADDUW, RISCV_SH1ADDUW, RISCV_SH2ADDUW, RISCV_SH3ADDUW])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def bropw_zba_of_num (arg_ : Nat) : bropw_zba :=
  match arg_ with
  | 0 => RISCV_ADDUW
  | 1 => RISCV_SH1ADDUW
  | 2 => RISCV_SH2ADDUW
  | _ => RISCV_SH3ADDUW

def num_of_bropw_zba (arg_ : bropw_zba) : Int :=
  match arg_ with
  | RISCV_ADDUW => 0
  | RISCV_SH1ADDUW => 1
  | RISCV_SH2ADDUW => 2
  | RISCV_SH3ADDUW => 3

def undefined_bropw_zbb (_ : Unit) : SailM bropw_zbb := do
  (internal_pick [RISCV_ROLW, RISCV_RORW])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def bropw_zbb_of_num (arg_ : Nat) : bropw_zbb :=
  match arg_ with
  | 0 => RISCV_ROLW
  | _ => RISCV_RORW

def num_of_bropw_zbb (arg_ : bropw_zbb) : Int :=
  match arg_ with
  | RISCV_ROLW => 0
  | RISCV_RORW => 1

def undefined_biop_zbs (_ : Unit) : SailM biop_zbs := do
  (internal_pick [RISCV_BCLRI, RISCV_BEXTI, RISCV_BINVI, RISCV_BSETI])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def biop_zbs_of_num (arg_ : Nat) : biop_zbs :=
  match arg_ with
  | 0 => RISCV_BCLRI
  | 1 => RISCV_BEXTI
  | 2 => RISCV_BINVI
  | _ => RISCV_BSETI

def num_of_biop_zbs (arg_ : biop_zbs) : Int :=
  match arg_ with
  | RISCV_BCLRI => 0
  | RISCV_BEXTI => 1
  | RISCV_BINVI => 2
  | RISCV_BSETI => 3

def undefined_extop_zbb (_ : Unit) : SailM extop_zbb := do
  (internal_pick [RISCV_SEXTB, RISCV_SEXTH, RISCV_ZEXTH])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def extop_zbb_of_num (arg_ : Nat) : extop_zbb :=
  match arg_ with
  | 0 => RISCV_SEXTB
  | 1 => RISCV_SEXTH
  | _ => RISCV_ZEXTH

def num_of_extop_zbb (arg_ : extop_zbb) : Int :=
  match arg_ with
  | RISCV_SEXTB => 0
  | RISCV_SEXTH => 1
  | RISCV_ZEXTH => 2

def undefined_zicondop (_ : Unit) : SailM zicondop := do
  (internal_pick [RISCV_CZERO_EQZ, RISCV_CZERO_NEZ])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def zicondop_of_num (arg_ : Nat) : zicondop :=
  match arg_ with
  | 0 => RISCV_CZERO_EQZ
  | _ => RISCV_CZERO_NEZ

def num_of_zicondop (arg_ : zicondop) : Int :=
  match arg_ with
  | RISCV_CZERO_EQZ => 0
  | RISCV_CZERO_NEZ => 1

def size_enc_forwards (arg_ : word_width) : (BitVec 2) :=
  match arg_ with
  | BYTE => (0b00 : (BitVec 2))
  | HALF => (0b01 : (BitVec 2))
  | WORD => (0b10 : (BitVec 2))
  | DOUBLE => (0b11 : (BitVec 2))

def size_enc_backwards (arg_ : (BitVec 2)) : word_width :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then BYTE
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then HALF
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then WORD
      else DOUBLE

def size_enc_forwards_matches (arg_ : word_width) : Bool :=
  match arg_ with
  | BYTE => true
  | HALF => true
  | WORD => true
  | DOUBLE => true

def size_enc_backwards_matches (arg_ : (BitVec 2)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then true
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then true
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then true
      else
        if (BEq.beq b__0 (0b11 : (BitVec 2)))
        then true
        else false

def size_mnemonic_backwards (arg_ : String) : SailM word_width := do
  match arg_ with
  | "b" => (pure BYTE)
  | "h" => (pure HALF)
  | "w" => (pure WORD)
  | "d" => (pure DOUBLE)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def size_mnemonic_forwards_matches (arg_ : word_width) : Bool :=
  match arg_ with
  | BYTE => true
  | HALF => true
  | WORD => true
  | DOUBLE => true

def size_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "b" => true
  | "h" => true
  | "w" => true
  | "d" => true
  | _ => false

def size_bytes_forwards (arg_ : word_width) : Int :=
  match arg_ with
  | BYTE => 1
  | HALF => 2
  | WORD => 4
  | DOUBLE => 8

/-- Type quantifiers: arg_ : Nat, arg_ ∈ {1, 2, 4, 8} -/
def size_bytes_backwards (arg_ : Nat) : word_width :=
  match arg_ with
  | 1 => BYTE
  | 2 => HALF
  | 4 => WORD
  | _ => DOUBLE

def size_bytes_forwards_matches (arg_ : word_width) : Bool :=
  match arg_ with
  | BYTE => true
  | HALF => true
  | WORD => true
  | DOUBLE => true

/-- Type quantifiers: arg_ : Nat, arg_ ∈ {1, 2, 4, 8} -/
def size_bytes_backwards_matches (arg_ : Nat) : Bool :=
  match arg_ with
  | 1 => true
  | 2 => true
  | 4 => true
  | 8 => true
  | _ => false

def undefined_mul_op (_ : Unit) : SailM mul_op := do
  (pure { high := (← (undefined_bool ()))
          signed_rs1 := (← (undefined_bool ()))
          signed_rs2 := (← (undefined_bool ())) })

def Data : ext_access_type := ()

def default_write_acc : ext_access_type := Data

def zero_reg : regtype := (zeros_implicit (n := ((2 ^i 3) *i 8)))

def RegStr (r : (BitVec (2 ^ 3 * 8))) : String :=
  (BitVec.toFormatted r)

def regval_from_reg (r : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  r

def regval_into_reg (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  v

def zero_freg : fregtype := (zeros_implicit (n := (8 *i 8)))

def FRegStr (r : (BitVec (8 * 8))) : String :=
  (BitVec.toFormatted r)

def fregval_from_freg (r : (BitVec (8 * 8))) : (BitVec (8 * 8)) :=
  r

def fregval_into_freg (v : (BitVec (8 * 8))) : (BitVec (8 * 8)) :=
  v

def undefined_f_madd_op_H (_ : Unit) : SailM f_madd_op_H := do
  (internal_pick [FMADD_H, FMSUB_H, FNMSUB_H, FNMADD_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_madd_op_H_of_num (arg_ : Nat) : f_madd_op_H :=
  match arg_ with
  | 0 => FMADD_H
  | 1 => FMSUB_H
  | 2 => FNMSUB_H
  | _ => FNMADD_H

def num_of_f_madd_op_H (arg_ : f_madd_op_H) : Int :=
  match arg_ with
  | FMADD_H => 0
  | FMSUB_H => 1
  | FNMSUB_H => 2
  | FNMADD_H => 3

def undefined_f_bin_rm_op_H (_ : Unit) : SailM f_bin_rm_op_H := do
  (internal_pick [FADD_H, FSUB_H, FMUL_H, FDIV_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_bin_rm_op_H_of_num (arg_ : Nat) : f_bin_rm_op_H :=
  match arg_ with
  | 0 => FADD_H
  | 1 => FSUB_H
  | 2 => FMUL_H
  | _ => FDIV_H

def num_of_f_bin_rm_op_H (arg_ : f_bin_rm_op_H) : Int :=
  match arg_ with
  | FADD_H => 0
  | FSUB_H => 1
  | FMUL_H => 2
  | FDIV_H => 3

def undefined_f_un_rm_ff_op_H (_ : Unit) : SailM f_un_rm_ff_op_H := do
  (internal_pick [FSQRT_H, FCVT_H_S, FCVT_H_D, FCVT_S_H, FCVT_D_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def f_un_rm_ff_op_H_of_num (arg_ : Nat) : f_un_rm_ff_op_H :=
  match arg_ with
  | 0 => FSQRT_H
  | 1 => FCVT_H_S
  | 2 => FCVT_H_D
  | 3 => FCVT_S_H
  | _ => FCVT_D_H

def num_of_f_un_rm_ff_op_H (arg_ : f_un_rm_ff_op_H) : Int :=
  match arg_ with
  | FSQRT_H => 0
  | FCVT_H_S => 1
  | FCVT_H_D => 2
  | FCVT_S_H => 3
  | FCVT_D_H => 4

def undefined_f_un_rm_fx_op_H (_ : Unit) : SailM f_un_rm_fx_op_H := do
  (internal_pick [FCVT_W_H, FCVT_WU_H, FCVT_L_H, FCVT_LU_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_fx_op_H_of_num (arg_ : Nat) : f_un_rm_fx_op_H :=
  match arg_ with
  | 0 => FCVT_W_H
  | 1 => FCVT_WU_H
  | 2 => FCVT_L_H
  | _ => FCVT_LU_H

def num_of_f_un_rm_fx_op_H (arg_ : f_un_rm_fx_op_H) : Int :=
  match arg_ with
  | FCVT_W_H => 0
  | FCVT_WU_H => 1
  | FCVT_L_H => 2
  | FCVT_LU_H => 3

def undefined_f_un_rm_xf_op_H (_ : Unit) : SailM f_un_rm_xf_op_H := do
  (internal_pick [FCVT_H_W, FCVT_H_WU, FCVT_H_L, FCVT_H_LU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_xf_op_H_of_num (arg_ : Nat) : f_un_rm_xf_op_H :=
  match arg_ with
  | 0 => FCVT_H_W
  | 1 => FCVT_H_WU
  | 2 => FCVT_H_L
  | _ => FCVT_H_LU

def num_of_f_un_rm_xf_op_H (arg_ : f_un_rm_xf_op_H) : Int :=
  match arg_ with
  | FCVT_H_W => 0
  | FCVT_H_WU => 1
  | FCVT_H_L => 2
  | FCVT_H_LU => 3

def undefined_f_un_x_op_H (_ : Unit) : SailM f_un_x_op_H := do
  (internal_pick [FCLASS_H, FMV_X_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def f_un_x_op_H_of_num (arg_ : Nat) : f_un_x_op_H :=
  match arg_ with
  | 0 => FCLASS_H
  | _ => FMV_X_H

def num_of_f_un_x_op_H (arg_ : f_un_x_op_H) : Int :=
  match arg_ with
  | FCLASS_H => 0
  | FMV_X_H => 1

def undefined_f_un_f_op_H (_ : Unit) : SailM f_un_f_op_H := do
  (internal_pick [FMV_H_X])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def f_un_f_op_H_of_num (arg_ : Nat) : f_un_f_op_H :=
  match arg_ with
  | _ => FMV_H_X

def num_of_f_un_f_op_H (arg_ : f_un_f_op_H) : Int :=
  match arg_ with
  | FMV_H_X => 0

def undefined_f_bin_f_op_H (_ : Unit) : SailM f_bin_f_op_H := do
  (internal_pick [FSGNJ_H, FSGNJN_H, FSGNJX_H, FMIN_H, FMAX_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def f_bin_f_op_H_of_num (arg_ : Nat) : f_bin_f_op_H :=
  match arg_ with
  | 0 => FSGNJ_H
  | 1 => FSGNJN_H
  | 2 => FSGNJX_H
  | 3 => FMIN_H
  | _ => FMAX_H

def num_of_f_bin_f_op_H (arg_ : f_bin_f_op_H) : Int :=
  match arg_ with
  | FSGNJ_H => 0
  | FSGNJN_H => 1
  | FSGNJX_H => 2
  | FMIN_H => 3
  | FMAX_H => 4

def undefined_f_bin_x_op_H (_ : Unit) : SailM f_bin_x_op_H := do
  (internal_pick [FEQ_H, FLT_H, FLE_H])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def f_bin_x_op_H_of_num (arg_ : Nat) : f_bin_x_op_H :=
  match arg_ with
  | 0 => FEQ_H
  | 1 => FLT_H
  | _ => FLE_H

def num_of_f_bin_x_op_H (arg_ : f_bin_x_op_H) : Int :=
  match arg_ with
  | FEQ_H => 0
  | FLT_H => 1
  | FLE_H => 2

def undefined_rounding_mode (_ : Unit) : SailM rounding_mode := do
  (internal_pick [RM_RNE, RM_RTZ, RM_RDN, RM_RUP, RM_RMM, RM_DYN])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def rounding_mode_of_num (arg_ : Nat) : rounding_mode :=
  match arg_ with
  | 0 => RM_RNE
  | 1 => RM_RTZ
  | 2 => RM_RDN
  | 3 => RM_RUP
  | 4 => RM_RMM
  | _ => RM_DYN

def num_of_rounding_mode (arg_ : rounding_mode) : Int :=
  match arg_ with
  | RM_RNE => 0
  | RM_RTZ => 1
  | RM_RDN => 2
  | RM_RUP => 3
  | RM_RMM => 4
  | RM_DYN => 5

def undefined_f_madd_op_S (_ : Unit) : SailM f_madd_op_S := do
  (internal_pick [FMADD_S, FMSUB_S, FNMSUB_S, FNMADD_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_madd_op_S_of_num (arg_ : Nat) : f_madd_op_S :=
  match arg_ with
  | 0 => FMADD_S
  | 1 => FMSUB_S
  | 2 => FNMSUB_S
  | _ => FNMADD_S

def num_of_f_madd_op_S (arg_ : f_madd_op_S) : Int :=
  match arg_ with
  | FMADD_S => 0
  | FMSUB_S => 1
  | FNMSUB_S => 2
  | FNMADD_S => 3

def undefined_f_bin_rm_op_S (_ : Unit) : SailM f_bin_rm_op_S := do
  (internal_pick [FADD_S, FSUB_S, FMUL_S, FDIV_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_bin_rm_op_S_of_num (arg_ : Nat) : f_bin_rm_op_S :=
  match arg_ with
  | 0 => FADD_S
  | 1 => FSUB_S
  | 2 => FMUL_S
  | _ => FDIV_S

def num_of_f_bin_rm_op_S (arg_ : f_bin_rm_op_S) : Int :=
  match arg_ with
  | FADD_S => 0
  | FSUB_S => 1
  | FMUL_S => 2
  | FDIV_S => 3

def undefined_f_un_rm_ff_op_S (_ : Unit) : SailM f_un_rm_ff_op_S := do
  (internal_pick [FSQRT_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def f_un_rm_ff_op_S_of_num (arg_ : Nat) : f_un_rm_ff_op_S :=
  match arg_ with
  | _ => FSQRT_S

def num_of_f_un_rm_ff_op_S (arg_ : f_un_rm_ff_op_S) : Int :=
  match arg_ with
  | FSQRT_S => 0

def undefined_f_un_rm_fx_op_S (_ : Unit) : SailM f_un_rm_fx_op_S := do
  (internal_pick [FCVT_W_S, FCVT_WU_S, FCVT_L_S, FCVT_LU_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_fx_op_S_of_num (arg_ : Nat) : f_un_rm_fx_op_S :=
  match arg_ with
  | 0 => FCVT_W_S
  | 1 => FCVT_WU_S
  | 2 => FCVT_L_S
  | _ => FCVT_LU_S

def num_of_f_un_rm_fx_op_S (arg_ : f_un_rm_fx_op_S) : Int :=
  match arg_ with
  | FCVT_W_S => 0
  | FCVT_WU_S => 1
  | FCVT_L_S => 2
  | FCVT_LU_S => 3

def undefined_f_un_rm_xf_op_S (_ : Unit) : SailM f_un_rm_xf_op_S := do
  (internal_pick [FCVT_S_W, FCVT_S_WU, FCVT_S_L, FCVT_S_LU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_xf_op_S_of_num (arg_ : Nat) : f_un_rm_xf_op_S :=
  match arg_ with
  | 0 => FCVT_S_W
  | 1 => FCVT_S_WU
  | 2 => FCVT_S_L
  | _ => FCVT_S_LU

def num_of_f_un_rm_xf_op_S (arg_ : f_un_rm_xf_op_S) : Int :=
  match arg_ with
  | FCVT_S_W => 0
  | FCVT_S_WU => 1
  | FCVT_S_L => 2
  | FCVT_S_LU => 3

def undefined_f_un_op_f_S (_ : Unit) : SailM f_un_op_f_S := do
  (internal_pick [FMV_W_X])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def f_un_op_f_S_of_num (arg_ : Nat) : f_un_op_f_S :=
  match arg_ with
  | _ => FMV_W_X

def num_of_f_un_op_f_S (arg_ : f_un_op_f_S) : Int :=
  match arg_ with
  | FMV_W_X => 0

def undefined_f_un_op_x_S (_ : Unit) : SailM f_un_op_x_S := do
  (internal_pick [FCLASS_S, FMV_X_W])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def f_un_op_x_S_of_num (arg_ : Nat) : f_un_op_x_S :=
  match arg_ with
  | 0 => FCLASS_S
  | _ => FMV_X_W

def num_of_f_un_op_x_S (arg_ : f_un_op_x_S) : Int :=
  match arg_ with
  | FCLASS_S => 0
  | FMV_X_W => 1

def undefined_f_bin_op_f_S (_ : Unit) : SailM f_bin_op_f_S := do
  (internal_pick [FSGNJ_S, FSGNJN_S, FSGNJX_S, FMIN_S, FMAX_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def f_bin_op_f_S_of_num (arg_ : Nat) : f_bin_op_f_S :=
  match arg_ with
  | 0 => FSGNJ_S
  | 1 => FSGNJN_S
  | 2 => FSGNJX_S
  | 3 => FMIN_S
  | _ => FMAX_S

def num_of_f_bin_op_f_S (arg_ : f_bin_op_f_S) : Int :=
  match arg_ with
  | FSGNJ_S => 0
  | FSGNJN_S => 1
  | FSGNJX_S => 2
  | FMIN_S => 3
  | FMAX_S => 4

def undefined_f_bin_op_x_S (_ : Unit) : SailM f_bin_op_x_S := do
  (internal_pick [FEQ_S, FLT_S, FLE_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def f_bin_op_x_S_of_num (arg_ : Nat) : f_bin_op_x_S :=
  match arg_ with
  | 0 => FEQ_S
  | 1 => FLT_S
  | _ => FLE_S

def num_of_f_bin_op_x_S (arg_ : f_bin_op_x_S) : Int :=
  match arg_ with
  | FEQ_S => 0
  | FLT_S => 1
  | FLE_S => 2

def undefined_f_madd_op_D (_ : Unit) : SailM f_madd_op_D := do
  (internal_pick [FMADD_D, FMSUB_D, FNMSUB_D, FNMADD_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_madd_op_D_of_num (arg_ : Nat) : f_madd_op_D :=
  match arg_ with
  | 0 => FMADD_D
  | 1 => FMSUB_D
  | 2 => FNMSUB_D
  | _ => FNMADD_D

def num_of_f_madd_op_D (arg_ : f_madd_op_D) : Int :=
  match arg_ with
  | FMADD_D => 0
  | FMSUB_D => 1
  | FNMSUB_D => 2
  | FNMADD_D => 3

def undefined_f_bin_rm_op_D (_ : Unit) : SailM f_bin_rm_op_D := do
  (internal_pick [FADD_D, FSUB_D, FMUL_D, FDIV_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_bin_rm_op_D_of_num (arg_ : Nat) : f_bin_rm_op_D :=
  match arg_ with
  | 0 => FADD_D
  | 1 => FSUB_D
  | 2 => FMUL_D
  | _ => FDIV_D

def num_of_f_bin_rm_op_D (arg_ : f_bin_rm_op_D) : Int :=
  match arg_ with
  | FADD_D => 0
  | FSUB_D => 1
  | FMUL_D => 2
  | FDIV_D => 3

def undefined_f_un_rm_ff_op_D (_ : Unit) : SailM f_un_rm_ff_op_D := do
  (internal_pick [FSQRT_D, FCVT_S_D, FCVT_D_S])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def f_un_rm_ff_op_D_of_num (arg_ : Nat) : f_un_rm_ff_op_D :=
  match arg_ with
  | 0 => FSQRT_D
  | 1 => FCVT_S_D
  | _ => FCVT_D_S

def num_of_f_un_rm_ff_op_D (arg_ : f_un_rm_ff_op_D) : Int :=
  match arg_ with
  | FSQRT_D => 0
  | FCVT_S_D => 1
  | FCVT_D_S => 2

def undefined_f_un_rm_fx_op_D (_ : Unit) : SailM f_un_rm_fx_op_D := do
  (internal_pick [FCVT_W_D, FCVT_WU_D, FCVT_L_D, FCVT_LU_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_fx_op_D_of_num (arg_ : Nat) : f_un_rm_fx_op_D :=
  match arg_ with
  | 0 => FCVT_W_D
  | 1 => FCVT_WU_D
  | 2 => FCVT_L_D
  | _ => FCVT_LU_D

def num_of_f_un_rm_fx_op_D (arg_ : f_un_rm_fx_op_D) : Int :=
  match arg_ with
  | FCVT_W_D => 0
  | FCVT_WU_D => 1
  | FCVT_L_D => 2
  | FCVT_LU_D => 3

def undefined_f_un_rm_xf_op_D (_ : Unit) : SailM f_un_rm_xf_op_D := do
  (internal_pick [FCVT_D_W, FCVT_D_WU, FCVT_D_L, FCVT_D_LU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def f_un_rm_xf_op_D_of_num (arg_ : Nat) : f_un_rm_xf_op_D :=
  match arg_ with
  | 0 => FCVT_D_W
  | 1 => FCVT_D_WU
  | 2 => FCVT_D_L
  | _ => FCVT_D_LU

def num_of_f_un_rm_xf_op_D (arg_ : f_un_rm_xf_op_D) : Int :=
  match arg_ with
  | FCVT_D_W => 0
  | FCVT_D_WU => 1
  | FCVT_D_L => 2
  | FCVT_D_LU => 3

def undefined_f_bin_f_op_D (_ : Unit) : SailM f_bin_f_op_D := do
  (internal_pick [FSGNJ_D, FSGNJN_D, FSGNJX_D, FMIN_D, FMAX_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 4 -/
def f_bin_f_op_D_of_num (arg_ : Nat) : f_bin_f_op_D :=
  match arg_ with
  | 0 => FSGNJ_D
  | 1 => FSGNJN_D
  | 2 => FSGNJX_D
  | 3 => FMIN_D
  | _ => FMAX_D

def num_of_f_bin_f_op_D (arg_ : f_bin_f_op_D) : Int :=
  match arg_ with
  | FSGNJ_D => 0
  | FSGNJN_D => 1
  | FSGNJX_D => 2
  | FMIN_D => 3
  | FMAX_D => 4

def undefined_f_bin_x_op_D (_ : Unit) : SailM f_bin_x_op_D := do
  (internal_pick [FEQ_D, FLT_D, FLE_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def f_bin_x_op_D_of_num (arg_ : Nat) : f_bin_x_op_D :=
  match arg_ with
  | 0 => FEQ_D
  | 1 => FLT_D
  | _ => FLE_D

def num_of_f_bin_x_op_D (arg_ : f_bin_x_op_D) : Int :=
  match arg_ with
  | FEQ_D => 0
  | FLT_D => 1
  | FLE_D => 2

def undefined_f_un_x_op_D (_ : Unit) : SailM f_un_x_op_D := do
  (internal_pick [FCLASS_D, FMV_X_D])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def f_un_x_op_D_of_num (arg_ : Nat) : f_un_x_op_D :=
  match arg_ with
  | 0 => FCLASS_D
  | _ => FMV_X_D

def num_of_f_un_x_op_D (arg_ : f_un_x_op_D) : Int :=
  match arg_ with
  | FCLASS_D => 0
  | FMV_X_D => 1

def undefined_f_un_f_op_D (_ : Unit) : SailM f_un_f_op_D := do
  (internal_pick [FMV_D_X])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def f_un_f_op_D_of_num (arg_ : Nat) : f_un_f_op_D :=
  match arg_ with
  | _ => FMV_D_X

def num_of_f_un_f_op_D (arg_ : f_un_f_op_D) : Int :=
  match arg_ with
  | FMV_D_X => 0

def rX (app_0 : regno) : SailM (BitVec (2 ^ 3 * 8)) := do
  let .Regno r := app_0
  let v ← (( do
    match r with
    | 0 => (pure zero_reg)
    | 1 => readReg x1
    | 2 => readReg x2
    | 3 => readReg x3
    | 4 => readReg x4
    | 5 => readReg x5
    | 6 => readReg x6
    | 7 => readReg x7
    | 8 => readReg x8
    | 9 => readReg x9
    | 10 => readReg x10
    | 11 => readReg x11
    | 12 => readReg x12
    | 13 => readReg x13
    | 14 => readReg x14
    | 15 => readReg x15
    | 16 => readReg x16
    | 17 => readReg x17
    | 18 => readReg x18
    | 19 => readReg x19
    | 20 => readReg x20
    | 21 => readReg x21
    | 22 => readReg x22
    | 23 => readReg x23
    | 24 => readReg x24
    | 25 => readReg x25
    | 26 => readReg x26
    | 27 => readReg x27
    | 28 => readReg x28
    | 29 => readReg x29
    | 30 => readReg x30
    | 31 => readReg x31
    | _ =>
      assert false "invalid register number"
      throw Error.Exit ) : SailM regtype )
  (pure (regval_from_reg v))

def rvfi_wX (r : regno) (v : (BitVec (2 ^ 3 * 8))) : Unit :=
  ()

def wX (typ_0 : regno) (in_v : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  let .Regno r : regno := typ_0
  let v := (regval_into_reg in_v)
  match r with
  | 0 => (pure ())
  | 1 => writeReg x1 v
  | 2 => writeReg x2 v
  | 3 => writeReg x3 v
  | 4 => writeReg x4 v
  | 5 => writeReg x5 v
  | 6 => writeReg x6 v
  | 7 => writeReg x7 v
  | 8 => writeReg x8 v
  | 9 => writeReg x9 v
  | 10 => writeReg x10 v
  | 11 => writeReg x11 v
  | 12 => writeReg x12 v
  | 13 => writeReg x13 v
  | 14 => writeReg x14 v
  | 15 => writeReg x15 v
  | 16 => writeReg x16 v
  | 17 => writeReg x17 v
  | 18 => writeReg x18 v
  | 19 => writeReg x19 v
  | 20 => writeReg x20 v
  | 21 => writeReg x21 v
  | 22 => writeReg x22 v
  | 23 => writeReg x23 v
  | 24 => writeReg x24 v
  | 25 => writeReg x25 v
  | 26 => writeReg x26 v
  | 27 => writeReg x27 v
  | 28 => writeReg x28 v
  | 29 => writeReg x29 v
  | 30 => writeReg x30 v
  | 31 => writeReg x31 v
  | _ => assert false "invalid register number"
  if (bne r 0)
  then
    let _ : Unit := (rvfi_wX (Regno r) in_v)
    if (get_config_print_reg ())
    then
      (pure (print_endline
          (HAppend.hAppend "x" (HAppend.hAppend (Int.repr r) (HAppend.hAppend " <- " (RegStr v))))))
    else (pure ())
  else (pure ())

def rX_bits (i : regidx) : SailM (BitVec (2 ^ 3 * 8)) := do
  (rX (regidx_to_regno i))

def wX_bits (i : regidx) (data : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  (wX (regidx_to_regno i) data)

def reg_name_raw_backwards (arg_ : String) : SailM (BitVec 5) := do
  match arg_ with
  | "zero" => (pure (0b00000 : (BitVec 5)))
  | "ra" => (pure (0b00001 : (BitVec 5)))
  | "sp" => (pure (0b00010 : (BitVec 5)))
  | "gp" => (pure (0b00011 : (BitVec 5)))
  | "tp" => (pure (0b00100 : (BitVec 5)))
  | "t0" => (pure (0b00101 : (BitVec 5)))
  | "t1" => (pure (0b00110 : (BitVec 5)))
  | "t2" => (pure (0b00111 : (BitVec 5)))
  | "fp" => (pure (0b01000 : (BitVec 5)))
  | "s1" => (pure (0b01001 : (BitVec 5)))
  | "a0" => (pure (0b01010 : (BitVec 5)))
  | "a1" => (pure (0b01011 : (BitVec 5)))
  | "a2" => (pure (0b01100 : (BitVec 5)))
  | "a3" => (pure (0b01101 : (BitVec 5)))
  | "a4" => (pure (0b01110 : (BitVec 5)))
  | "a5" => (pure (0b01111 : (BitVec 5)))
  | "a6" => (pure (0b10000 : (BitVec 5)))
  | "a7" => (pure (0b10001 : (BitVec 5)))
  | "s2" => (pure (0b10010 : (BitVec 5)))
  | "s3" => (pure (0b10011 : (BitVec 5)))
  | "s4" => (pure (0b10100 : (BitVec 5)))
  | "s5" => (pure (0b10101 : (BitVec 5)))
  | "s6" => (pure (0b10110 : (BitVec 5)))
  | "s7" => (pure (0b10111 : (BitVec 5)))
  | "s8" => (pure (0b11000 : (BitVec 5)))
  | "s9" => (pure (0b11001 : (BitVec 5)))
  | "s10" => (pure (0b11010 : (BitVec 5)))
  | "s11" => (pure (0b11011 : (BitVec 5)))
  | "t3" => (pure (0b11100 : (BitVec 5)))
  | "t4" => (pure (0b11101 : (BitVec 5)))
  | "t5" => (pure (0b11110 : (BitVec 5)))
  | "t6" => (pure (0b11111 : (BitVec 5)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def reg_name_raw_forwards_matches (arg_ : (BitVec 5)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00000 : (BitVec 5)))
  then true
  else
    if (BEq.beq b__0 (0b00001 : (BitVec 5)))
    then true
    else
      if (BEq.beq b__0 (0b00010 : (BitVec 5)))
      then true
      else
        if (BEq.beq b__0 (0b00011 : (BitVec 5)))
        then true
        else
          if (BEq.beq b__0 (0b00100 : (BitVec 5)))
          then true
          else
            if (BEq.beq b__0 (0b00101 : (BitVec 5)))
            then true
            else
              if (BEq.beq b__0 (0b00110 : (BitVec 5)))
              then true
              else
                if (BEq.beq b__0 (0b00111 : (BitVec 5)))
                then true
                else
                  if (BEq.beq b__0 (0b01000 : (BitVec 5)))
                  then true
                  else
                    if (BEq.beq b__0 (0b01001 : (BitVec 5)))
                    then true
                    else
                      if (BEq.beq b__0 (0b01010 : (BitVec 5)))
                      then true
                      else
                        if (BEq.beq b__0 (0b01011 : (BitVec 5)))
                        then true
                        else
                          if (BEq.beq b__0 (0b01100 : (BitVec 5)))
                          then true
                          else
                            if (BEq.beq b__0 (0b01101 : (BitVec 5)))
                            then true
                            else
                              if (BEq.beq b__0 (0b01110 : (BitVec 5)))
                              then true
                              else
                                if (BEq.beq b__0 (0b01111 : (BitVec 5)))
                                then true
                                else
                                  if (BEq.beq b__0 (0b10000 : (BitVec 5)))
                                  then true
                                  else
                                    if (BEq.beq b__0 (0b10001 : (BitVec 5)))
                                    then true
                                    else
                                      if (BEq.beq b__0 (0b10010 : (BitVec 5)))
                                      then true
                                      else
                                        if (BEq.beq b__0 (0b10011 : (BitVec 5)))
                                        then true
                                        else
                                          if (BEq.beq b__0 (0b10100 : (BitVec 5)))
                                          then true
                                          else
                                            if (BEq.beq b__0 (0b10101 : (BitVec 5)))
                                            then true
                                            else
                                              if (BEq.beq b__0 (0b10110 : (BitVec 5)))
                                              then true
                                              else
                                                if (BEq.beq b__0 (0b10111 : (BitVec 5)))
                                                then true
                                                else
                                                  if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                                                  then true
                                                  else
                                                    if (BEq.beq b__0 (0b11001 : (BitVec 5)))
                                                    then true
                                                    else
                                                      if (BEq.beq b__0 (0b11010 : (BitVec 5)))
                                                      then true
                                                      else
                                                        if (BEq.beq b__0 (0b11011 : (BitVec 5)))
                                                        then true
                                                        else
                                                          if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                                                          then true
                                                          else
                                                            if (BEq.beq b__0 (0b11101 : (BitVec 5)))
                                                            then true
                                                            else
                                                              if (BEq.beq b__0
                                                                   (0b11110 : (BitVec 5)))
                                                              then true
                                                              else
                                                                if (BEq.beq b__0
                                                                     (0b11111 : (BitVec 5)))
                                                                then true
                                                                else false

def reg_name_raw_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "zero" => true
  | "ra" => true
  | "sp" => true
  | "gp" => true
  | "tp" => true
  | "t0" => true
  | "t1" => true
  | "t2" => true
  | "fp" => true
  | "s1" => true
  | "a0" => true
  | "a1" => true
  | "a2" => true
  | "a3" => true
  | "a4" => true
  | "a5" => true
  | "a6" => true
  | "a7" => true
  | "s2" => true
  | "s3" => true
  | "s4" => true
  | "s5" => true
  | "s6" => true
  | "s7" => true
  | "s8" => true
  | "s9" => true
  | "s10" => true
  | "s11" => true
  | "t3" => true
  | "t4" => true
  | "t5" => true
  | "t6" => true
  | _ => false

def reg_name_backwards (arg_ : String) : SailM regidx := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (reg_name_raw_backwards_matches mapping0_)
    then
      match (← (reg_name_raw_backwards mapping0_)) with
      | i => (pure (some (Regidx i)))
    else (pure none)) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def reg_name_forwards_matches (arg_ : regidx) : Bool :=
  match arg_ with
  | .Regidx i => true

def reg_name_backwards_matches (arg_ : String) : SailM Bool := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (reg_name_raw_backwards_matches mapping0_)
    then
      match (← (reg_name_raw_backwards mapping0_)) with
      | i => (pure (some true))
    else (pure none)) with
  | .some result => (pure result)
  | none =>
    match head_exp_ with
    | _ => (pure false)

def creg_name_raw_backwards (arg_ : String) : SailM (BitVec 3) := do
  match arg_ with
  | "s0" => (pure (0b000 : (BitVec 3)))
  | "s1" => (pure (0b001 : (BitVec 3)))
  | "a0" => (pure (0b010 : (BitVec 3)))
  | "a1" => (pure (0b011 : (BitVec 3)))
  | "a2" => (pure (0b100 : (BitVec 3)))
  | "a3" => (pure (0b101 : (BitVec 3)))
  | "a4" => (pure (0b110 : (BitVec 3)))
  | "a5" => (pure (0b111 : (BitVec 3)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def creg_name_raw_forwards_matches (arg_ : (BitVec 3)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then true
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then true
    else
      if (BEq.beq b__0 (0b010 : (BitVec 3)))
      then true
      else
        if (BEq.beq b__0 (0b011 : (BitVec 3)))
        then true
        else
          if (BEq.beq b__0 (0b100 : (BitVec 3)))
          then true
          else
            if (BEq.beq b__0 (0b101 : (BitVec 3)))
            then true
            else
              if (BEq.beq b__0 (0b110 : (BitVec 3)))
              then true
              else
                if (BEq.beq b__0 (0b111 : (BitVec 3)))
                then true
                else false

def creg_name_raw_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "s0" => true
  | "s1" => true
  | "a0" => true
  | "a1" => true
  | "a2" => true
  | "a3" => true
  | "a4" => true
  | "a5" => true
  | _ => false

def creg_name_backwards (arg_ : String) : SailM cregidx := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (creg_name_raw_backwards_matches mapping0_)
    then
      match (← (creg_name_raw_backwards mapping0_)) with
      | i => (pure (some (Cregidx i)))
    else (pure none)) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def creg_name_forwards_matches (arg_ : cregidx) : Bool :=
  match arg_ with
  | .Cregidx i => true

def creg_name_backwards_matches (arg_ : String) : SailM Bool := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (creg_name_raw_backwards_matches mapping0_)
    then
      match (← (creg_name_raw_backwards mapping0_)) with
      | i => (pure (some true))
    else (pure none)) with
  | .some result => (pure result)
  | none =>
    match head_exp_ with
    | _ => (pure false)

def encdec_reg_forwards (arg_ : regidx) : (BitVec 5) :=
  match arg_ with
  | .Regidx r => r

def encdec_reg_backwards (arg_ : (BitVec 5)) : regidx :=
  match arg_ with
  | r => (Regidx r)

def encdec_reg_forwards_matches (arg_ : regidx) : Bool :=
  match arg_ with
  | .Regidx r => true

def encdec_reg_backwards_matches (arg_ : (BitVec 5)) : Bool :=
  match arg_ with
  | r => true

def encdec_creg_forwards (arg_ : cregidx) : (BitVec 3) :=
  match arg_ with
  | .Cregidx r => r

def encdec_creg_backwards (arg_ : (BitVec 3)) : cregidx :=
  match arg_ with
  | r => (Cregidx r)

def encdec_creg_forwards_matches (arg_ : cregidx) : Bool :=
  match arg_ with
  | .Cregidx r => true

def encdec_creg_backwards_matches (arg_ : (BitVec 3)) : Bool :=
  match arg_ with
  | r => true

def get_arch_pc (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  readReg PC

def get_next_pc (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  readReg nextPC

def set_next_pc (pc : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  let _ : Unit := (sail_branch_announce xlen pc)
  writeReg nextPC pc

def tick_pc (_ : Unit) : SailM Unit := do
  writeReg PC (← readReg nextPC)

def undefined_Misa (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Misa (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def _get_Misa_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _update_Misa_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_CountSmcntrpmf_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Counteren_bits (v : (BitVec 32)) (x : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v (32 -i 1) 0 x)

def _update_Counterin_bits (v : (BitVec 32)) (x : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v (32 -i 1) 0 x)

def _update_HpmEvent_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_MEnvcfg_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Mcause_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_Medeleg_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Minterrupts_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_Mstatus_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Mtvec_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_PTE_Ext_bits (v : (BitVec 10)) (x : (BitVec 10)) : (BitVec 10) :=
  (Sail.BitVec.updateSubrange v (10 -i 1) 0 x)

def _update_PTE_Flags_bits (v : (BitVec 8)) (x : (BitVec 8)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v (8 -i 1) 0 x)

def _update_Pmpcfg_ent_bits (v : (BitVec 8)) (x : (BitVec 8)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v (8 -i 1) 0 x)

def _update_SEnvcfg_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_Satp32_bits (v : (BitVec 32)) (x : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v (32 -i 1) 0 x)

def _update_Satp64_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Sinterrupts_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_Sstatus_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _update_Vcsr_bits (v : (BitVec 3)) (x : (BitVec 3)) : (BitVec 3) :=
  (Sail.BitVec.updateSubrange v (3 -i 1) 0 x)

def _update_Vtype_bits (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 0 x)

def _update_htif_cmd_bits (v : (BitVec 64)) (x : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (64 -i 1) 0 x)

def _set_Misa_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_bits r v)

def _get_CountSmcntrpmf_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Counteren_bits (v : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.extractLsb v (32 -i 1) 0)

def _get_Counterin_bits (v : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.extractLsb v (32 -i 1) 0)

def _get_HpmEvent_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_MEnvcfg_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Mcause_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_Medeleg_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Minterrupts_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_Mstatus_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Mtvec_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_PTE_Ext_bits (v : (BitVec 10)) : (BitVec 10) :=
  (Sail.BitVec.extractLsb v (10 -i 1) 0)

def _get_PTE_Flags_bits (v : (BitVec 8)) : (BitVec 8) :=
  (Sail.BitVec.extractLsb v (8 -i 1) 0)

def _get_Pmpcfg_ent_bits (v : (BitVec 8)) : (BitVec 8) :=
  (Sail.BitVec.extractLsb v (8 -i 1) 0)

def _get_SEnvcfg_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_Satp32_bits (v : (BitVec 32)) : (BitVec 32) :=
  (Sail.BitVec.extractLsb v (32 -i 1) 0)

def _get_Satp64_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Sinterrupts_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_Sstatus_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _get_Vcsr_bits (v : (BitVec 3)) : (BitVec 3) :=
  (Sail.BitVec.extractLsb v (3 -i 1) 0)

def _get_Vtype_bits (v : (BitVec (2 ^ 3 * 8))) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 0)

def _get_htif_cmd_bits (v : (BitVec 64)) : (BitVec 64) :=
  (Sail.BitVec.extractLsb v (64 -i 1) 0)

def _set_CountSmcntrpmf_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_bits r v)

def _set_Counteren_bits (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 32)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counteren_bits r v)

def _set_Counterin_bits (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 32)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counterin_bits r v)

def _set_HpmEvent_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_bits r v)

def _set_MEnvcfg_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_bits r v)

def _set_Mcause_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mcause_bits r v)

def _set_Medeleg_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_bits r v)

def _set_Minterrupts_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_bits r v)

def _set_Mstatus_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_bits r v)

def _set_Mtvec_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mtvec_bits r v)

def _set_PTE_Ext_bits (r_ref : (RegisterRef (BitVec 10))) (v : (BitVec 10)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Ext_bits r v)

def _set_PTE_Flags_bits (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 8)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_bits r v)

def _set_Pmpcfg_ent_bits (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 8)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_bits r v)

def _set_SEnvcfg_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_bits r v)

def _set_Satp32_bits (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 32)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp32_bits r v)

def _set_Satp64_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp64_bits r v)

def _set_Sinterrupts_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sinterrupts_bits r v)

def _set_Sstatus_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_bits r v)

def _set_Vcsr_bits (r_ref : (RegisterRef (BitVec 3))) (v : (BitVec 3)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vcsr_bits r v)

def _set_Vtype_bits (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_bits r v)

def _set_htif_cmd_bits (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 64)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_htif_cmd_bits r v)

def _get_Misa_A (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _update_Misa_A (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _update_PTE_Flags_A (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _update_Pmpcfg_ent_A (v : (BitVec 8)) (x : (BitVec 2)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 4 3 x)

def _set_Misa_A (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_A r v)

def _get_PTE_Flags_A (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _get_Pmpcfg_ent_A (v : (BitVec 8)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 4 3)

def _set_PTE_Flags_A (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_A r v)

def _set_Pmpcfg_ent_A (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_A r v)

def _get_Misa_B (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _update_Misa_B (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Misa_B (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_B r v)

def _get_Misa_C (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _update_Misa_C (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _set_Misa_C (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_C r v)

def _get_Misa_D (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 3 3)

def _update_Misa_D (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 3 3 x)

def _update_PTE_Flags_D (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Misa_D (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_D r v)

def _get_PTE_Flags_D (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _set_PTE_Flags_D (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_D r v)

def _get_Misa_E (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 4 4)

def _update_Misa_E (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 4 4 x)

def _set_Misa_E (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_E r v)

def _get_Misa_F (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _update_Misa_F (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _set_Misa_F (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_F r v)

def _get_Misa_G (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _update_Misa_G (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _update_PTE_Flags_G (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _set_Misa_G (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_G r v)

def _get_PTE_Flags_G (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _set_PTE_Flags_G (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_G r v)

def _get_Misa_H (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_Misa_H (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Misa_H (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_H r v)

def _get_Misa_I (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 8 8)

def _update_Misa_I (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 8 8 x)

def _set_Misa_I (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_I r v)

def _get_Misa_J (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 9 9)

def _update_Misa_J (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 9 9 x)

def _set_Misa_J (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_J r v)

def _get_Misa_K (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 10 10)

def _update_Misa_K (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 10 10 x)

def _set_Misa_K (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_K r v)

def _get_Misa_L (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 11 11)

def _update_Misa_L (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 11 11 x)

def _update_Pmpcfg_ent_L (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Misa_L (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_L r v)

def _get_Pmpcfg_ent_L (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _set_Pmpcfg_ent_L (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_L r v)

def _get_Misa_M (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 12 12)

def _update_Misa_M (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 12 12 x)

def _set_Misa_M (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_M r v)

def _get_Misa_MXL (v : (BitVec (2 ^ 3 * 8))) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 2))

def _update_Misa_MXL (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 2)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 2) x)

def _set_Misa_MXL (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_MXL r v)

def _get_Misa_N (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 13 13)

def _update_Misa_N (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 13 13 x)

def _update_PTE_Ext_N (v : (BitVec 10)) (x : (BitVec 1)) : (BitVec 10) :=
  (Sail.BitVec.updateSubrange v 9 9 x)

def _set_Misa_N (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_N r v)

def _get_PTE_Ext_N (v : (BitVec 10)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 9 9)

def _set_PTE_Ext_N (r_ref : (RegisterRef (BitVec 10))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Ext_N r v)

def _get_Misa_O (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 14 14)

def _update_Misa_O (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 14 14 x)

def _set_Misa_O (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_O r v)

def _get_Misa_P (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 15 15)

def _update_Misa_P (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 15 15 x)

def _set_Misa_P (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_P r v)

def _get_Misa_Q (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 16 16)

def _update_Misa_Q (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 16 16 x)

def _set_Misa_Q (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_Q r v)

def _get_Misa_R (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 17 17)

def _update_Misa_R (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 17 17 x)

def _update_PTE_Flags_R (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _update_Pmpcfg_ent_R (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_Misa_R (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_R r v)

def _get_PTE_Flags_R (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _get_Pmpcfg_ent_R (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _set_PTE_Flags_R (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_R r v)

def _set_Pmpcfg_ent_R (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_R r v)

def _get_Misa_S (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 18 18)

def _update_Misa_S (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 18 18 x)

def _set_Misa_S (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_S r v)

def _get_Misa_T (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 19 19)

def _update_Misa_T (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 19 19 x)

def _set_Misa_T (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_T r v)

def _get_Misa_U (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 20 20)

def _update_Misa_U (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 20 20 x)

def _update_PTE_Flags_U (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 4 4 x)

def _set_Misa_U (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_U r v)

def _get_PTE_Flags_U (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 4 4)

def _set_PTE_Flags_U (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_U r v)

def _get_Misa_V (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 21 21)

def _update_Misa_V (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 21 21 x)

def _update_PTE_Flags_V (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_Misa_V (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_V r v)

def _get_PTE_Flags_V (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _set_PTE_Flags_V (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_V r v)

def _get_Misa_W (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 22 22)

def _update_Misa_W (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 22 22 x)

def _update_PTE_Flags_W (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _update_Pmpcfg_ent_W (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Misa_W (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_W r v)

def _get_PTE_Flags_W (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _get_Pmpcfg_ent_W (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _set_PTE_Flags_W (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_W r v)

def _set_Pmpcfg_ent_W (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_W r v)

def _get_Misa_X (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 23 23)

def _update_Misa_X (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 23 23 x)

def _update_PTE_Flags_X (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 3 3 x)

def _update_Pmpcfg_ent_X (v : (BitVec 8)) (x : (BitVec 1)) : (BitVec 8) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _set_Misa_X (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_X r v)

def _get_PTE_Flags_X (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 3 3)

def _get_Pmpcfg_ent_X (v : (BitVec 8)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _set_PTE_Flags_X (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Flags_X r v)

def _set_Pmpcfg_ent_X (r_ref : (RegisterRef (BitVec 8))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Pmpcfg_ent_X r v)

def _get_Misa_Y (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 24 24)

def _update_Misa_Y (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 24 24 x)

def _set_Misa_Y (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_Y r v)

def _get_Misa_Z (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 25 25)

def _update_Misa_Z (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 25 25 x)

def _set_Misa_Z (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Misa_Z r v)

def ext_veto_disable_C (_ : Unit) : Bool :=
  false

def legalize_misa (m : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let v := (Mk_Misa v)
  if (Bool.or (not (sys_enable_writable_misa ()))
       (Bool.and (BEq.beq (_get_Misa_C v) (0b0 : (BitVec 1)))
         (Bool.or (BEq.beq (BitVec.access (← readReg nextPC) 1) 1#1) (ext_veto_disable_C ()))))
  then (pure m)
  else
    let m :=
      if (not (sys_enable_rvc ()))
      then m
      else (_update_Misa_C m (_get_Misa_C v))
    if (not (sys_enable_fdext ()))
    then (pure m)
    else
      (pure (_update_Misa_D (_update_Misa_F m (_get_Misa_F v)) ((_get_Misa_D v) &&& (_get_Misa_F v))))

def sys_enable_user (_ : Unit) : Bool :=
  true

def sys_enable_supervisor (_ : Unit) : Bool :=
  true

def Mk_Mstatus (v : (BitVec 64)) : (BitVec 64) :=
  v

def _update_Mstatus_SXL (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 35 34 x)

def _update_Mstatus_UXL (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 33 32 x)

def _get_Mstatus_VS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 10 9)

def sys_enable_sscofpmf (_ : Unit) : Bool :=
  true

def extensionEnabled (merge_var : extension) : SailM Bool := do
  match merge_var with
  | Ext_Sstc => (pure (sys_enable_sstc ()))
  | Ext_U => (pure (BEq.beq (_get_Misa_U (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_S => (pure (BEq.beq (_get_Misa_S (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_V =>
    (pure (Bool.and (BEq.beq (_get_Misa_V (← readReg misa)) (0b1 : (BitVec 1)))
        (bne (_get_Mstatus_VS (← readReg mstatus)) (0b00 : (BitVec 2)))))
  | Ext_Zihpm => (pure true)
  | Ext_Sscofpmf => (pure (Bool.and (sys_enable_sscofpmf ()) (← (extensionEnabled Ext_Zihpm))))
  | Ext_Zkr => (pure true)
  | Ext_Zicntr => (pure true)
  | Ext_Smcntrpmf => (pure true)
  | Ext_Svnapot => (pure false)
  | Ext_Svpbmt => (pure false)
  | Ext_C => (pure (BEq.beq (_get_Misa_C (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_Zca => (extensionEnabled Ext_C)
  | Ext_Zifencei => (pure true)
  | Ext_Zabha => (pure true)
  | Ext_Zalrsc => (pure (BEq.beq (_get_Misa_A (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_Zaamo => (pure (BEq.beq (_get_Misa_A (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_M => (pure (BEq.beq (_get_Misa_M (← readReg misa)) (0b1 : (BitVec 1))))
  | Ext_Zmmul => (pure true)
  | _ =>
    assert false "Pattern match failure at riscv_insts_mext.sail:15.0-15.50"
    throw Error.Exit

def lowest_supported_privLevel (_ : Unit) : SailM Privilege := do
  if (← (extensionEnabled Ext_U))
  then (pure User)
  else (pure Machine)

def have_privLevel (priv : (BitVec 2)) : SailM Bool := do
  let b__0 := priv
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then (extensionEnabled Ext_U)
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then (extensionEnabled Ext_S)
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then (pure false)
      else (pure true)

def undefined_Mstatus (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def _get_Mstatus_FS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 14 13)

def _update_Mstatus_FS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 14 13 x)

def _update_Sstatus_FS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 14 13 x)

def _set_Mstatus_FS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_FS r v)

def _get_Sstatus_FS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 14 13)

def _set_Sstatus_FS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_FS r v)

def _get_Mstatus_MBE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 37 37)

def _update_Mstatus_MBE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 37 37 x)

def _set_Mstatus_MBE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MBE r v)

def _get_Mstatus_MIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 3 3)

def _update_Mstatus_MIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 3 3 x)

def _set_Mstatus_MIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MIE r v)

def _get_Mstatus_MPIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_Mstatus_MPIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Mstatus_MPIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MPIE r v)

def _get_Mstatus_MPP (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 12 11)

def _update_Mstatus_MPP (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 12 11 x)

def _set_Mstatus_MPP (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MPP r v)

def _get_Mstatus_MPRV (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 17 17)

def _update_Mstatus_MPRV (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 17 17 x)

def _set_Mstatus_MPRV (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MPRV r v)

def _get_Mstatus_MXR (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 19 19)

def _update_Mstatus_MXR (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 19 19 x)

def _update_Sstatus_MXR (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 19 19 x)

def _set_Mstatus_MXR (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_MXR r v)

def _get_Sstatus_MXR (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 19 19)

def _set_Sstatus_MXR (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_MXR r v)

def _get_Mstatus_SBE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 36 36)

def _update_Mstatus_SBE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 36 36 x)

def _set_Mstatus_SBE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SBE r v)

def _get_Mstatus_SD (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1))

def _update_Mstatus_SD (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1) x)

def _update_Sstatus_SD (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1) x)

def _set_Mstatus_SD (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SD r v)

def _get_Sstatus_SD (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1))

def _set_Sstatus_SD (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_SD r v)

def _get_Mstatus_SIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _update_Mstatus_SIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _update_Sstatus_SIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Mstatus_SIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SIE r v)

def _get_Sstatus_SIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _set_Sstatus_SIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_SIE r v)

def _get_Mstatus_SPIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _update_Mstatus_SPIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _update_Sstatus_SPIE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _set_Mstatus_SPIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SPIE r v)

def _get_Sstatus_SPIE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _set_Sstatus_SPIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_SPIE r v)

def _get_Mstatus_SPP (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 8 8)

def _update_Mstatus_SPP (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 8 8 x)

def _update_Sstatus_SPP (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 8 8 x)

def _set_Mstatus_SPP (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SPP r v)

def _get_Sstatus_SPP (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 8 8)

def _set_Sstatus_SPP (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_SPP r v)

def _get_Mstatus_SUM (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 18 18)

def _update_Mstatus_SUM (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 18 18 x)

def _update_Sstatus_SUM (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 18 18 x)

def _set_Mstatus_SUM (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SUM r v)

def _get_Sstatus_SUM (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 18 18)

def _set_Sstatus_SUM (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_SUM r v)

def _get_Mstatus_SXL (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 35 34)

def _set_Mstatus_SXL (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_SXL r v)

def _get_Mstatus_TSR (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 22 22)

def _update_Mstatus_TSR (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 22 22 x)

def _set_Mstatus_TSR (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_TSR r v)

def _get_Mstatus_TVM (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 20 20)

def _update_Mstatus_TVM (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 20 20 x)

def _set_Mstatus_TVM (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_TVM r v)

def _get_Mstatus_TW (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 21 21)

def _update_Mstatus_TW (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 21 21 x)

def _set_Mstatus_TW (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_TW r v)

def _get_Mstatus_UXL (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 33 32)

def _update_Sstatus_UXL (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 33 32 x)

def _set_Mstatus_UXL (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_UXL r v)

def _get_Sstatus_UXL (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 33 32)

def _set_Sstatus_UXL (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_UXL r v)

def _update_Mstatus_VS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 10 9 x)

def _update_Sstatus_VS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 10 9 x)

def _set_Mstatus_VS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_VS r v)

def _get_Sstatus_VS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 10 9)

def _set_Sstatus_VS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_VS r v)

def _get_Mstatus_XS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 16 15)

def _update_Mstatus_XS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 16 15 x)

def _update_Sstatus_XS (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 16 15 x)

def _set_Mstatus_XS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mstatus_XS r v)

def _get_Sstatus_XS (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 16 15)

def _set_Sstatus_XS (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sstatus_XS r v)

def effectivePrivilege (t : (AccessType Unit)) (m : (BitVec 64)) (priv : Privilege) : SailM Privilege := do
  if (Bool.and (bne t (Execute ())) (BEq.beq (_get_Mstatus_MPRV m) (0b1 : (BitVec 1))))
  then (privLevel_of_bits (_get_Mstatus_MPP m))
  else (pure priv)

def get_mstatus_SXL (m : (BitVec 64)) : (BitVec 2) :=
  (_get_Mstatus_SXL m)

def get_mstatus_UXL (m : (BitVec 64)) : (BitVec 2) :=
  (_get_Mstatus_UXL m)

def legalize_mstatus (o : (BitVec 64)) (v : (BitVec 64)) : SailM (BitVec 64) := do
  let v := (Mk_Mstatus v)
  let o ← do
    (pure (_update_Mstatus_SIE
        (_update_Mstatus_MIE
          (_update_Mstatus_SPIE
            (_update_Mstatus_MPIE
              (_update_Mstatus_VS
                (_update_Mstatus_SPP
                  (_update_Mstatus_MPP
                    (_update_Mstatus_FS
                      (_update_Mstatus_XS
                        (_update_Mstatus_MPRV
                          (_update_Mstatus_SUM
                            (_update_Mstatus_MXR
                              (_update_Mstatus_TVM
                                (_update_Mstatus_TW
                                  (_update_Mstatus_TSR o
                                    (← do
                                      if (← (extensionEnabled Ext_S))
                                      then (pure (_get_Mstatus_TSR v))
                                      else (pure (0b0 : (BitVec 1)))))
                                  (← do
                                    if (← (extensionEnabled Ext_U))
                                    then (pure (_get_Mstatus_TW v))
                                    else (pure (0b0 : (BitVec 1)))))
                                (← do
                                  if (← (extensionEnabled Ext_S))
                                  then (pure (_get_Mstatus_TVM v))
                                  else (pure (0b0 : (BitVec 1)))))
                              (← do
                                if (← (extensionEnabled Ext_S))
                                then (pure (_get_Mstatus_MXR v))
                                else (pure (0b0 : (BitVec 1)))))
                            (← do
                              if (← (extensionEnabled Ext_S))
                              then (pure (_get_Mstatus_SUM v))
                              else (pure (0b0 : (BitVec 1)))))
                          (← do
                            if (← (extensionEnabled Ext_U))
                            then (pure (_get_Mstatus_MPRV v))
                            else (pure (0b0 : (BitVec 1))))) (extStatus_to_bits Off))
                      (if (sys_enable_zfinx ())
                      then (extStatus_to_bits Off)
                      else (_get_Mstatus_FS v)))
                    (← do
                      if (← (have_privLevel (_get_Mstatus_MPP v)))
                      then (pure (_get_Mstatus_MPP v))
                      else (pure (privLevel_to_bits (← (lowest_supported_privLevel ()))))))
                  (← do
                    if (← (extensionEnabled Ext_S))
                    then (pure (_get_Mstatus_SPP v))
                    else (pure (0b0 : (BitVec 1))))) (_get_Mstatus_VS v)) (_get_Mstatus_MPIE v))
            (← do
              if (← (extensionEnabled Ext_S))
              then (pure (_get_Mstatus_SPIE v))
              else (pure (0b0 : (BitVec 1))))) (_get_Mstatus_MIE v))
        (← do
          if (← (extensionEnabled Ext_S))
          then (pure (_get_Mstatus_SIE v))
          else (pure (0b0 : (BitVec 1))))))
  let dirty :=
    (Bool.or (BEq.beq (extStatus_of_bits (_get_Mstatus_FS o)) Dirty)
      (Bool.or (BEq.beq (extStatus_of_bits (_get_Mstatus_XS o)) Dirty)
        (BEq.beq (extStatus_of_bits (_get_Mstatus_VS o)) Dirty)))
  (pure (_update_Mstatus_SD o (bool_to_bits dirty)))

def cur_architecture (_ : Unit) : SailM Architecture := do
  let a ← (( do
    match (← readReg cur_privilege) with
    | Machine => (pure (_get_Misa_MXL (← readReg misa)))
    | Supervisor => (pure (get_mstatus_SXL (← readReg mstatus)))
    | User => (pure (get_mstatus_UXL (← readReg mstatus))) ) : SailM arch_xlen )
  (architecture_backwards a)

def in32BitMode (_ : Unit) : SailM Bool := do
  (pure (BEq.beq (← (cur_architecture ())) RV32))

def undefined_MEnvcfg (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_MEnvcfg (v : (BitVec 64)) : (BitVec 64) :=
  v

def _get_MEnvcfg_CBCFE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _update_MEnvcfg_CBCFE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _update_SEnvcfg_CBCFE (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _set_MEnvcfg_CBCFE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_CBCFE r v)

def _get_SEnvcfg_CBCFE (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _set_SEnvcfg_CBCFE (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_CBCFE r v)

def _get_MEnvcfg_CBIE (v : (BitVec 64)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 5 4)

def _update_MEnvcfg_CBIE (v : (BitVec 64)) (x : (BitVec 2)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 5 4 x)

def _update_SEnvcfg_CBIE (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 2)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 5 4 x)

def _set_MEnvcfg_CBIE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_CBIE r v)

def _get_SEnvcfg_CBIE (v : (BitVec (2 ^ 3 * 8))) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 5 4)

def _set_SEnvcfg_CBIE (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_CBIE r v)

def _get_MEnvcfg_CBZE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_MEnvcfg_CBZE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _update_SEnvcfg_CBZE (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_MEnvcfg_CBZE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_CBZE r v)

def _get_SEnvcfg_CBZE (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _set_SEnvcfg_CBZE (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_CBZE r v)

def _get_MEnvcfg_FIOM (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _update_MEnvcfg_FIOM (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _update_SEnvcfg_FIOM (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_MEnvcfg_FIOM (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_FIOM r v)

def _get_SEnvcfg_FIOM (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _set_SEnvcfg_FIOM (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_FIOM r v)

def _get_MEnvcfg_PBMTE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 62 62)

def _update_MEnvcfg_PBMTE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 62 62 x)

def _set_MEnvcfg_PBMTE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_PBMTE r v)

def _get_MEnvcfg_STCE (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 63 63)

def _update_MEnvcfg_STCE (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 63 63 x)

def _set_MEnvcfg_STCE (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_STCE r v)

def _get_MEnvcfg_wpri_0 (v : (BitVec 64)) : (BitVec 3) :=
  (Sail.BitVec.extractLsb v 3 1)

def _update_MEnvcfg_wpri_0 (v : (BitVec 64)) (x : (BitVec 3)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 3 1 x)

def _update_SEnvcfg_wpri_0 (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 3)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 3 1 x)

def _set_MEnvcfg_wpri_0 (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 3)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_wpri_0 r v)

def _get_SEnvcfg_wpri_0 (v : (BitVec (2 ^ 3 * 8))) : (BitVec 3) :=
  (Sail.BitVec.extractLsb v 3 1)

def _set_SEnvcfg_wpri_0 (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 3)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_SEnvcfg_wpri_0 r v)

def _get_MEnvcfg_wpri_1 (v : (BitVec 64)) : (BitVec 54) :=
  (Sail.BitVec.extractLsb v 61 8)

def _update_MEnvcfg_wpri_1 (v : (BitVec 64)) (x : (BitVec 54)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 61 8 x)

def _set_MEnvcfg_wpri_1 (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 54)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_MEnvcfg_wpri_1 r v)

def undefined_SEnvcfg (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_SEnvcfg (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def legalize_menvcfg (o : (BitVec 64)) (v : (BitVec 64)) : SailM (BitVec 64) := do
  let v := (Mk_MEnvcfg v)
  (pure (_update_MEnvcfg_STCE
      (_update_MEnvcfg_CBIE
        (_update_MEnvcfg_CBCFE
          (_update_MEnvcfg_CBZE
            (_update_MEnvcfg_FIOM o
              (if (sys_enable_writable_fiom ())
              then (_get_MEnvcfg_FIOM v)
              else (0b0 : (BitVec 1))))
            (← do
              if (← (extensionEnabled Ext_Zicboz))
              then (pure (_get_MEnvcfg_CBZE v))
              else (pure (0b0 : (BitVec 1)))))
          (← do
            if (← (extensionEnabled Ext_Zicbom))
            then (pure (_get_MEnvcfg_CBCFE v))
            else (pure (0b0 : (BitVec 1)))))
        (← do
          if (← (extensionEnabled Ext_Zicbom))
          then
            if (bne (_get_MEnvcfg_CBIE v) (0b10 : (BitVec 2)))
            then (pure (_get_MEnvcfg_CBIE v))
            else (pure (0b00 : (BitVec 2)))
          else (pure (0b00 : (BitVec 2)))))
      (← do
        if (← (extensionEnabled Ext_Sstc))
        then (pure (_get_MEnvcfg_STCE v))
        else (pure (0b0 : (BitVec 1))))))

def legalize_senvcfg (o : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let v := (Mk_SEnvcfg v)
  (pure (_update_SEnvcfg_CBIE
      (_update_SEnvcfg_CBCFE
        (_update_SEnvcfg_CBZE
          (_update_SEnvcfg_FIOM o
            (if (sys_enable_writable_fiom ())
            then (_get_SEnvcfg_FIOM v)
            else (0b0 : (BitVec 1))))
          (← do
            if (← (extensionEnabled Ext_Zicboz))
            then (pure (_get_SEnvcfg_CBZE v))
            else (pure (0b0 : (BitVec 1)))))
        (← do
          if (← (extensionEnabled Ext_Zicbom))
          then (pure (_get_SEnvcfg_CBCFE v))
          else (pure (0b0 : (BitVec 1)))))
      (← do
        if (← (extensionEnabled Ext_Zicbom))
        then
          if (bne (_get_SEnvcfg_CBIE v) (0b10 : (BitVec 2)))
          then (pure (_get_SEnvcfg_CBIE v))
          else (pure (0b00 : (BitVec 2)))
        else (pure (0b00 : (BitVec 2))))))

def is_fiom_active (_ : Unit) : SailM Bool := do
  match (← readReg cur_privilege) with
  | Machine => (pure false)
  | Supervisor => (pure (BEq.beq (_get_MEnvcfg_FIOM (← readReg menvcfg)) (0b1 : (BitVec 1))))
  | User =>
    (pure (BEq.beq
        ((_get_MEnvcfg_FIOM (← readReg menvcfg)) ||| (_get_SEnvcfg_FIOM (← readReg senvcfg)))
        (0b1 : (BitVec 1))))

def undefined_Minterrupts (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Minterrupts (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def _get_Minterrupts_MEI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 11 11)

def _update_Minterrupts_MEI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 11 11 x)

def _set_Minterrupts_MEI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_MEI r v)

def _get_Minterrupts_MSI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 3 3)

def _update_Minterrupts_MSI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 3 3 x)

def _set_Minterrupts_MSI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_MSI r v)

def _get_Minterrupts_MTI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_Minterrupts_MTI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Minterrupts_MTI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_MTI r v)

def _get_Minterrupts_SEI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 9 9)

def _update_Minterrupts_SEI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 9 9 x)

def _update_Sinterrupts_SEI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 9 9 x)

def _set_Minterrupts_SEI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_SEI r v)

def _get_Sinterrupts_SEI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 9 9)

def _set_Sinterrupts_SEI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sinterrupts_SEI r v)

def _get_Minterrupts_SSI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _update_Minterrupts_SSI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _update_Sinterrupts_SSI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Minterrupts_SSI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_SSI r v)

def _get_Sinterrupts_SSI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _set_Sinterrupts_SSI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sinterrupts_SSI r v)

def _get_Minterrupts_STI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _update_Minterrupts_STI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _update_Sinterrupts_STI (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _set_Minterrupts_STI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Minterrupts_STI r v)

def _get_Sinterrupts_STI (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _set_Sinterrupts_STI (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Sinterrupts_STI r v)

def legalize_mip (o : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let v := (Mk_Minterrupts v)
  (pure (_update_Minterrupts_STI
      (_update_Minterrupts_SSI
        (_update_Minterrupts_SEI o
          (← do
            if (← (extensionEnabled Ext_S))
            then (pure (_get_Minterrupts_SEI v))
            else (pure (0b0 : (BitVec 1)))))
        (← do
          if (← (extensionEnabled Ext_S))
          then (pure (_get_Minterrupts_SSI v))
          else (pure (0b0 : (BitVec 1)))))
      (← do
        if (← (extensionEnabled Ext_S))
        then
          if (Bool.and (← (extensionEnabled Ext_Sstc))
               (BEq.beq (_get_MEnvcfg_STCE (← readReg menvcfg)) (0b1 : (BitVec 1))))
          then (pure (_get_Minterrupts_STI o))
          else (pure (_get_Minterrupts_STI v))
        else (pure (0b0 : (BitVec 1))))))

def legalize_mie (o : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let v := (Mk_Minterrupts v)
  (pure (_update_Minterrupts_SSI
      (_update_Minterrupts_STI
        (_update_Minterrupts_SEI
          (_update_Minterrupts_MSI
            (_update_Minterrupts_MTI (_update_Minterrupts_MEI o (_get_Minterrupts_MEI v))
              (_get_Minterrupts_MTI v)) (_get_Minterrupts_MSI v))
          (← do
            if (← (extensionEnabled Ext_S))
            then (pure (_get_Minterrupts_SEI v))
            else (pure (0b0 : (BitVec 1)))))
        (← do
          if (← (extensionEnabled Ext_S))
          then (pure (_get_Minterrupts_STI v))
          else (pure (0b0 : (BitVec 1)))))
      (← do
        if (← (extensionEnabled Ext_S))
        then (pure (_get_Minterrupts_SSI v))
        else (pure (0b0 : (BitVec 1))))))

def legalize_mideleg (o : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  (_update_Minterrupts_MSI
    (_update_Minterrupts_MTI (_update_Minterrupts_MEI (Mk_Minterrupts v) (0b0 : (BitVec 1)))
      (0b0 : (BitVec 1))) (0b0 : (BitVec 1)))

def undefined_Medeleg (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_Medeleg (v : (BitVec 64)) : (BitVec 64) :=
  v

def _get_Medeleg_Breakpoint (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 3 3)

def _update_Medeleg_Breakpoint (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 3 3 x)

def _set_Medeleg_Breakpoint (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Breakpoint r v)

def _get_Medeleg_Fetch_Access_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _update_Medeleg_Fetch_Access_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Medeleg_Fetch_Access_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Fetch_Access_Fault r v)

def _get_Medeleg_Fetch_Addr_Align (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _update_Medeleg_Fetch_Addr_Align (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_Medeleg_Fetch_Addr_Align (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Fetch_Addr_Align r v)

def _get_Medeleg_Fetch_Page_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 12 12)

def _update_Medeleg_Fetch_Page_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 12 12 x)

def _set_Medeleg_Fetch_Page_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Fetch_Page_Fault r v)

def _get_Medeleg_Illegal_Instr (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _update_Medeleg_Illegal_Instr (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _set_Medeleg_Illegal_Instr (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Illegal_Instr r v)

def _get_Medeleg_Load_Access_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 5 5)

def _update_Medeleg_Load_Access_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 5 5 x)

def _set_Medeleg_Load_Access_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Load_Access_Fault r v)

def _get_Medeleg_Load_Addr_Align (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 4 4)

def _update_Medeleg_Load_Addr_Align (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 4 4 x)

def _set_Medeleg_Load_Addr_Align (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Load_Addr_Align r v)

def _get_Medeleg_Load_Page_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 13 13)

def _update_Medeleg_Load_Page_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 13 13 x)

def _set_Medeleg_Load_Page_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_Load_Page_Fault r v)

def _get_Medeleg_MEnvCall (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 11 11)

def _update_Medeleg_MEnvCall (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 11 11 x)

def _set_Medeleg_MEnvCall (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_MEnvCall r v)

def _get_Medeleg_SAMO_Access_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_Medeleg_SAMO_Access_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Medeleg_SAMO_Access_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_SAMO_Access_Fault r v)

def _get_Medeleg_SAMO_Addr_Align (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _update_Medeleg_SAMO_Addr_Align (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _set_Medeleg_SAMO_Addr_Align (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_SAMO_Addr_Align r v)

def _get_Medeleg_SAMO_Page_Fault (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 15 15)

def _update_Medeleg_SAMO_Page_Fault (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 15 15 x)

def _set_Medeleg_SAMO_Page_Fault (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_SAMO_Page_Fault r v)

def _get_Medeleg_SEnvCall (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 9 9)

def _update_Medeleg_SEnvCall (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 9 9 x)

def _set_Medeleg_SEnvCall (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_SEnvCall r v)

def _get_Medeleg_UEnvCall (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 8 8)

def _update_Medeleg_UEnvCall (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 8 8 x)

def _set_Medeleg_UEnvCall (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Medeleg_UEnvCall r v)

def legalize_medeleg (o : (BitVec 64)) (v : (BitVec 64)) : (BitVec 64) :=
  (_update_Medeleg_MEnvCall (Mk_Medeleg v) (0b0 : (BitVec 1)))

def undefined_Mtvec (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Mtvec (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def _get_Mtvec_Base (v : (BitVec (2 ^ 3 * 8))) : (BitVec 62) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) 2)

def _update_Mtvec_Base (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 62)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) 2 x)

def _set_Mtvec_Base (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 62)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mtvec_Base r v)

def _get_Mtvec_Mode (v : (BitVec (2 ^ 3 * 8))) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 1 0)

def _update_Mtvec_Mode (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 2)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 1 0 x)

def _update_Satp32_Mode (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 31 31 x)

def _update_Satp64_Mode (v : (BitVec 64)) (x : (BitVec 4)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 63 60 x)

def _set_Mtvec_Mode (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mtvec_Mode r v)

def _get_Satp32_Mode (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 31 31)

def _get_Satp64_Mode (v : (BitVec 64)) : (BitVec 4) :=
  (Sail.BitVec.extractLsb v 63 60)

def _set_Satp32_Mode (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp32_Mode r v)

def _set_Satp64_Mode (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 4)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp64_Mode r v)

def legalize_tvec (o : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let v := (Mk_Mtvec v)
  match (trapVectorMode_of_bits (_get_Mtvec_Mode v)) with
  | TV_Direct => v
  | TV_Vector => v
  | _ => (_update_Mtvec_Mode v (_get_Mtvec_Mode o))

def undefined_Mcause (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Mcause (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def _get_Mcause_Cause (v : (BitVec (2 ^ 3 * 8))) : (BitVec 63) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 2) 0)

def _update_Mcause_Cause (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 63)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 2) 0 x)

def _set_Mcause_Cause (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 63)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mcause_Cause r v)

def _get_Mcause_IsInterrupt (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1))

def _update_Mcause_IsInterrupt (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1) x)

def _set_Mcause_IsInterrupt (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Mcause_IsInterrupt r v)

def tvec_addr (m : (BitVec (2 ^ 3 * 8))) (c : (BitVec (2 ^ 3 * 8))) : (Option (BitVec (2 ^ 3 * 8))) :=
  let base : xlenbits := ((_get_Mtvec_Base m) ++ (0b00 : (BitVec 2)))
  match (trapVectorMode_of_bits (_get_Mtvec_Mode m)) with
  | TV_Direct => (some base)
  | TV_Vector =>
    if (BEq.beq (_get_Mcause_IsInterrupt c) (0b1 : (BitVec 1)))
    then (some (base + (shiftl (zero_extend (m := ((2 ^i 3) *i 8)) (_get_Mcause_Cause c)) 2)))
    else (some base)
  | TV_Reserved => none

def legalize_xepc (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  if (sys_enable_rvc ())
  then (BitVec.update v 0 0#1)
  else (Sail.BitVec.updateSubrange v 1 0 (zeros_implicit (n := (1 -i (0 -i 1)))))

def align_pc (addr : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  if (BEq.beq (_get_Misa_C (← readReg misa)) (0b1 : (BitVec 1)))
  then (pure (BitVec.update addr 0 0#1))
  else (pure (Sail.BitVec.updateSubrange addr 1 0 (zeros_implicit (n := (1 -i (0 -i 1))))))

def undefined_Counteren (_ : Unit) : SailM (BitVec 32) := do
  (undefined_bitvector 32)

def Mk_Counteren (v : (BitVec 32)) : (BitVec 32) :=
  v

def _get_Counteren_CY (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _update_Counteren_CY (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _update_Counterin_CY (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_Counteren_CY (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counteren_CY r v)

def _get_Counterin_CY (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _set_Counterin_CY (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counterin_CY r v)

def _get_Counteren_HPM (v : (BitVec 32)) : (BitVec 29) :=
  (Sail.BitVec.extractLsb v 31 3)

def _update_Counteren_HPM (v : (BitVec 32)) (x : (BitVec 29)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 31 3 x)

def _update_Counterin_HPM (v : (BitVec 32)) (x : (BitVec 29)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 31 3 x)

def _set_Counteren_HPM (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 29)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counteren_HPM r v)

def _get_Counterin_HPM (v : (BitVec 32)) : (BitVec 29) :=
  (Sail.BitVec.extractLsb v 31 3)

def _set_Counterin_HPM (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 29)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counterin_HPM r v)

def _get_Counteren_IR (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _update_Counteren_IR (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _update_Counterin_IR (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 2 2 x)

def _set_Counteren_IR (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counteren_IR r v)

def _get_Counterin_IR (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 2 2)

def _set_Counterin_IR (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counterin_IR r v)

def _get_Counteren_TM (v : (BitVec 32)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 1 1)

def _update_Counteren_TM (v : (BitVec 32)) (x : (BitVec 1)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 1 1 x)

def _set_Counteren_TM (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Counteren_TM r v)

def legalize_scounteren (c : (BitVec 32)) (v : (BitVec (2 ^ 3 * 8))) : (BitVec 32) :=
  let supported_counters :=
    ((Sail.BitVec.extractLsb (sys_writable_hpm_counters ()) 31 3) ++ (0b111 : (BitVec 3)))
  (Mk_Counteren ((Sail.BitVec.extractLsb v 31 0) &&& supported_counters))

def legalize_mcounteren (c : (BitVec 32)) (v : (BitVec (2 ^ 3 * 8))) : (BitVec 32) :=
  let supported_counters :=
    ((Sail.BitVec.extractLsb (sys_writable_hpm_counters ()) 31 3) ++ (0b111 : (BitVec 3)))
  (Mk_Counteren ((Sail.BitVec.extractLsb v 31 0) &&& supported_counters))

def undefined_Counterin (_ : Unit) : SailM (BitVec 32) := do
  (undefined_bitvector 32)

def Mk_Counterin (v : (BitVec 32)) : (BitVec 32) :=
  v

def legalize_mcountinhibit (c : (BitVec 32)) (v : (BitVec (2 ^ 3 * 8))) : (BitVec 32) :=
  let supported_counters :=
    ((Sail.BitVec.extractLsb (sys_writable_hpm_counters ()) 31 3) ++ (0b101 : (BitVec 3)))
  (Mk_Counterin ((Sail.BitVec.extractLsb v 31 0) &&& supported_counters))

def update_minstret (_ : Unit) : SailM Unit := do
  if (← readReg minstret_increment)
  then writeReg minstret (BitVec.addInt (← readReg minstret) 1)
  else (pure ())
  match (← readReg minstret_write) with
  | .some v => writeReg minstret (Sail.BitVec.updateSubrange (← readReg minstret) (xlen -i 1) 0 v)
  | none => (pure ())
  match (← readReg minstreth_write) with
  | .some v => writeReg minstret (Sail.BitVec.updateSubrange (← readReg minstret) 63 32 v)
  | none => (pure ())

def undefined_Sstatus (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_Sstatus (v : (BitVec 64)) : (BitVec 64) :=
  v

def lower_mstatus (m : (BitVec 64)) : (BitVec 64) :=
  let s := (Mk_Sstatus (zeros_implicit (n := 64)))
  (_update_Sstatus_SIE
    (_update_Sstatus_SPIE
      (_update_Sstatus_SPP
        (_update_Sstatus_VS
          (_update_Sstatus_FS
            (_update_Sstatus_XS
              (_update_Sstatus_SUM
                (_update_Sstatus_MXR
                  (_update_Sstatus_UXL (_update_Sstatus_SD s (_get_Mstatus_SD m))
                    (_get_Mstatus_UXL m)) (_get_Mstatus_MXR m)) (_get_Mstatus_SUM m))
              (_get_Mstatus_XS m)) (_get_Mstatus_FS m)) (_get_Mstatus_VS m)) (_get_Mstatus_SPP m))
      (_get_Mstatus_SPIE m)) (_get_Mstatus_SIE m))

def lift_sstatus (m : (BitVec 64)) (s : (BitVec 64)) : (BitVec 64) :=
  let dirty :=
    (Bool.or (BEq.beq (extStatus_of_bits (_get_Sstatus_FS s)) Dirty)
      (Bool.or (BEq.beq (extStatus_of_bits (_get_Sstatus_XS s)) Dirty)
        (BEq.beq (extStatus_of_bits (_get_Sstatus_VS s)) Dirty)))
  (_update_Mstatus_SIE
    (_update_Mstatus_SPIE
      (_update_Mstatus_SPP
        (_update_Mstatus_VS
          (_update_Mstatus_FS
            (_update_Mstatus_XS
              (_update_Mstatus_SUM
                (_update_Mstatus_MXR
                  (_update_Mstatus_UXL (_update_Mstatus_SD m (bool_to_bits dirty))
                    (_get_Sstatus_UXL s)) (_get_Sstatus_MXR s)) (_get_Sstatus_SUM s))
              (_get_Sstatus_XS s)) (_get_Sstatus_FS s)) (_get_Sstatus_VS s)) (_get_Sstatus_SPP s))
      (_get_Sstatus_SPIE s)) (_get_Sstatus_SIE s))

def legalize_sstatus (m : (BitVec 64)) (v : (BitVec (2 ^ 3 * 8))) : SailM (BitVec 64) := do
  (legalize_mstatus m (lift_sstatus m (Mk_Sstatus (zero_extend (m := 64) v))))

def undefined_Sinterrupts (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Sinterrupts (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def lower_mip (m : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let s : Sinterrupts := (Mk_Sinterrupts (zeros_implicit (n := 64)))
  (_update_Sinterrupts_SSI
    (_update_Sinterrupts_STI
      (_update_Sinterrupts_SEI s ((_get_Minterrupts_SEI m) &&& (_get_Minterrupts_SEI d)))
      ((_get_Minterrupts_STI m) &&& (_get_Minterrupts_STI d)))
    ((_get_Minterrupts_SSI m) &&& (_get_Minterrupts_SSI d)))

def lower_mie (m : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let s : Sinterrupts := (Mk_Sinterrupts (zeros_implicit (n := 64)))
  (_update_Sinterrupts_SSI
    (_update_Sinterrupts_STI
      (_update_Sinterrupts_SEI s ((_get_Minterrupts_SEI m) &&& (_get_Minterrupts_SEI d)))
      ((_get_Minterrupts_STI m) &&& (_get_Minterrupts_STI d)))
    ((_get_Minterrupts_SSI m) &&& (_get_Minterrupts_SSI d)))

def lift_sip (o : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) (s : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let m : Minterrupts := o
  if (BEq.beq (_get_Minterrupts_SSI d) (0b1 : (BitVec 1)))
  then (_update_Minterrupts_SSI m (_get_Sinterrupts_SSI s))
  else m

def legalize_sip (m : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  (lift_sip m d (Mk_Sinterrupts v))

def lift_sie (o : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) (s : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let m : Minterrupts := o
  (_update_Minterrupts_SSI
    (_update_Minterrupts_STI
      (_update_Minterrupts_SEI m
        (if (BEq.beq (_get_Minterrupts_SEI d) (0b1 : (BitVec 1)))
        then (_get_Sinterrupts_SEI s)
        else (_get_Minterrupts_SEI m)))
      (if (BEq.beq (_get_Minterrupts_STI d) (0b1 : (BitVec 1)))
      then (_get_Sinterrupts_STI s)
      else (_get_Minterrupts_STI m)))
    (if (BEq.beq (_get_Minterrupts_SSI d) (0b1 : (BitVec 1)))
    then (_get_Sinterrupts_SSI s)
    else (_get_Minterrupts_SSI m)))

def legalize_sie (m : (BitVec (2 ^ 3 * 8))) (d : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  (lift_sie m d (Mk_Sinterrupts v))

def undefined_Satp64 (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_Satp64 (v : (BitVec 64)) : (BitVec 64) :=
  v

def _get_Satp64_Asid (v : (BitVec 64)) : (BitVec 16) :=
  (Sail.BitVec.extractLsb v 59 44)

def _update_Satp64_Asid (v : (BitVec 64)) (x : (BitVec 16)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 59 44 x)

def _update_Satp32_Asid (v : (BitVec 32)) (x : (BitVec 9)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 30 22 x)

def _set_Satp64_Asid (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 16)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp64_Asid r v)

def _get_Satp32_Asid (v : (BitVec 32)) : (BitVec 9) :=
  (Sail.BitVec.extractLsb v 30 22)

def _set_Satp32_Asid (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 9)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp32_Asid r v)

def _get_Satp64_PPN (v : (BitVec 64)) : (BitVec 44) :=
  (Sail.BitVec.extractLsb v 43 0)

def _update_Satp64_PPN (v : (BitVec 64)) (x : (BitVec 44)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 43 0 x)

def _update_Satp32_PPN (v : (BitVec 32)) (x : (BitVec 22)) : (BitVec 32) :=
  (Sail.BitVec.updateSubrange v 21 0 x)

def _set_Satp64_PPN (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 44)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp64_PPN r v)

def _get_Satp32_PPN (v : (BitVec 32)) : (BitVec 22) :=
  (Sail.BitVec.extractLsb v 21 0)

def _set_Satp32_PPN (r_ref : (RegisterRef (BitVec 32))) (v : (BitVec 22)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Satp32_PPN r v)

def undefined_Satp32 (_ : Unit) : SailM (BitVec 32) := do
  (undefined_bitvector 32)

def Mk_Satp32 (v : (BitVec 32)) : (BitVec 32) :=
  v

def legalize_satp (arch : Architecture) (prev_value : (BitVec (2 ^ 3 * 8))) (written_value : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  let s := (Mk_Satp64 written_value)
  match (satpMode_of_bits arch (_get_Satp64_Mode s)) with
  | none => prev_value
  | .some _ => s

def get_vlenb (_ : Unit) : (BitVec (2 ^ 3 * 8)) :=
  (to_bits xlen (Int.tdiv (2 ^i (get_vlen_pow ())) 8))

def undefined_Vtype (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  (undefined_bitvector ((2 ^i 3) *i 8))

def Mk_Vtype (v : (BitVec 64)) : (BitVec (2 ^ 3 * 8)) :=
  v

def _get_Vtype_reserved (v : (BitVec (2 ^ 3 * 8))) : (BitVec 55) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 2) 8)

def _update_Vtype_reserved (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 55)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 2) 8 x)

def _update_PTE_Ext_reserved (v : (BitVec 10)) (x : (BitVec 7)) : (BitVec 10) :=
  (Sail.BitVec.updateSubrange v 6 0 x)

def _set_Vtype_reserved (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 55)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_reserved r v)

def _get_PTE_Ext_reserved (v : (BitVec 10)) : (BitVec 7) :=
  (Sail.BitVec.extractLsb v 6 0)

def _set_PTE_Ext_reserved (r_ref : (RegisterRef (BitVec 10))) (v : (BitVec 7)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Ext_reserved r v)

def _get_Vtype_vill (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1))

def _update_Vtype_vill (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v (((2 ^i 3) *i 8) -i 1) (((2 ^i 3) *i 8) -i 1) x)

def _set_Vtype_vill (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_vill r v)

def _get_Vtype_vlmul (v : (BitVec (2 ^ 3 * 8))) : (BitVec 3) :=
  (Sail.BitVec.extractLsb v 2 0)

def _update_Vtype_vlmul (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 3)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 2 0 x)

def _set_Vtype_vlmul (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 3)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_vlmul r v)

def _get_Vtype_vma (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 7 7)

def _update_Vtype_vma (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 7 7 x)

def _set_Vtype_vma (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_vma r v)

def _get_Vtype_vsew (v : (BitVec (2 ^ 3 * 8))) : (BitVec 3) :=
  (Sail.BitVec.extractLsb v 5 3)

def _update_Vtype_vsew (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 3)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 5 3 x)

def _set_Vtype_vsew (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 3)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_vsew r v)

def _get_Vtype_vta (v : (BitVec (2 ^ 3 * 8))) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 6 6)

def _update_Vtype_vta (v : (BitVec (2 ^ 3 * 8))) (x : (BitVec 1)) : (BitVec (2 ^ 3 * 8)) :=
  (Sail.BitVec.updateSubrange v 6 6 x)

def _set_Vtype_vta (r_ref : (RegisterRef (BitVec (2 ^ 3 * 8)))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vtype_vta r v)

def get_sew_pow (_ : Unit) : SailM Int := do
  let b__0 ← do (pure (_get_Vtype_vsew (← readReg vtype)))
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then (pure 3)
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then (pure 4)
    else
      if (BEq.beq b__0 (0b010 : (BitVec 3)))
      then (pure 5)
      else
        if (BEq.beq b__0 (0b011 : (BitVec 3)))
        then (pure 6)
        else
          assert false "invalid vsew field in vtype"
          throw Error.Exit

def get_sew (_ : Unit) : SailM Int := do
  match (← (get_sew_pow ())) with
  | 3 => (pure 8)
  | 4 => (pure 16)
  | 5 => (pure 32)
  | 6 => (pure 64)
  | _ =>
    (internal_error "riscv_sys_regs.sail" 978 "invalid SEW")
    (pure 8)

def get_sew_bytes (_ : Unit) : SailM Int := do
  match (← (get_sew_pow ())) with
  | 3 => (pure 1)
  | 4 => (pure 2)
  | 5 => (pure 4)
  | 6 => (pure 8)
  | _ =>
    (internal_error "riscv_sys_regs.sail" 989 "invalid SEW")
    (pure 1)

def get_lmul_pow (_ : Unit) : SailM Int := do
  let b__0 ← do (pure (_get_Vtype_vlmul (← readReg vtype)))
  if (BEq.beq b__0 (0b101 : (BitVec 3)))
  then (pure (-3))
  else
    if (BEq.beq b__0 (0b110 : (BitVec 3)))
    then (pure (-2))
    else
      if (BEq.beq b__0 (0b111 : (BitVec 3)))
      then (pure (-1))
      else
        if (BEq.beq b__0 (0b000 : (BitVec 3)))
        then (pure 0)
        else
          if (BEq.beq b__0 (0b001 : (BitVec 3)))
          then (pure 1)
          else
            if (BEq.beq b__0 (0b010 : (BitVec 3)))
            then (pure 2)
            else
              if (BEq.beq b__0 (0b011 : (BitVec 3)))
              then (pure 3)
              else
                assert false "invalid vlmul field in vtype"
                throw Error.Exit

def undefined_agtype (_ : Unit) : SailM agtype := do
  (internal_pick [UNDISTURBED, AGNOSTIC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def agtype_of_num (arg_ : Nat) : agtype :=
  match arg_ with
  | 0 => UNDISTURBED
  | _ => AGNOSTIC

def num_of_agtype (arg_ : agtype) : Int :=
  match arg_ with
  | UNDISTURBED => 0
  | AGNOSTIC => 1

def decode_agtype (ag : (BitVec 1)) : agtype :=
  let b__0 := ag
  if (BEq.beq b__0 (0b0 : (BitVec 1)))
  then UNDISTURBED
  else AGNOSTIC

def get_vtype_vma (_ : Unit) : SailM agtype := do
  (pure (decode_agtype (_get_Vtype_vma (← readReg vtype))))

def get_vtype_vta (_ : Unit) : SailM agtype := do
  (pure (decode_agtype (_get_Vtype_vta (← readReg vtype))))

def undefined_PmpAddrMatchType (_ : Unit) : SailM PmpAddrMatchType := do
  (internal_pick [OFF, TOR, NA4, NAPOT])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def PmpAddrMatchType_of_num (arg_ : Nat) : PmpAddrMatchType :=
  match arg_ with
  | 0 => OFF
  | 1 => TOR
  | 2 => NA4
  | _ => NAPOT

def num_of_PmpAddrMatchType (arg_ : PmpAddrMatchType) : Int :=
  match arg_ with
  | OFF => 0
  | TOR => 1
  | NA4 => 2
  | NAPOT => 3

def pmpAddrMatchType_of_bits (bs : (BitVec 2)) : PmpAddrMatchType :=
  let b__0 := bs
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then OFF
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then TOR
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then NA4
      else NAPOT

def pmpAddrMatchType_to_bits (bs : PmpAddrMatchType) : (BitVec 2) :=
  match bs with
  | OFF => (0b00 : (BitVec 2))
  | TOR => (0b01 : (BitVec 2))
  | NA4 => (0b10 : (BitVec 2))
  | NAPOT => (0b11 : (BitVec 2))

def undefined_Pmpcfg_ent (_ : Unit) : SailM (BitVec 8) := do
  (undefined_bitvector 8)

def Mk_Pmpcfg_ent (v : (BitVec 8)) : (BitVec 8) :=
  v

/-- Type quantifiers: n : Nat, 0 ≤ n ∧ n ≤ 15 -/
def pmpReadCfgReg (n : Nat) : SailM (BitVec (2 ^ 3 * 8)) := do
  assert (BEq.beq (Int.emod n 2) 0) "Unexpected pmp config reg read"
  (pure ((GetElem?.getElem! (← readReg pmpcfg_n) ((n *i 4) +i 7)) ++ ((GetElem?.getElem!
          (← readReg pmpcfg_n) ((n *i 4) +i 6)) ++ ((GetElem?.getElem! (← readReg pmpcfg_n)
            ((n *i 4) +i 5)) ++ ((GetElem?.getElem! (← readReg pmpcfg_n) ((n *i 4) +i 4)) ++ ((GetElem?.getElem!
                (← readReg pmpcfg_n) ((n *i 4) +i 3)) ++ ((GetElem?.getElem!
                  (← readReg pmpcfg_n) ((n *i 4) +i 2)) ++ ((GetElem?.getElem!
                    (← readReg pmpcfg_n) ((n *i 4) +i 1)) ++ (GetElem?.getElem!
                    (← readReg pmpcfg_n) ((n *i 4) +i 0))))))))))

/-- Type quantifiers: n : Nat, 0 ≤ n ∧ n ≤ 63 -/
def pmpReadAddrReg (n : Nat) : SailM (BitVec (2 ^ 3 * 8)) := do
  let G := (sys_pmp_grain ())
  let match_type ← do (pure (_get_Pmpcfg_ent_A (GetElem?.getElem! (← readReg pmpcfg_n) n)))
  let addr ← do (pure (GetElem?.getElem! (← readReg pmpaddr_n) n))
  match (BitVec.access match_type 1) with
  | 1#1 =>
    if (G ≥b 2)
    then
      let mask : xlenbits :=
        (zero_extend (m := ((2 ^i 3) *i 8)) (ones (n := (Min.min (G -i 1) xlen))))
      (pure (addr ||| mask))
    else (pure addr)
  | 0#1 =>
    if (G ≥b 1)
    then
      let mask : xlenbits := (zero_extend (m := ((2 ^i 3) *i 8)) (ones (n := (Min.min G xlen))))
      (pure (addr &&& (Complement.complement mask)))
    else (pure addr)
  | _ => (pure addr)

def pmpLocked (cfg : (BitVec 8)) : Bool :=
  (BEq.beq (_get_Pmpcfg_ent_L cfg) (0b1 : (BitVec 1)))

def pmpTORLocked (cfg : (BitVec 8)) : Bool :=
  (Bool.and (BEq.beq (_get_Pmpcfg_ent_L cfg) (0b1 : (BitVec 1)))
    (BEq.beq (pmpAddrMatchType_of_bits (_get_Pmpcfg_ent_A cfg)) TOR))

/-- Type quantifiers: n : Nat, 0 ≤ n ∧ n ≤ 63 -/
def pmpWriteCfg (n : Nat) (cfg : (BitVec 8)) (v : (BitVec 8)) : (BitVec 8) :=
  if (pmpLocked cfg)
  then cfg
  else
    let cfg := (Mk_Pmpcfg_ent (v &&& (0x9F : (BitVec 8))))
    let cfg :=
      if (Bool.and (BEq.beq (_get_Pmpcfg_ent_W cfg) (0b1 : (BitVec 1)))
           (BEq.beq (_get_Pmpcfg_ent_R cfg) (0b0 : (BitVec 1))))
      then
        (_update_Pmpcfg_ent_R
          (_update_Pmpcfg_ent_W (_update_Pmpcfg_ent_X cfg (0b0 : (BitVec 1))) (0b0 : (BitVec 1)))
          (0b0 : (BitVec 1)))
      else cfg
    if (Bool.and ((sys_pmp_grain ()) ≥b 1)
         (BEq.beq (pmpAddrMatchType_of_bits (_get_Pmpcfg_ent_A cfg)) NA4))
    then (_update_Pmpcfg_ent_A cfg (pmpAddrMatchType_to_bits OFF))
    else cfg

/-- Type quantifiers: n : Nat, 0 ≤ n ∧ n ≤ 15 -/
def pmpWriteCfgReg (n : Nat) (v : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  assert (BEq.beq (Int.emod n 2) 0) "Unexpected pmp config reg write"
  let loop_i_lower := 0
  let loop_i_upper := 7
  let mut loop_vars := ()
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let () := loop_vars
    loop_vars ← do
      let idx := ((n *i 4) +i i)
      writeReg pmpcfg_n (vectorUpdate (← readReg pmpcfg_n) idx
        (pmpWriteCfg idx (GetElem?.getElem! (← readReg pmpcfg_n) idx)
          (Sail.BitVec.extractLsb v ((8 *i i) +i 7) (8 *i i))))
  (pure loop_vars)

/-- Type quantifiers: k_ex101241# : Bool, k_ex101240# : Bool -/
def pmpWriteAddr (locked : Bool) (tor_locked : Bool) (reg : (BitVec (2 ^ 3 * 8))) (v : (BitVec (2 ^ 3 * 8))) : (BitVec (2 ^ 3 * 8)) :=
  if (Bool.or locked tor_locked)
  then reg
  else (zero_extend (m := ((2 ^i 3) *i 8)) (Sail.BitVec.extractLsb v 53 0))

/-- Type quantifiers: n : Nat, 0 ≤ n ∧ n ≤ 63 -/
def pmpWriteAddrReg (n : Nat) (v : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  writeReg pmpaddr_n (vectorUpdate (← readReg pmpaddr_n) n
    (pmpWriteAddr (pmpLocked (GetElem?.getElem! (← readReg pmpcfg_n) n))
      (← do
        if ((n +i 1) <b 64)
        then (pure (pmpTORLocked (GetElem?.getElem! (← readReg pmpcfg_n) (n +i 1))))
        else (pure false)) (GetElem?.getElem! (← readReg pmpaddr_n) n) v))

def pmpAddrRange (cfg : (BitVec 8)) (pmpaddr : (BitVec (2 ^ 3 * 8))) (prev_pmpaddr : (BitVec (2 ^ 3 * 8))) : SailM (Option ((BitVec (2 ^ 3 * 8)) × (BitVec (2 ^ 3 * 8)))) := do
  match (pmpAddrMatchType_of_bits (_get_Pmpcfg_ent_A cfg)) with
  | OFF => (pure none)
  | TOR => (pure (some (prev_pmpaddr, pmpaddr)))
  | NA4 =>
    assert ((sys_pmp_grain ()) <b 1) "NA4 cannot be selected when PMP grain G >= 1."
    let lo := pmpaddr
    (pure (some (lo, (BitVec.addInt lo 1))))
  | NAPOT =>
    let mask := (pmpaddr ^^^ (BitVec.addInt pmpaddr 1))
    let lo := (pmpaddr &&& (Complement.complement mask))
    let len := (BitVec.addInt mask 1)
    (pure (some (lo, (lo + len))))

def pmpCheckRWX (ent : (BitVec 8)) (acc : (AccessType Unit)) : Bool :=
  match acc with
  | .Read _ => (BEq.beq (_get_Pmpcfg_ent_R ent) (0b1 : (BitVec 1)))
  | .Write _ => (BEq.beq (_get_Pmpcfg_ent_W ent) (0b1 : (BitVec 1)))
  | .ReadWrite _ =>
    (Bool.and (BEq.beq (_get_Pmpcfg_ent_R ent) (0b1 : (BitVec 1)))
      (BEq.beq (_get_Pmpcfg_ent_W ent) (0b1 : (BitVec 1))))
  | .Execute () => (BEq.beq (_get_Pmpcfg_ent_X ent) (0b1 : (BitVec 1)))

def undefined_pmpAddrMatch (_ : Unit) : SailM pmpAddrMatch := do
  (internal_pick [PMP_NoMatch, PMP_PartialMatch, PMP_Match])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def pmpAddrMatch_of_num (arg_ : Nat) : pmpAddrMatch :=
  match arg_ with
  | 0 => PMP_NoMatch
  | 1 => PMP_PartialMatch
  | _ => PMP_Match

def num_of_pmpAddrMatch (arg_ : pmpAddrMatch) : Int :=
  match arg_ with
  | PMP_NoMatch => 0
  | PMP_PartialMatch => 1
  | PMP_Match => 2

def pmpMatchAddr (typ_0 : physaddr) (width : (BitVec (2 ^ 3 * 8))) (rng : (Option ((BitVec (2 ^ 3 * 8)) × (BitVec (2 ^ 3 * 8))))) : pmpAddrMatch :=
  let .physaddr addr : physaddr := typ_0
  match rng with
  | none => PMP_NoMatch
  | .some (lo, hi) =>
    let addr := (BitVec.toNat addr)
    let width := (BitVec.toNat width)
    let lo := ((BitVec.toNat lo) *i 4)
    let hi := ((BitVec.toNat hi) *i 4)
    if (hi ≤b lo)
    then PMP_NoMatch
    else
      if (Bool.or ((addr +i width) ≤b lo) (hi ≤b addr))
      then PMP_NoMatch
      else
        if (Bool.and (lo ≤b addr) ((addr +i width) ≤b hi))
        then PMP_Match
        else PMP_PartialMatch

def undefined_pmpMatch (_ : Unit) : SailM pmpMatch := do
  (internal_pick [PMP_Success, PMP_Continue, PMP_Fail])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def pmpMatch_of_num (arg_ : Nat) : pmpMatch :=
  match arg_ with
  | 0 => PMP_Success
  | 1 => PMP_Continue
  | _ => PMP_Fail

def num_of_pmpMatch (arg_ : pmpMatch) : Int :=
  match arg_ with
  | PMP_Success => 0
  | PMP_Continue => 1
  | PMP_Fail => 2

def pmpMatchEntry (addr : physaddr) (width : (BitVec (2 ^ 3 * 8))) (acc : (AccessType Unit)) (priv : Privilege) (ent : (BitVec 8)) (pmpaddr : (BitVec (2 ^ 3 * 8))) (prev_pmpaddr : (BitVec (2 ^ 3 * 8))) : SailM pmpMatch := do
  let rng ← do (pmpAddrRange ent pmpaddr prev_pmpaddr)
  match (pmpMatchAddr addr width rng) with
  | PMP_NoMatch => (pure PMP_Continue)
  | PMP_PartialMatch => (pure PMP_Fail)
  | PMP_Match =>
    if (Bool.or (pmpCheckRWX ent acc) (Bool.and (BEq.beq priv Machine) (not (pmpLocked ent))))
    then (pure PMP_Success)
    else (pure PMP_Fail)

def accessToFault (acc : (AccessType Unit)) : ExceptionType :=
  match acc with
  | .Read _ => (E_Load_Access_Fault ())
  | .Write _ => (E_SAMO_Access_Fault ())
  | .ReadWrite _ => (E_SAMO_Access_Fault ())
  | .Execute () => (E_Fetch_Access_Fault ())

/-- Type quantifiers: width : Nat, width > 0 -/
def pmpCheck (addr : physaddr) (width : Nat) (acc : (AccessType Unit)) (priv : Privilege) : SailM (Option ExceptionType) := SailME.run do
  let width : xlenbits := (to_bits xlen width)
  let loop_i_lower := 0
  let loop_i_upper := 63
  let mut loop_vars := ()
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let () := loop_vars
    loop_vars ← do
      let prev_pmpaddr ← do
        if (i >b 0)
        then (pmpReadAddrReg (i -i 1))
        else (pure (zeros_implicit (n := ((2 ^i 3) *i 8))))
      match (← (pmpMatchEntry addr width acc priv (GetElem?.getElem! (← readReg pmpcfg_n) i)
          (← (pmpReadAddrReg i)) prev_pmpaddr)) with
      | PMP_Success => throw (none : (Option ExceptionType))
      | PMP_Fail => throw ((some (accessToFault acc)) : (Option ExceptionType))
      | PMP_Continue => (pure ())
  (pure loop_vars)
  if (BEq.beq priv Machine)
  then (pure none)
  else (pure (some (accessToFault acc)))

def reset_pmp (_ : Unit) : SailM Unit := do
  assert (Bool.or (BEq.beq (sys_pmp_count ()) 0)
    ((Bool.or (BEq.beq (sys_pmp_count ()) 16) ((BEq.beq (sys_pmp_count ()) 64) : Bool)) : Bool)) "sys_pmp_count() must be 0, 16, or 64"
  let loop_i_lower := 0
  let loop_i_upper := 63
  let mut loop_vars := ()
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let () := loop_vars
    loop_vars ← do
      writeReg pmpcfg_n (vectorUpdate (← readReg pmpcfg_n) i
        (_update_Pmpcfg_ent_L
          (_update_Pmpcfg_ent_A (GetElem?.getElem! (← readReg pmpcfg_n) i)
            (pmpAddrMatchType_to_bits OFF)) (0b0 : (BitVec 1))))
  (pure loop_vars)

/-- Type quantifiers: k_ex101345# : Bool -/
def ext_check_CSR (csrno : (BitVec 12)) (p : Privilege) (isWrite : Bool) : Bool :=
  true

def ext_check_CSR_fail (_ : Unit) : Unit :=
  ()

def ext_fetch_check_pc (start_pc : (BitVec (2 ^ 3 * 8))) (pc : (BitVec (2 ^ 3 * 8))) : (Ext_FetchAddr_Check Unit) :=
  (Ext_FetchAddr_OK (virtaddr pc))

def ext_handle_fetch_check_error (err : Unit) : Unit :=
  ()

def ext_control_check_addr (pc : (BitVec (2 ^ 3 * 8))) : (Ext_ControlAddr_Check Unit) :=
  (Ext_ControlAddr_OK (virtaddr pc))

def ext_control_check_pc (pc : (BitVec (2 ^ 3 * 8))) : (Ext_ControlAddr_Check Unit) :=
  (Ext_ControlAddr_OK (virtaddr pc))

def ext_handle_control_check_error (err : Unit) : Unit :=
  ()

/-- Type quantifiers: width : Nat, 1 ≤ width ∧ width ≤ 4096 -/
def ext_data_get_addr (base : regidx) (offset : (BitVec (2 ^ 3 * 8))) (acc : (AccessType Unit)) (width : Nat) : SailM (Ext_DataAddr_Check Unit) := do
  let addr ← do (pure (virtaddr ((← (rX_bits base)) + offset)))
  (pure (Ext_DataAddr_OK addr))

def ext_handle_data_check_error (err : Unit) : Unit :=
  ()

/-- Type quantifiers: k_ex101351# : Bool, k_ex101350# : Bool, k_ex101349# : Bool, k_ex101348# : Bool, size
  : Nat, 0 < size ∧ size ≤ max_mem_access -/
def ext_check_phys_mem_read (access_type : (AccessType Unit)) (paddr : physaddr) (size : Nat) (aquire : Bool) (release : Bool) (reserved : Bool) (read_meta : Bool) : Ext_PhysAddr_Check :=
  (Ext_PhysAddr_OK ())

/-- Type quantifiers: size : Nat, 0 < size ∧ size ≤ max_mem_access -/
def ext_check_phys_mem_write (write_kind : write_kind) (paddr : physaddr) (size : Nat) (data : (BitVec (8 * size))) (metadata : Unit) : Ext_PhysAddr_Check :=
  (Ext_PhysAddr_OK ())

def undefined_vvfunct6 (_ : Unit) : SailM vvfunct6 := do
  (internal_pick
    [VV_VADD, VV_VSUB, VV_VMINU, VV_VMIN, VV_VMAXU, VV_VMAX, VV_VAND, VV_VOR, VV_VXOR, VV_VRGATHER, VV_VRGATHEREI16, VV_VSADDU, VV_VSADD, VV_VSSUBU, VV_VSSUB, VV_VSLL, VV_VSMUL, VV_VSRL, VV_VSRA, VV_VSSRL, VV_VSSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 20 -/
def vvfunct6_of_num (arg_ : Nat) : vvfunct6 :=
  match arg_ with
  | 0 => VV_VADD
  | 1 => VV_VSUB
  | 2 => VV_VMINU
  | 3 => VV_VMIN
  | 4 => VV_VMAXU
  | 5 => VV_VMAX
  | 6 => VV_VAND
  | 7 => VV_VOR
  | 8 => VV_VXOR
  | 9 => VV_VRGATHER
  | 10 => VV_VRGATHEREI16
  | 11 => VV_VSADDU
  | 12 => VV_VSADD
  | 13 => VV_VSSUBU
  | 14 => VV_VSSUB
  | 15 => VV_VSLL
  | 16 => VV_VSMUL
  | 17 => VV_VSRL
  | 18 => VV_VSRA
  | 19 => VV_VSSRL
  | _ => VV_VSSRA

def num_of_vvfunct6 (arg_ : vvfunct6) : Int :=
  match arg_ with
  | VV_VADD => 0
  | VV_VSUB => 1
  | VV_VMINU => 2
  | VV_VMIN => 3
  | VV_VMAXU => 4
  | VV_VMAX => 5
  | VV_VAND => 6
  | VV_VOR => 7
  | VV_VXOR => 8
  | VV_VRGATHER => 9
  | VV_VRGATHEREI16 => 10
  | VV_VSADDU => 11
  | VV_VSADD => 12
  | VV_VSSUBU => 13
  | VV_VSSUB => 14
  | VV_VSLL => 15
  | VV_VSMUL => 16
  | VV_VSRL => 17
  | VV_VSRA => 18
  | VV_VSSRL => 19
  | VV_VSSRA => 20

def undefined_vvcmpfunct6 (_ : Unit) : SailM vvcmpfunct6 := do
  (internal_pick [VVCMP_VMSEQ, VVCMP_VMSNE, VVCMP_VMSLTU, VVCMP_VMSLT, VVCMP_VMSLEU, VVCMP_VMSLE])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def vvcmpfunct6_of_num (arg_ : Nat) : vvcmpfunct6 :=
  match arg_ with
  | 0 => VVCMP_VMSEQ
  | 1 => VVCMP_VMSNE
  | 2 => VVCMP_VMSLTU
  | 3 => VVCMP_VMSLT
  | 4 => VVCMP_VMSLEU
  | _ => VVCMP_VMSLE

def num_of_vvcmpfunct6 (arg_ : vvcmpfunct6) : Int :=
  match arg_ with
  | VVCMP_VMSEQ => 0
  | VVCMP_VMSNE => 1
  | VVCMP_VMSLTU => 2
  | VVCMP_VMSLT => 3
  | VVCMP_VMSLEU => 4
  | VVCMP_VMSLE => 5

def undefined_vvmfunct6 (_ : Unit) : SailM vvmfunct6 := do
  (internal_pick [VVM_VMADC, VVM_VMSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vvmfunct6_of_num (arg_ : Nat) : vvmfunct6 :=
  match arg_ with
  | 0 => VVM_VMADC
  | _ => VVM_VMSBC

def num_of_vvmfunct6 (arg_ : vvmfunct6) : Int :=
  match arg_ with
  | VVM_VMADC => 0
  | VVM_VMSBC => 1

def undefined_vvmcfunct6 (_ : Unit) : SailM vvmcfunct6 := do
  (internal_pick [VVMC_VMADC, VVMC_VMSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vvmcfunct6_of_num (arg_ : Nat) : vvmcfunct6 :=
  match arg_ with
  | 0 => VVMC_VMADC
  | _ => VVMC_VMSBC

def num_of_vvmcfunct6 (arg_ : vvmcfunct6) : Int :=
  match arg_ with
  | VVMC_VMADC => 0
  | VVMC_VMSBC => 1

def undefined_vvmsfunct6 (_ : Unit) : SailM vvmsfunct6 := do
  (internal_pick [VVMS_VADC, VVMS_VSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vvmsfunct6_of_num (arg_ : Nat) : vvmsfunct6 :=
  match arg_ with
  | 0 => VVMS_VADC
  | _ => VVMS_VSBC

def num_of_vvmsfunct6 (arg_ : vvmsfunct6) : Int :=
  match arg_ with
  | VVMS_VADC => 0
  | VVMS_VSBC => 1

def undefined_vxmfunct6 (_ : Unit) : SailM vxmfunct6 := do
  (internal_pick [VXM_VMADC, VXM_VMSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vxmfunct6_of_num (arg_ : Nat) : vxmfunct6 :=
  match arg_ with
  | 0 => VXM_VMADC
  | _ => VXM_VMSBC

def num_of_vxmfunct6 (arg_ : vxmfunct6) : Int :=
  match arg_ with
  | VXM_VMADC => 0
  | VXM_VMSBC => 1

def undefined_vxmcfunct6 (_ : Unit) : SailM vxmcfunct6 := do
  (internal_pick [VXMC_VMADC, VXMC_VMSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vxmcfunct6_of_num (arg_ : Nat) : vxmcfunct6 :=
  match arg_ with
  | 0 => VXMC_VMADC
  | _ => VXMC_VMSBC

def num_of_vxmcfunct6 (arg_ : vxmcfunct6) : Int :=
  match arg_ with
  | VXMC_VMADC => 0
  | VXMC_VMSBC => 1

def undefined_vxmsfunct6 (_ : Unit) : SailM vxmsfunct6 := do
  (internal_pick [VXMS_VADC, VXMS_VSBC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vxmsfunct6_of_num (arg_ : Nat) : vxmsfunct6 :=
  match arg_ with
  | 0 => VXMS_VADC
  | _ => VXMS_VSBC

def num_of_vxmsfunct6 (arg_ : vxmsfunct6) : Int :=
  match arg_ with
  | VXMS_VADC => 0
  | VXMS_VSBC => 1

def undefined_vimfunct6 (_ : Unit) : SailM vimfunct6 := do
  (internal_pick [VIM_VMADC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def vimfunct6_of_num (arg_ : Nat) : vimfunct6 :=
  match arg_ with
  | _ => VIM_VMADC

def num_of_vimfunct6 (arg_ : vimfunct6) : Int :=
  match arg_ with
  | VIM_VMADC => 0

def undefined_vimcfunct6 (_ : Unit) : SailM vimcfunct6 := do
  (internal_pick [VIMC_VMADC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def vimcfunct6_of_num (arg_ : Nat) : vimcfunct6 :=
  match arg_ with
  | _ => VIMC_VMADC

def num_of_vimcfunct6 (arg_ : vimcfunct6) : Int :=
  match arg_ with
  | VIMC_VMADC => 0

def undefined_vimsfunct6 (_ : Unit) : SailM vimsfunct6 := do
  (internal_pick [VIMS_VADC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 0 -/
def vimsfunct6_of_num (arg_ : Nat) : vimsfunct6 :=
  match arg_ with
  | _ => VIMS_VADC

def num_of_vimsfunct6 (arg_ : vimsfunct6) : Int :=
  match arg_ with
  | VIMS_VADC => 0

def undefined_vxcmpfunct6 (_ : Unit) : SailM vxcmpfunct6 := do
  (internal_pick
    [VXCMP_VMSEQ, VXCMP_VMSNE, VXCMP_VMSLTU, VXCMP_VMSLT, VXCMP_VMSLEU, VXCMP_VMSLE, VXCMP_VMSGTU, VXCMP_VMSGT])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def vxcmpfunct6_of_num (arg_ : Nat) : vxcmpfunct6 :=
  match arg_ with
  | 0 => VXCMP_VMSEQ
  | 1 => VXCMP_VMSNE
  | 2 => VXCMP_VMSLTU
  | 3 => VXCMP_VMSLT
  | 4 => VXCMP_VMSLEU
  | 5 => VXCMP_VMSLE
  | 6 => VXCMP_VMSGTU
  | _ => VXCMP_VMSGT

def num_of_vxcmpfunct6 (arg_ : vxcmpfunct6) : Int :=
  match arg_ with
  | VXCMP_VMSEQ => 0
  | VXCMP_VMSNE => 1
  | VXCMP_VMSLTU => 2
  | VXCMP_VMSLT => 3
  | VXCMP_VMSLEU => 4
  | VXCMP_VMSLE => 5
  | VXCMP_VMSGTU => 6
  | VXCMP_VMSGT => 7

def undefined_vicmpfunct6 (_ : Unit) : SailM vicmpfunct6 := do
  (internal_pick [VICMP_VMSEQ, VICMP_VMSNE, VICMP_VMSLEU, VICMP_VMSLE, VICMP_VMSGTU, VICMP_VMSGT])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def vicmpfunct6_of_num (arg_ : Nat) : vicmpfunct6 :=
  match arg_ with
  | 0 => VICMP_VMSEQ
  | 1 => VICMP_VMSNE
  | 2 => VICMP_VMSLEU
  | 3 => VICMP_VMSLE
  | 4 => VICMP_VMSGTU
  | _ => VICMP_VMSGT

def num_of_vicmpfunct6 (arg_ : vicmpfunct6) : Int :=
  match arg_ with
  | VICMP_VMSEQ => 0
  | VICMP_VMSNE => 1
  | VICMP_VMSLEU => 2
  | VICMP_VMSLE => 3
  | VICMP_VMSGTU => 4
  | VICMP_VMSGT => 5

def undefined_nvfunct6 (_ : Unit) : SailM nvfunct6 := do
  (internal_pick [NV_VNCLIPU, NV_VNCLIP])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nvfunct6_of_num (arg_ : Nat) : nvfunct6 :=
  match arg_ with
  | 0 => NV_VNCLIPU
  | _ => NV_VNCLIP

def num_of_nvfunct6 (arg_ : nvfunct6) : Int :=
  match arg_ with
  | NV_VNCLIPU => 0
  | NV_VNCLIP => 1

def undefined_nvsfunct6 (_ : Unit) : SailM nvsfunct6 := do
  (internal_pick [NVS_VNSRL, NVS_VNSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nvsfunct6_of_num (arg_ : Nat) : nvsfunct6 :=
  match arg_ with
  | 0 => NVS_VNSRL
  | _ => NVS_VNSRA

def num_of_nvsfunct6 (arg_ : nvsfunct6) : Int :=
  match arg_ with
  | NVS_VNSRL => 0
  | NVS_VNSRA => 1

def undefined_nxfunct6 (_ : Unit) : SailM nxfunct6 := do
  (internal_pick [NX_VNCLIPU, NX_VNCLIP])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nxfunct6_of_num (arg_ : Nat) : nxfunct6 :=
  match arg_ with
  | 0 => NX_VNCLIPU
  | _ => NX_VNCLIP

def num_of_nxfunct6 (arg_ : nxfunct6) : Int :=
  match arg_ with
  | NX_VNCLIPU => 0
  | NX_VNCLIP => 1

def undefined_nxsfunct6 (_ : Unit) : SailM nxsfunct6 := do
  (internal_pick [NXS_VNSRL, NXS_VNSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nxsfunct6_of_num (arg_ : Nat) : nxsfunct6 :=
  match arg_ with
  | 0 => NXS_VNSRL
  | _ => NXS_VNSRA

def num_of_nxsfunct6 (arg_ : nxsfunct6) : Int :=
  match arg_ with
  | NXS_VNSRL => 0
  | NXS_VNSRA => 1

def undefined_mmfunct6 (_ : Unit) : SailM mmfunct6 := do
  (internal_pick [MM_VMAND, MM_VMNAND, MM_VMANDN, MM_VMXOR, MM_VMOR, MM_VMNOR, MM_VMORN, MM_VMXNOR])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def mmfunct6_of_num (arg_ : Nat) : mmfunct6 :=
  match arg_ with
  | 0 => MM_VMAND
  | 1 => MM_VMNAND
  | 2 => MM_VMANDN
  | 3 => MM_VMXOR
  | 4 => MM_VMOR
  | 5 => MM_VMNOR
  | 6 => MM_VMORN
  | _ => MM_VMXNOR

def num_of_mmfunct6 (arg_ : mmfunct6) : Int :=
  match arg_ with
  | MM_VMAND => 0
  | MM_VMNAND => 1
  | MM_VMANDN => 2
  | MM_VMXOR => 3
  | MM_VMOR => 4
  | MM_VMNOR => 5
  | MM_VMORN => 6
  | MM_VMXNOR => 7

def undefined_nifunct6 (_ : Unit) : SailM nifunct6 := do
  (internal_pick [NI_VNCLIPU, NI_VNCLIP])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nifunct6_of_num (arg_ : Nat) : nifunct6 :=
  match arg_ with
  | 0 => NI_VNCLIPU
  | _ => NI_VNCLIP

def num_of_nifunct6 (arg_ : nifunct6) : Int :=
  match arg_ with
  | NI_VNCLIPU => 0
  | NI_VNCLIP => 1

def undefined_nisfunct6 (_ : Unit) : SailM nisfunct6 := do
  (internal_pick [NIS_VNSRL, NIS_VNSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def nisfunct6_of_num (arg_ : Nat) : nisfunct6 :=
  match arg_ with
  | 0 => NIS_VNSRL
  | _ => NIS_VNSRA

def num_of_nisfunct6 (arg_ : nisfunct6) : Int :=
  match arg_ with
  | NIS_VNSRL => 0
  | NIS_VNSRA => 1

def undefined_wvvfunct6 (_ : Unit) : SailM wvvfunct6 := do
  (internal_pick [WVV_VADD, WVV_VSUB, WVV_VADDU, WVV_VSUBU, WVV_VWMUL, WVV_VWMULU, WVV_VWMULSU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 6 -/
def wvvfunct6_of_num (arg_ : Nat) : wvvfunct6 :=
  match arg_ with
  | 0 => WVV_VADD
  | 1 => WVV_VSUB
  | 2 => WVV_VADDU
  | 3 => WVV_VSUBU
  | 4 => WVV_VWMUL
  | 5 => WVV_VWMULU
  | _ => WVV_VWMULSU

def num_of_wvvfunct6 (arg_ : wvvfunct6) : Int :=
  match arg_ with
  | WVV_VADD => 0
  | WVV_VSUB => 1
  | WVV_VADDU => 2
  | WVV_VSUBU => 3
  | WVV_VWMUL => 4
  | WVV_VWMULU => 5
  | WVV_VWMULSU => 6

def undefined_wvfunct6 (_ : Unit) : SailM wvfunct6 := do
  (internal_pick [WV_VADD, WV_VSUB, WV_VADDU, WV_VSUBU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def wvfunct6_of_num (arg_ : Nat) : wvfunct6 :=
  match arg_ with
  | 0 => WV_VADD
  | 1 => WV_VSUB
  | 2 => WV_VADDU
  | _ => WV_VSUBU

def num_of_wvfunct6 (arg_ : wvfunct6) : Int :=
  match arg_ with
  | WV_VADD => 0
  | WV_VSUB => 1
  | WV_VADDU => 2
  | WV_VSUBU => 3

def undefined_wvxfunct6 (_ : Unit) : SailM wvxfunct6 := do
  (internal_pick [WVX_VADD, WVX_VSUB, WVX_VADDU, WVX_VSUBU, WVX_VWMUL, WVX_VWMULU, WVX_VWMULSU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 6 -/
def wvxfunct6_of_num (arg_ : Nat) : wvxfunct6 :=
  match arg_ with
  | 0 => WVX_VADD
  | 1 => WVX_VSUB
  | 2 => WVX_VADDU
  | 3 => WVX_VSUBU
  | 4 => WVX_VWMUL
  | 5 => WVX_VWMULU
  | _ => WVX_VWMULSU

def num_of_wvxfunct6 (arg_ : wvxfunct6) : Int :=
  match arg_ with
  | WVX_VADD => 0
  | WVX_VSUB => 1
  | WVX_VADDU => 2
  | WVX_VSUBU => 3
  | WVX_VWMUL => 4
  | WVX_VWMULU => 5
  | WVX_VWMULSU => 6

def undefined_wxfunct6 (_ : Unit) : SailM wxfunct6 := do
  (internal_pick [WX_VADD, WX_VSUB, WX_VADDU, WX_VSUBU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def wxfunct6_of_num (arg_ : Nat) : wxfunct6 :=
  match arg_ with
  | 0 => WX_VADD
  | 1 => WX_VSUB
  | 2 => WX_VADDU
  | _ => WX_VSUBU

def num_of_wxfunct6 (arg_ : wxfunct6) : Int :=
  match arg_ with
  | WX_VADD => 0
  | WX_VSUB => 1
  | WX_VADDU => 2
  | WX_VSUBU => 3

def undefined_vext2funct6 (_ : Unit) : SailM vext2funct6 := do
  (internal_pick [VEXT2_ZVF2, VEXT2_SVF2])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vext2funct6_of_num (arg_ : Nat) : vext2funct6 :=
  match arg_ with
  | 0 => VEXT2_ZVF2
  | _ => VEXT2_SVF2

def num_of_vext2funct6 (arg_ : vext2funct6) : Int :=
  match arg_ with
  | VEXT2_ZVF2 => 0
  | VEXT2_SVF2 => 1

def undefined_vext4funct6 (_ : Unit) : SailM vext4funct6 := do
  (internal_pick [VEXT4_ZVF4, VEXT4_SVF4])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vext4funct6_of_num (arg_ : Nat) : vext4funct6 :=
  match arg_ with
  | 0 => VEXT4_ZVF4
  | _ => VEXT4_SVF4

def num_of_vext4funct6 (arg_ : vext4funct6) : Int :=
  match arg_ with
  | VEXT4_ZVF4 => 0
  | VEXT4_SVF4 => 1

def undefined_vext8funct6 (_ : Unit) : SailM vext8funct6 := do
  (internal_pick [VEXT8_ZVF8, VEXT8_SVF8])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vext8funct6_of_num (arg_ : Nat) : vext8funct6 :=
  match arg_ with
  | 0 => VEXT8_ZVF8
  | _ => VEXT8_SVF8

def num_of_vext8funct6 (arg_ : vext8funct6) : Int :=
  match arg_ with
  | VEXT8_ZVF8 => 0
  | VEXT8_SVF8 => 1

def undefined_vxfunct6 (_ : Unit) : SailM vxfunct6 := do
  (internal_pick
    [VX_VADD, VX_VSUB, VX_VRSUB, VX_VMINU, VX_VMIN, VX_VMAXU, VX_VMAX, VX_VAND, VX_VOR, VX_VXOR, VX_VSADDU, VX_VSADD, VX_VSSUBU, VX_VSSUB, VX_VSLL, VX_VSMUL, VX_VSRL, VX_VSRA, VX_VSSRL, VX_VSSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 19 -/
def vxfunct6_of_num (arg_ : Nat) : vxfunct6 :=
  match arg_ with
  | 0 => VX_VADD
  | 1 => VX_VSUB
  | 2 => VX_VRSUB
  | 3 => VX_VMINU
  | 4 => VX_VMIN
  | 5 => VX_VMAXU
  | 6 => VX_VMAX
  | 7 => VX_VAND
  | 8 => VX_VOR
  | 9 => VX_VXOR
  | 10 => VX_VSADDU
  | 11 => VX_VSADD
  | 12 => VX_VSSUBU
  | 13 => VX_VSSUB
  | 14 => VX_VSLL
  | 15 => VX_VSMUL
  | 16 => VX_VSRL
  | 17 => VX_VSRA
  | 18 => VX_VSSRL
  | _ => VX_VSSRA

def num_of_vxfunct6 (arg_ : vxfunct6) : Int :=
  match arg_ with
  | VX_VADD => 0
  | VX_VSUB => 1
  | VX_VRSUB => 2
  | VX_VMINU => 3
  | VX_VMIN => 4
  | VX_VMAXU => 5
  | VX_VMAX => 6
  | VX_VAND => 7
  | VX_VOR => 8
  | VX_VXOR => 9
  | VX_VSADDU => 10
  | VX_VSADD => 11
  | VX_VSSUBU => 12
  | VX_VSSUB => 13
  | VX_VSLL => 14
  | VX_VSMUL => 15
  | VX_VSRL => 16
  | VX_VSRA => 17
  | VX_VSSRL => 18
  | VX_VSSRA => 19

def undefined_vifunct6 (_ : Unit) : SailM vifunct6 := do
  (internal_pick
    [VI_VADD, VI_VRSUB, VI_VAND, VI_VOR, VI_VXOR, VI_VSADDU, VI_VSADD, VI_VSLL, VI_VSRL, VI_VSRA, VI_VSSRL, VI_VSSRA])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 11 -/
def vifunct6_of_num (arg_ : Nat) : vifunct6 :=
  match arg_ with
  | 0 => VI_VADD
  | 1 => VI_VRSUB
  | 2 => VI_VAND
  | 3 => VI_VOR
  | 4 => VI_VXOR
  | 5 => VI_VSADDU
  | 6 => VI_VSADD
  | 7 => VI_VSLL
  | 8 => VI_VSRL
  | 9 => VI_VSRA
  | 10 => VI_VSSRL
  | _ => VI_VSSRA

def num_of_vifunct6 (arg_ : vifunct6) : Int :=
  match arg_ with
  | VI_VADD => 0
  | VI_VRSUB => 1
  | VI_VAND => 2
  | VI_VOR => 3
  | VI_VXOR => 4
  | VI_VSADDU => 5
  | VI_VSADD => 6
  | VI_VSLL => 7
  | VI_VSRL => 8
  | VI_VSRA => 9
  | VI_VSSRL => 10
  | VI_VSSRA => 11

def undefined_vxsgfunct6 (_ : Unit) : SailM vxsgfunct6 := do
  (internal_pick [VX_VSLIDEUP, VX_VSLIDEDOWN, VX_VRGATHER])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def vxsgfunct6_of_num (arg_ : Nat) : vxsgfunct6 :=
  match arg_ with
  | 0 => VX_VSLIDEUP
  | 1 => VX_VSLIDEDOWN
  | _ => VX_VRGATHER

def num_of_vxsgfunct6 (arg_ : vxsgfunct6) : Int :=
  match arg_ with
  | VX_VSLIDEUP => 0
  | VX_VSLIDEDOWN => 1
  | VX_VRGATHER => 2

def undefined_visgfunct6 (_ : Unit) : SailM visgfunct6 := do
  (internal_pick [VI_VSLIDEUP, VI_VSLIDEDOWN, VI_VRGATHER])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def visgfunct6_of_num (arg_ : Nat) : visgfunct6 :=
  match arg_ with
  | 0 => VI_VSLIDEUP
  | 1 => VI_VSLIDEDOWN
  | _ => VI_VRGATHER

def num_of_visgfunct6 (arg_ : visgfunct6) : Int :=
  match arg_ with
  | VI_VSLIDEUP => 0
  | VI_VSLIDEDOWN => 1
  | VI_VRGATHER => 2

def undefined_mvvfunct6 (_ : Unit) : SailM mvvfunct6 := do
  (internal_pick
    [MVV_VAADDU, MVV_VAADD, MVV_VASUBU, MVV_VASUB, MVV_VMUL, MVV_VMULH, MVV_VMULHU, MVV_VMULHSU, MVV_VDIVU, MVV_VDIV, MVV_VREMU, MVV_VREM])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 11 -/
def mvvfunct6_of_num (arg_ : Nat) : mvvfunct6 :=
  match arg_ with
  | 0 => MVV_VAADDU
  | 1 => MVV_VAADD
  | 2 => MVV_VASUBU
  | 3 => MVV_VASUB
  | 4 => MVV_VMUL
  | 5 => MVV_VMULH
  | 6 => MVV_VMULHU
  | 7 => MVV_VMULHSU
  | 8 => MVV_VDIVU
  | 9 => MVV_VDIV
  | 10 => MVV_VREMU
  | _ => MVV_VREM

def num_of_mvvfunct6 (arg_ : mvvfunct6) : Int :=
  match arg_ with
  | MVV_VAADDU => 0
  | MVV_VAADD => 1
  | MVV_VASUBU => 2
  | MVV_VASUB => 3
  | MVV_VMUL => 4
  | MVV_VMULH => 5
  | MVV_VMULHU => 6
  | MVV_VMULHSU => 7
  | MVV_VDIVU => 8
  | MVV_VDIV => 9
  | MVV_VREMU => 10
  | MVV_VREM => 11

def undefined_mvvmafunct6 (_ : Unit) : SailM mvvmafunct6 := do
  (internal_pick [MVV_VMACC, MVV_VNMSAC, MVV_VMADD, MVV_VNMSUB])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def mvvmafunct6_of_num (arg_ : Nat) : mvvmafunct6 :=
  match arg_ with
  | 0 => MVV_VMACC
  | 1 => MVV_VNMSAC
  | 2 => MVV_VMADD
  | _ => MVV_VNMSUB

def num_of_mvvmafunct6 (arg_ : mvvmafunct6) : Int :=
  match arg_ with
  | MVV_VMACC => 0
  | MVV_VNMSAC => 1
  | MVV_VMADD => 2
  | MVV_VNMSUB => 3

def undefined_rmvvfunct6 (_ : Unit) : SailM rmvvfunct6 := do
  (internal_pick
    [MVV_VREDSUM, MVV_VREDAND, MVV_VREDOR, MVV_VREDXOR, MVV_VREDMINU, MVV_VREDMIN, MVV_VREDMAXU, MVV_VREDMAX])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def rmvvfunct6_of_num (arg_ : Nat) : rmvvfunct6 :=
  match arg_ with
  | 0 => MVV_VREDSUM
  | 1 => MVV_VREDAND
  | 2 => MVV_VREDOR
  | 3 => MVV_VREDXOR
  | 4 => MVV_VREDMINU
  | 5 => MVV_VREDMIN
  | 6 => MVV_VREDMAXU
  | _ => MVV_VREDMAX

def num_of_rmvvfunct6 (arg_ : rmvvfunct6) : Int :=
  match arg_ with
  | MVV_VREDSUM => 0
  | MVV_VREDAND => 1
  | MVV_VREDOR => 2
  | MVV_VREDXOR => 3
  | MVV_VREDMINU => 4
  | MVV_VREDMIN => 5
  | MVV_VREDMAXU => 6
  | MVV_VREDMAX => 7

def undefined_rivvfunct6 (_ : Unit) : SailM rivvfunct6 := do
  (internal_pick [IVV_VWREDSUMU, IVV_VWREDSUM])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def rivvfunct6_of_num (arg_ : Nat) : rivvfunct6 :=
  match arg_ with
  | 0 => IVV_VWREDSUMU
  | _ => IVV_VWREDSUM

def num_of_rivvfunct6 (arg_ : rivvfunct6) : Int :=
  match arg_ with
  | IVV_VWREDSUMU => 0
  | IVV_VWREDSUM => 1

def undefined_rfvvfunct6 (_ : Unit) : SailM rfvvfunct6 := do
  (internal_pick
    [FVV_VFREDOSUM, FVV_VFREDUSUM, FVV_VFREDMAX, FVV_VFREDMIN, FVV_VFWREDOSUM, FVV_VFWREDUSUM])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def rfvvfunct6_of_num (arg_ : Nat) : rfvvfunct6 :=
  match arg_ with
  | 0 => FVV_VFREDOSUM
  | 1 => FVV_VFREDUSUM
  | 2 => FVV_VFREDMAX
  | 3 => FVV_VFREDMIN
  | 4 => FVV_VFWREDOSUM
  | _ => FVV_VFWREDUSUM

def num_of_rfvvfunct6 (arg_ : rfvvfunct6) : Int :=
  match arg_ with
  | FVV_VFREDOSUM => 0
  | FVV_VFREDUSUM => 1
  | FVV_VFREDMAX => 2
  | FVV_VFREDMIN => 3
  | FVV_VFWREDOSUM => 4
  | FVV_VFWREDUSUM => 5

def undefined_wmvvfunct6 (_ : Unit) : SailM wmvvfunct6 := do
  (internal_pick [WMVV_VWMACCU, WMVV_VWMACC, WMVV_VWMACCSU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def wmvvfunct6_of_num (arg_ : Nat) : wmvvfunct6 :=
  match arg_ with
  | 0 => WMVV_VWMACCU
  | 1 => WMVV_VWMACC
  | _ => WMVV_VWMACCSU

def num_of_wmvvfunct6 (arg_ : wmvvfunct6) : Int :=
  match arg_ with
  | WMVV_VWMACCU => 0
  | WMVV_VWMACC => 1
  | WMVV_VWMACCSU => 2

def undefined_mvxfunct6 (_ : Unit) : SailM mvxfunct6 := do
  (internal_pick
    [MVX_VAADDU, MVX_VAADD, MVX_VASUBU, MVX_VASUB, MVX_VSLIDE1UP, MVX_VSLIDE1DOWN, MVX_VMUL, MVX_VMULH, MVX_VMULHU, MVX_VMULHSU, MVX_VDIVU, MVX_VDIV, MVX_VREMU, MVX_VREM])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 13 -/
def mvxfunct6_of_num (arg_ : Nat) : mvxfunct6 :=
  match arg_ with
  | 0 => MVX_VAADDU
  | 1 => MVX_VAADD
  | 2 => MVX_VASUBU
  | 3 => MVX_VASUB
  | 4 => MVX_VSLIDE1UP
  | 5 => MVX_VSLIDE1DOWN
  | 6 => MVX_VMUL
  | 7 => MVX_VMULH
  | 8 => MVX_VMULHU
  | 9 => MVX_VMULHSU
  | 10 => MVX_VDIVU
  | 11 => MVX_VDIV
  | 12 => MVX_VREMU
  | _ => MVX_VREM

def num_of_mvxfunct6 (arg_ : mvxfunct6) : Int :=
  match arg_ with
  | MVX_VAADDU => 0
  | MVX_VAADD => 1
  | MVX_VASUBU => 2
  | MVX_VASUB => 3
  | MVX_VSLIDE1UP => 4
  | MVX_VSLIDE1DOWN => 5
  | MVX_VMUL => 6
  | MVX_VMULH => 7
  | MVX_VMULHU => 8
  | MVX_VMULHSU => 9
  | MVX_VDIVU => 10
  | MVX_VDIV => 11
  | MVX_VREMU => 12
  | MVX_VREM => 13

def undefined_mvxmafunct6 (_ : Unit) : SailM mvxmafunct6 := do
  (internal_pick [MVX_VMACC, MVX_VNMSAC, MVX_VMADD, MVX_VNMSUB])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def mvxmafunct6_of_num (arg_ : Nat) : mvxmafunct6 :=
  match arg_ with
  | 0 => MVX_VMACC
  | 1 => MVX_VNMSAC
  | 2 => MVX_VMADD
  | _ => MVX_VNMSUB

def num_of_mvxmafunct6 (arg_ : mvxmafunct6) : Int :=
  match arg_ with
  | MVX_VMACC => 0
  | MVX_VNMSAC => 1
  | MVX_VMADD => 2
  | MVX_VNMSUB => 3

def undefined_wmvxfunct6 (_ : Unit) : SailM wmvxfunct6 := do
  (internal_pick [WMVX_VWMACCU, WMVX_VWMACC, WMVX_VWMACCUS, WMVX_VWMACCSU])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def wmvxfunct6_of_num (arg_ : Nat) : wmvxfunct6 :=
  match arg_ with
  | 0 => WMVX_VWMACCU
  | 1 => WMVX_VWMACC
  | 2 => WMVX_VWMACCUS
  | _ => WMVX_VWMACCSU

def num_of_wmvxfunct6 (arg_ : wmvxfunct6) : Int :=
  match arg_ with
  | WMVX_VWMACCU => 0
  | WMVX_VWMACC => 1
  | WMVX_VWMACCUS => 2
  | WMVX_VWMACCSU => 3

def undefined_maskfunct3 (_ : Unit) : SailM maskfunct3 := do
  (internal_pick [VV_VMERGE, VI_VMERGE, VX_VMERGE])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def maskfunct3_of_num (arg_ : Nat) : maskfunct3 :=
  match arg_ with
  | 0 => VV_VMERGE
  | 1 => VI_VMERGE
  | _ => VX_VMERGE

def num_of_maskfunct3 (arg_ : maskfunct3) : Int :=
  match arg_ with
  | VV_VMERGE => 0
  | VI_VMERGE => 1
  | VX_VMERGE => 2

def undefined_vlewidth (_ : Unit) : SailM vlewidth := do
  (internal_pick [VLE8, VLE16, VLE32, VLE64])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def vlewidth_of_num (arg_ : Nat) : vlewidth :=
  match arg_ with
  | 0 => VLE8
  | 1 => VLE16
  | 2 => VLE32
  | _ => VLE64

def num_of_vlewidth (arg_ : vlewidth) : Int :=
  match arg_ with
  | VLE8 => 0
  | VLE16 => 1
  | VLE32 => 2
  | VLE64 => 3

def undefined_fvvfunct6 (_ : Unit) : SailM fvvfunct6 := do
  (internal_pick
    [FVV_VADD, FVV_VSUB, FVV_VMIN, FVV_VMAX, FVV_VSGNJ, FVV_VSGNJN, FVV_VSGNJX, FVV_VDIV, FVV_VMUL])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 8 -/
def fvvfunct6_of_num (arg_ : Nat) : fvvfunct6 :=
  match arg_ with
  | 0 => FVV_VADD
  | 1 => FVV_VSUB
  | 2 => FVV_VMIN
  | 3 => FVV_VMAX
  | 4 => FVV_VSGNJ
  | 5 => FVV_VSGNJN
  | 6 => FVV_VSGNJX
  | 7 => FVV_VDIV
  | _ => FVV_VMUL

def num_of_fvvfunct6 (arg_ : fvvfunct6) : Int :=
  match arg_ with
  | FVV_VADD => 0
  | FVV_VSUB => 1
  | FVV_VMIN => 2
  | FVV_VMAX => 3
  | FVV_VSGNJ => 4
  | FVV_VSGNJN => 5
  | FVV_VSGNJX => 6
  | FVV_VDIV => 7
  | FVV_VMUL => 8

def undefined_fvvmafunct6 (_ : Unit) : SailM fvvmafunct6 := do
  (internal_pick
    [FVV_VMADD, FVV_VNMADD, FVV_VMSUB, FVV_VNMSUB, FVV_VMACC, FVV_VNMACC, FVV_VMSAC, FVV_VNMSAC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def fvvmafunct6_of_num (arg_ : Nat) : fvvmafunct6 :=
  match arg_ with
  | 0 => FVV_VMADD
  | 1 => FVV_VNMADD
  | 2 => FVV_VMSUB
  | 3 => FVV_VNMSUB
  | 4 => FVV_VMACC
  | 5 => FVV_VNMACC
  | 6 => FVV_VMSAC
  | _ => FVV_VNMSAC

def num_of_fvvmafunct6 (arg_ : fvvmafunct6) : Int :=
  match arg_ with
  | FVV_VMADD => 0
  | FVV_VNMADD => 1
  | FVV_VMSUB => 2
  | FVV_VNMSUB => 3
  | FVV_VMACC => 4
  | FVV_VNMACC => 5
  | FVV_VMSAC => 6
  | FVV_VNMSAC => 7

def undefined_fwvvfunct6 (_ : Unit) : SailM fwvvfunct6 := do
  (internal_pick [FWVV_VADD, FWVV_VSUB, FWVV_VMUL])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def fwvvfunct6_of_num (arg_ : Nat) : fwvvfunct6 :=
  match arg_ with
  | 0 => FWVV_VADD
  | 1 => FWVV_VSUB
  | _ => FWVV_VMUL

def num_of_fwvvfunct6 (arg_ : fwvvfunct6) : Int :=
  match arg_ with
  | FWVV_VADD => 0
  | FWVV_VSUB => 1
  | FWVV_VMUL => 2

def undefined_fwvvmafunct6 (_ : Unit) : SailM fwvvmafunct6 := do
  (internal_pick [FWVV_VMACC, FWVV_VNMACC, FWVV_VMSAC, FWVV_VNMSAC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def fwvvmafunct6_of_num (arg_ : Nat) : fwvvmafunct6 :=
  match arg_ with
  | 0 => FWVV_VMACC
  | 1 => FWVV_VNMACC
  | 2 => FWVV_VMSAC
  | _ => FWVV_VNMSAC

def num_of_fwvvmafunct6 (arg_ : fwvvmafunct6) : Int :=
  match arg_ with
  | FWVV_VMACC => 0
  | FWVV_VNMACC => 1
  | FWVV_VMSAC => 2
  | FWVV_VNMSAC => 3

def undefined_fwvfunct6 (_ : Unit) : SailM fwvfunct6 := do
  (internal_pick [FWV_VADD, FWV_VSUB])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def fwvfunct6_of_num (arg_ : Nat) : fwvfunct6 :=
  match arg_ with
  | 0 => FWV_VADD
  | _ => FWV_VSUB

def num_of_fwvfunct6 (arg_ : fwvfunct6) : Int :=
  match arg_ with
  | FWV_VADD => 0
  | FWV_VSUB => 1

def undefined_fvvmfunct6 (_ : Unit) : SailM fvvmfunct6 := do
  (internal_pick [FVVM_VMFEQ, FVVM_VMFLE, FVVM_VMFLT, FVVM_VMFNE])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def fvvmfunct6_of_num (arg_ : Nat) : fvvmfunct6 :=
  match arg_ with
  | 0 => FVVM_VMFEQ
  | 1 => FVVM_VMFLE
  | 2 => FVVM_VMFLT
  | _ => FVVM_VMFNE

def num_of_fvvmfunct6 (arg_ : fvvmfunct6) : Int :=
  match arg_ with
  | FVVM_VMFEQ => 0
  | FVVM_VMFLE => 1
  | FVVM_VMFLT => 2
  | FVVM_VMFNE => 3

def undefined_vfunary0 (_ : Unit) : SailM vfunary0 := do
  (internal_pick [FV_CVT_XU_F, FV_CVT_X_F, FV_CVT_F_XU, FV_CVT_F_X, FV_CVT_RTZ_XU_F, FV_CVT_RTZ_X_F])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def vfunary0_of_num (arg_ : Nat) : vfunary0 :=
  match arg_ with
  | 0 => FV_CVT_XU_F
  | 1 => FV_CVT_X_F
  | 2 => FV_CVT_F_XU
  | 3 => FV_CVT_F_X
  | 4 => FV_CVT_RTZ_XU_F
  | _ => FV_CVT_RTZ_X_F

def num_of_vfunary0 (arg_ : vfunary0) : Int :=
  match arg_ with
  | FV_CVT_XU_F => 0
  | FV_CVT_X_F => 1
  | FV_CVT_F_XU => 2
  | FV_CVT_F_X => 3
  | FV_CVT_RTZ_XU_F => 4
  | FV_CVT_RTZ_X_F => 5

def undefined_vfwunary0 (_ : Unit) : SailM vfwunary0 := do
  (internal_pick
    [FWV_CVT_XU_F, FWV_CVT_X_F, FWV_CVT_F_XU, FWV_CVT_F_X, FWV_CVT_F_F, FWV_CVT_RTZ_XU_F, FWV_CVT_RTZ_X_F])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 6 -/
def vfwunary0_of_num (arg_ : Nat) : vfwunary0 :=
  match arg_ with
  | 0 => FWV_CVT_XU_F
  | 1 => FWV_CVT_X_F
  | 2 => FWV_CVT_F_XU
  | 3 => FWV_CVT_F_X
  | 4 => FWV_CVT_F_F
  | 5 => FWV_CVT_RTZ_XU_F
  | _ => FWV_CVT_RTZ_X_F

def num_of_vfwunary0 (arg_ : vfwunary0) : Int :=
  match arg_ with
  | FWV_CVT_XU_F => 0
  | FWV_CVT_X_F => 1
  | FWV_CVT_F_XU => 2
  | FWV_CVT_F_X => 3
  | FWV_CVT_F_F => 4
  | FWV_CVT_RTZ_XU_F => 5
  | FWV_CVT_RTZ_X_F => 6

def undefined_vfnunary0 (_ : Unit) : SailM vfnunary0 := do
  (internal_pick
    [FNV_CVT_XU_F, FNV_CVT_X_F, FNV_CVT_F_XU, FNV_CVT_F_X, FNV_CVT_F_F, FNV_CVT_ROD_F_F, FNV_CVT_RTZ_XU_F, FNV_CVT_RTZ_X_F])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def vfnunary0_of_num (arg_ : Nat) : vfnunary0 :=
  match arg_ with
  | 0 => FNV_CVT_XU_F
  | 1 => FNV_CVT_X_F
  | 2 => FNV_CVT_F_XU
  | 3 => FNV_CVT_F_X
  | 4 => FNV_CVT_F_F
  | 5 => FNV_CVT_ROD_F_F
  | 6 => FNV_CVT_RTZ_XU_F
  | _ => FNV_CVT_RTZ_X_F

def num_of_vfnunary0 (arg_ : vfnunary0) : Int :=
  match arg_ with
  | FNV_CVT_XU_F => 0
  | FNV_CVT_X_F => 1
  | FNV_CVT_F_XU => 2
  | FNV_CVT_F_X => 3
  | FNV_CVT_F_F => 4
  | FNV_CVT_ROD_F_F => 5
  | FNV_CVT_RTZ_XU_F => 6
  | FNV_CVT_RTZ_X_F => 7

def undefined_vfunary1 (_ : Unit) : SailM vfunary1 := do
  (internal_pick [FVV_VSQRT, FVV_VRSQRT7, FVV_VREC7, FVV_VCLASS])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def vfunary1_of_num (arg_ : Nat) : vfunary1 :=
  match arg_ with
  | 0 => FVV_VSQRT
  | 1 => FVV_VRSQRT7
  | 2 => FVV_VREC7
  | _ => FVV_VCLASS

def num_of_vfunary1 (arg_ : vfunary1) : Int :=
  match arg_ with
  | FVV_VSQRT => 0
  | FVV_VRSQRT7 => 1
  | FVV_VREC7 => 2
  | FVV_VCLASS => 3

def undefined_fvffunct6 (_ : Unit) : SailM fvffunct6 := do
  (internal_pick
    [VF_VADD, VF_VSUB, VF_VMIN, VF_VMAX, VF_VSGNJ, VF_VSGNJN, VF_VSGNJX, VF_VDIV, VF_VRDIV, VF_VMUL, VF_VRSUB, VF_VSLIDE1UP, VF_VSLIDE1DOWN])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 12 -/
def fvffunct6_of_num (arg_ : Nat) : fvffunct6 :=
  match arg_ with
  | 0 => VF_VADD
  | 1 => VF_VSUB
  | 2 => VF_VMIN
  | 3 => VF_VMAX
  | 4 => VF_VSGNJ
  | 5 => VF_VSGNJN
  | 6 => VF_VSGNJX
  | 7 => VF_VDIV
  | 8 => VF_VRDIV
  | 9 => VF_VMUL
  | 10 => VF_VRSUB
  | 11 => VF_VSLIDE1UP
  | _ => VF_VSLIDE1DOWN

def num_of_fvffunct6 (arg_ : fvffunct6) : Int :=
  match arg_ with
  | VF_VADD => 0
  | VF_VSUB => 1
  | VF_VMIN => 2
  | VF_VMAX => 3
  | VF_VSGNJ => 4
  | VF_VSGNJN => 5
  | VF_VSGNJX => 6
  | VF_VDIV => 7
  | VF_VRDIV => 8
  | VF_VMUL => 9
  | VF_VRSUB => 10
  | VF_VSLIDE1UP => 11
  | VF_VSLIDE1DOWN => 12

def undefined_fvfmafunct6 (_ : Unit) : SailM fvfmafunct6 := do
  (internal_pick
    [VF_VMADD, VF_VNMADD, VF_VMSUB, VF_VNMSUB, VF_VMACC, VF_VNMACC, VF_VMSAC, VF_VNMSAC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 7 -/
def fvfmafunct6_of_num (arg_ : Nat) : fvfmafunct6 :=
  match arg_ with
  | 0 => VF_VMADD
  | 1 => VF_VNMADD
  | 2 => VF_VMSUB
  | 3 => VF_VNMSUB
  | 4 => VF_VMACC
  | 5 => VF_VNMACC
  | 6 => VF_VMSAC
  | _ => VF_VNMSAC

def num_of_fvfmafunct6 (arg_ : fvfmafunct6) : Int :=
  match arg_ with
  | VF_VMADD => 0
  | VF_VNMADD => 1
  | VF_VMSUB => 2
  | VF_VNMSUB => 3
  | VF_VMACC => 4
  | VF_VNMACC => 5
  | VF_VMSAC => 6
  | VF_VNMSAC => 7

def undefined_fwvffunct6 (_ : Unit) : SailM fwvffunct6 := do
  (internal_pick [FWVF_VADD, FWVF_VSUB, FWVF_VMUL])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 2 -/
def fwvffunct6_of_num (arg_ : Nat) : fwvffunct6 :=
  match arg_ with
  | 0 => FWVF_VADD
  | 1 => FWVF_VSUB
  | _ => FWVF_VMUL

def num_of_fwvffunct6 (arg_ : fwvffunct6) : Int :=
  match arg_ with
  | FWVF_VADD => 0
  | FWVF_VSUB => 1
  | FWVF_VMUL => 2

def undefined_fwvfmafunct6 (_ : Unit) : SailM fwvfmafunct6 := do
  (internal_pick [FWVF_VMACC, FWVF_VNMACC, FWVF_VMSAC, FWVF_VNMSAC])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def fwvfmafunct6_of_num (arg_ : Nat) : fwvfmafunct6 :=
  match arg_ with
  | 0 => FWVF_VMACC
  | 1 => FWVF_VNMACC
  | 2 => FWVF_VMSAC
  | _ => FWVF_VNMSAC

def num_of_fwvfmafunct6 (arg_ : fwvfmafunct6) : Int :=
  match arg_ with
  | FWVF_VMACC => 0
  | FWVF_VNMACC => 1
  | FWVF_VMSAC => 2
  | FWVF_VNMSAC => 3

def undefined_fwffunct6 (_ : Unit) : SailM fwffunct6 := do
  (internal_pick [FWF_VADD, FWF_VSUB])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def fwffunct6_of_num (arg_ : Nat) : fwffunct6 :=
  match arg_ with
  | 0 => FWF_VADD
  | _ => FWF_VSUB

def num_of_fwffunct6 (arg_ : fwffunct6) : Int :=
  match arg_ with
  | FWF_VADD => 0
  | FWF_VSUB => 1

def undefined_fvfmfunct6 (_ : Unit) : SailM fvfmfunct6 := do
  (internal_pick [VFM_VMFEQ, VFM_VMFLE, VFM_VMFLT, VFM_VMFNE, VFM_VMFGT, VFM_VMFGE])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 5 -/
def fvfmfunct6_of_num (arg_ : Nat) : fvfmfunct6 :=
  match arg_ with
  | 0 => VFM_VMFEQ
  | 1 => VFM_VMFLE
  | 2 => VFM_VMFLT
  | 3 => VFM_VMFNE
  | 4 => VFM_VMFGT
  | _ => VFM_VMFGE

def num_of_fvfmfunct6 (arg_ : fvfmfunct6) : Int :=
  match arg_ with
  | VFM_VMFEQ => 0
  | VFM_VMFLE => 1
  | VFM_VMFLT => 2
  | VFM_VMFNE => 3
  | VFM_VMFGT => 4
  | VFM_VMFGE => 5

def undefined_vmlsop (_ : Unit) : SailM vmlsop := do
  (internal_pick [VLM, VSM])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 1 -/
def vmlsop_of_num (arg_ : Nat) : vmlsop :=
  match arg_ with
  | 0 => VLM
  | _ => VSM

def num_of_vmlsop (arg_ : vmlsop) : Int :=
  match arg_ with
  | VLM => 0
  | VSM => 1

def vregidx_to_vregno (app_0 : vregidx) : vregno :=
  let .Vregidx b := app_0
  (Vregno (BitVec.toNat b))

def vregidx_offset (typ_0 : vregidx) (o : (BitVec 5)) : vregidx :=
  let .Vregidx r : vregidx := typ_0
  (Vregidx (r + o))

def vregidx_bits (app_0 : vregidx) : (BitVec 5) :=
  let .Vregidx b := app_0
  b

def encdec_vreg_forwards (arg_ : vregidx) : (BitVec 5) :=
  match arg_ with
  | .Vregidx r => r

def encdec_vreg_backwards (arg_ : (BitVec 5)) : vregidx :=
  match arg_ with
  | r => (Vregidx r)

def encdec_vreg_forwards_matches (arg_ : vregidx) : Bool :=
  match arg_ with
  | .Vregidx r => true

def encdec_vreg_backwards_matches (arg_ : (BitVec 5)) : Bool :=
  match arg_ with
  | r => true

def zvreg : vregidx := (Vregidx (0b00000 : (BitVec 5)))

def vreg_name_raw_forwards (arg_ : (BitVec 5)) : String :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00000 : (BitVec 5)))
  then "v0"
  else
    if (BEq.beq b__0 (0b00001 : (BitVec 5)))
    then "v1"
    else
      if (BEq.beq b__0 (0b00010 : (BitVec 5)))
      then "v2"
      else
        if (BEq.beq b__0 (0b00011 : (BitVec 5)))
        then "v3"
        else
          if (BEq.beq b__0 (0b00100 : (BitVec 5)))
          then "v4"
          else
            if (BEq.beq b__0 (0b00101 : (BitVec 5)))
            then "v5"
            else
              if (BEq.beq b__0 (0b00110 : (BitVec 5)))
              then "v6"
              else
                if (BEq.beq b__0 (0b00111 : (BitVec 5)))
                then "v7"
                else
                  if (BEq.beq b__0 (0b01000 : (BitVec 5)))
                  then "v8"
                  else
                    if (BEq.beq b__0 (0b01001 : (BitVec 5)))
                    then "v9"
                    else
                      if (BEq.beq b__0 (0b01010 : (BitVec 5)))
                      then "v10"
                      else
                        if (BEq.beq b__0 (0b01011 : (BitVec 5)))
                        then "v11"
                        else
                          if (BEq.beq b__0 (0b01100 : (BitVec 5)))
                          then "v12"
                          else
                            if (BEq.beq b__0 (0b01101 : (BitVec 5)))
                            then "v13"
                            else
                              if (BEq.beq b__0 (0b01110 : (BitVec 5)))
                              then "v14"
                              else
                                if (BEq.beq b__0 (0b01111 : (BitVec 5)))
                                then "v15"
                                else
                                  if (BEq.beq b__0 (0b10000 : (BitVec 5)))
                                  then "v16"
                                  else
                                    if (BEq.beq b__0 (0b10001 : (BitVec 5)))
                                    then "v17"
                                    else
                                      if (BEq.beq b__0 (0b10010 : (BitVec 5)))
                                      then "v18"
                                      else
                                        if (BEq.beq b__0 (0b10011 : (BitVec 5)))
                                        then "v19"
                                        else
                                          if (BEq.beq b__0 (0b10100 : (BitVec 5)))
                                          then "v20"
                                          else
                                            if (BEq.beq b__0 (0b10101 : (BitVec 5)))
                                            then "v21"
                                            else
                                              if (BEq.beq b__0 (0b10110 : (BitVec 5)))
                                              then "v22"
                                              else
                                                if (BEq.beq b__0 (0b10111 : (BitVec 5)))
                                                then "v23"
                                                else
                                                  if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                                                  then "v24"
                                                  else
                                                    if (BEq.beq b__0 (0b11001 : (BitVec 5)))
                                                    then "v25"
                                                    else
                                                      if (BEq.beq b__0 (0b11010 : (BitVec 5)))
                                                      then "v26"
                                                      else
                                                        if (BEq.beq b__0 (0b11011 : (BitVec 5)))
                                                        then "v27"
                                                        else
                                                          if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                                                          then "v28"
                                                          else
                                                            if (BEq.beq b__0 (0b11101 : (BitVec 5)))
                                                            then "v29"
                                                            else
                                                              if (BEq.beq b__0
                                                                   (0b11110 : (BitVec 5)))
                                                              then "v30"
                                                              else "v31"

def vreg_name_raw_backwards (arg_ : String) : SailM (BitVec 5) := do
  match arg_ with
  | "v0" => (pure (0b00000 : (BitVec 5)))
  | "v1" => (pure (0b00001 : (BitVec 5)))
  | "v2" => (pure (0b00010 : (BitVec 5)))
  | "v3" => (pure (0b00011 : (BitVec 5)))
  | "v4" => (pure (0b00100 : (BitVec 5)))
  | "v5" => (pure (0b00101 : (BitVec 5)))
  | "v6" => (pure (0b00110 : (BitVec 5)))
  | "v7" => (pure (0b00111 : (BitVec 5)))
  | "v8" => (pure (0b01000 : (BitVec 5)))
  | "v9" => (pure (0b01001 : (BitVec 5)))
  | "v10" => (pure (0b01010 : (BitVec 5)))
  | "v11" => (pure (0b01011 : (BitVec 5)))
  | "v12" => (pure (0b01100 : (BitVec 5)))
  | "v13" => (pure (0b01101 : (BitVec 5)))
  | "v14" => (pure (0b01110 : (BitVec 5)))
  | "v15" => (pure (0b01111 : (BitVec 5)))
  | "v16" => (pure (0b10000 : (BitVec 5)))
  | "v17" => (pure (0b10001 : (BitVec 5)))
  | "v18" => (pure (0b10010 : (BitVec 5)))
  | "v19" => (pure (0b10011 : (BitVec 5)))
  | "v20" => (pure (0b10100 : (BitVec 5)))
  | "v21" => (pure (0b10101 : (BitVec 5)))
  | "v22" => (pure (0b10110 : (BitVec 5)))
  | "v23" => (pure (0b10111 : (BitVec 5)))
  | "v24" => (pure (0b11000 : (BitVec 5)))
  | "v25" => (pure (0b11001 : (BitVec 5)))
  | "v26" => (pure (0b11010 : (BitVec 5)))
  | "v27" => (pure (0b11011 : (BitVec 5)))
  | "v28" => (pure (0b11100 : (BitVec 5)))
  | "v29" => (pure (0b11101 : (BitVec 5)))
  | "v30" => (pure (0b11110 : (BitVec 5)))
  | "v31" => (pure (0b11111 : (BitVec 5)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def vreg_name_raw_forwards_matches (arg_ : (BitVec 5)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00000 : (BitVec 5)))
  then true
  else
    if (BEq.beq b__0 (0b00001 : (BitVec 5)))
    then true
    else
      if (BEq.beq b__0 (0b00010 : (BitVec 5)))
      then true
      else
        if (BEq.beq b__0 (0b00011 : (BitVec 5)))
        then true
        else
          if (BEq.beq b__0 (0b00100 : (BitVec 5)))
          then true
          else
            if (BEq.beq b__0 (0b00101 : (BitVec 5)))
            then true
            else
              if (BEq.beq b__0 (0b00110 : (BitVec 5)))
              then true
              else
                if (BEq.beq b__0 (0b00111 : (BitVec 5)))
                then true
                else
                  if (BEq.beq b__0 (0b01000 : (BitVec 5)))
                  then true
                  else
                    if (BEq.beq b__0 (0b01001 : (BitVec 5)))
                    then true
                    else
                      if (BEq.beq b__0 (0b01010 : (BitVec 5)))
                      then true
                      else
                        if (BEq.beq b__0 (0b01011 : (BitVec 5)))
                        then true
                        else
                          if (BEq.beq b__0 (0b01100 : (BitVec 5)))
                          then true
                          else
                            if (BEq.beq b__0 (0b01101 : (BitVec 5)))
                            then true
                            else
                              if (BEq.beq b__0 (0b01110 : (BitVec 5)))
                              then true
                              else
                                if (BEq.beq b__0 (0b01111 : (BitVec 5)))
                                then true
                                else
                                  if (BEq.beq b__0 (0b10000 : (BitVec 5)))
                                  then true
                                  else
                                    if (BEq.beq b__0 (0b10001 : (BitVec 5)))
                                    then true
                                    else
                                      if (BEq.beq b__0 (0b10010 : (BitVec 5)))
                                      then true
                                      else
                                        if (BEq.beq b__0 (0b10011 : (BitVec 5)))
                                        then true
                                        else
                                          if (BEq.beq b__0 (0b10100 : (BitVec 5)))
                                          then true
                                          else
                                            if (BEq.beq b__0 (0b10101 : (BitVec 5)))
                                            then true
                                            else
                                              if (BEq.beq b__0 (0b10110 : (BitVec 5)))
                                              then true
                                              else
                                                if (BEq.beq b__0 (0b10111 : (BitVec 5)))
                                                then true
                                                else
                                                  if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                                                  then true
                                                  else
                                                    if (BEq.beq b__0 (0b11001 : (BitVec 5)))
                                                    then true
                                                    else
                                                      if (BEq.beq b__0 (0b11010 : (BitVec 5)))
                                                      then true
                                                      else
                                                        if (BEq.beq b__0 (0b11011 : (BitVec 5)))
                                                        then true
                                                        else
                                                          if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                                                          then true
                                                          else
                                                            if (BEq.beq b__0 (0b11101 : (BitVec 5)))
                                                            then true
                                                            else
                                                              if (BEq.beq b__0
                                                                   (0b11110 : (BitVec 5)))
                                                              then true
                                                              else
                                                                if (BEq.beq b__0
                                                                     (0b11111 : (BitVec 5)))
                                                                then true
                                                                else false

def vreg_name_raw_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "v0" => true
  | "v1" => true
  | "v2" => true
  | "v3" => true
  | "v4" => true
  | "v5" => true
  | "v6" => true
  | "v7" => true
  | "v8" => true
  | "v9" => true
  | "v10" => true
  | "v11" => true
  | "v12" => true
  | "v13" => true
  | "v14" => true
  | "v15" => true
  | "v16" => true
  | "v17" => true
  | "v18" => true
  | "v19" => true
  | "v20" => true
  | "v21" => true
  | "v22" => true
  | "v23" => true
  | "v24" => true
  | "v25" => true
  | "v26" => true
  | "v27" => true
  | "v28" => true
  | "v29" => true
  | "v30" => true
  | "v31" => true
  | _ => false

def vreg_name_forwards (arg_ : vregidx) : String :=
  match arg_ with
  | .Vregidx i => (vreg_name_raw_forwards i)

def vreg_name_backwards (arg_ : String) : SailM vregidx := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (vreg_name_raw_backwards_matches mapping0_)
    then
      match (← (vreg_name_raw_backwards mapping0_)) with
      | i => (pure (some (Vregidx i)))
    else (pure none)) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def vreg_name_forwards_matches (arg_ : vregidx) : Bool :=
  match arg_ with
  | .Vregidx i => true

def vreg_name_backwards_matches (arg_ : String) : SailM Bool := do
  let head_exp_ := arg_
  match (← do
    let mapping0_ := head_exp_
    if (vreg_name_raw_backwards_matches mapping0_)
    then
      match (← (vreg_name_raw_backwards mapping0_)) with
      | i => (pure (some true))
    else (pure none)) with
  | .some result => (pure result)
  | none =>
    match head_exp_ with
    | _ => (pure false)

def dirty_v_context (_ : Unit) : SailM Unit := do
  assert (sys_enable_vext ()) "riscv_vext_regs.sail:91.26-91.27"
  writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 10 9 (extStatus_to_bits Dirty))
  writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) (((2 ^i 3) *i 8) -i 1)
    (((2 ^i 3) *i 8) -i 1) (0b1 : (BitVec 1)))

def rV (app_0 : vregno) : SailM (BitVec 65536) := do
  let .Vregno r := app_0
  match r with
  | 0 => readReg vr0
  | 1 => readReg vr1
  | 2 => readReg vr2
  | 3 => readReg vr3
  | 4 => readReg vr4
  | 5 => readReg vr5
  | 6 => readReg vr6
  | 7 => readReg vr7
  | 8 => readReg vr8
  | 9 => readReg vr9
  | 10 => readReg vr10
  | 11 => readReg vr11
  | 12 => readReg vr12
  | 13 => readReg vr13
  | 14 => readReg vr14
  | 15 => readReg vr15
  | 16 => readReg vr16
  | 17 => readReg vr17
  | 18 => readReg vr18
  | 19 => readReg vr19
  | 20 => readReg vr20
  | 21 => readReg vr21
  | 22 => readReg vr22
  | 23 => readReg vr23
  | 24 => readReg vr24
  | 25 => readReg vr25
  | 26 => readReg vr26
  | 27 => readReg vr27
  | 28 => readReg vr28
  | 29 => readReg vr29
  | 30 => readReg vr30
  | _ => readReg vr31

def wV (typ_0 : vregno) (v : (BitVec 65536)) : SailM Unit := do
  let .Vregno r : vregno := typ_0
  match r with
  | 0 => writeReg vr0 v
  | 1 => writeReg vr1 v
  | 2 => writeReg vr2 v
  | 3 => writeReg vr3 v
  | 4 => writeReg vr4 v
  | 5 => writeReg vr5 v
  | 6 => writeReg vr6 v
  | 7 => writeReg vr7 v
  | 8 => writeReg vr8 v
  | 9 => writeReg vr9 v
  | 10 => writeReg vr10 v
  | 11 => writeReg vr11 v
  | 12 => writeReg vr12 v
  | 13 => writeReg vr13 v
  | 14 => writeReg vr14 v
  | 15 => writeReg vr15 v
  | 16 => writeReg vr16 v
  | 17 => writeReg vr17 v
  | 18 => writeReg vr18 v
  | 19 => writeReg vr19 v
  | 20 => writeReg vr20 v
  | 21 => writeReg vr21 v
  | 22 => writeReg vr22 v
  | 23 => writeReg vr23 v
  | 24 => writeReg vr24 v
  | 25 => writeReg vr25 v
  | 26 => writeReg vr26 v
  | 27 => writeReg vr27 v
  | 28 => writeReg vr28 v
  | 29 => writeReg vr29 v
  | 30 => writeReg vr30 v
  | _ => writeReg vr31 v
  (dirty_v_context ())
  assert (Bool.and (0 <b VLEN) (VLEN ≤b 65536)) "riscv_vext_regs.sail:171.43-171.44"
  if (get_config_print_reg ())
  then
    (pure (print_endline
        (HAppend.hAppend "v"
          (HAppend.hAppend (Int.repr r)
            (HAppend.hAppend " <- " (BitVec.toFormatted (Sail.BitVec.extractLsb v (VLEN -i 1) 0)))))))
  else (pure ())

def rV_bits (i : vregidx) : SailM (BitVec 65536) := do
  (rV (vregidx_to_vregno i))

def wV_bits (i : vregidx) (data : (BitVec 65536)) : SailM Unit := do
  (wV (vregidx_to_vregno i) data)

def init_vregs (_ : Unit) : SailM Unit := do
  let zero_vreg : vregtype := (zeros_implicit (n := 65536))
  writeReg vr0 zero_vreg
  writeReg vr1 zero_vreg
  writeReg vr2 zero_vreg
  writeReg vr3 zero_vreg
  writeReg vr4 zero_vreg
  writeReg vr5 zero_vreg
  writeReg vr6 zero_vreg
  writeReg vr7 zero_vreg
  writeReg vr8 zero_vreg
  writeReg vr9 zero_vreg
  writeReg vr10 zero_vreg
  writeReg vr11 zero_vreg
  writeReg vr12 zero_vreg
  writeReg vr13 zero_vreg
  writeReg vr14 zero_vreg
  writeReg vr15 zero_vreg
  writeReg vr16 zero_vreg
  writeReg vr17 zero_vreg
  writeReg vr18 zero_vreg
  writeReg vr19 zero_vreg
  writeReg vr20 zero_vreg
  writeReg vr21 zero_vreg
  writeReg vr22 zero_vreg
  writeReg vr23 zero_vreg
  writeReg vr24 zero_vreg
  writeReg vr25 zero_vreg
  writeReg vr26 zero_vreg
  writeReg vr27 zero_vreg
  writeReg vr28 zero_vreg
  writeReg vr29 zero_vreg
  writeReg vr30 zero_vreg
  writeReg vr31 zero_vreg

def undefined_Vcsr (_ : Unit) : SailM (BitVec 3) := do
  (undefined_bitvector 3)

def Mk_Vcsr (v : (BitVec 3)) : (BitVec 3) :=
  v

def _get_Vcsr_vxrm (v : (BitVec 3)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 2 1)

def _update_Vcsr_vxrm (v : (BitVec 3)) (x : (BitVec 2)) : (BitVec 3) :=
  (Sail.BitVec.updateSubrange v 2 1 x)

def _set_Vcsr_vxrm (r_ref : (RegisterRef (BitVec 3))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vcsr_vxrm r v)

def _get_Vcsr_vxsat (v : (BitVec 3)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 0 0)

def _update_Vcsr_vxsat (v : (BitVec 3)) (x : (BitVec 1)) : (BitVec 3) :=
  (Sail.BitVec.updateSubrange v 0 0 x)

def _set_Vcsr_vxsat (r_ref : (RegisterRef (BitVec 3))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_Vcsr_vxsat r v)

def ext_write_vcsr (vxrm_val : (BitVec 2)) (vxsat_val : (BitVec 1)) : SailM Unit := do
  writeReg vcsr (Sail.BitVec.updateSubrange (← readReg vcsr) 2 1 vxrm_val)
  writeReg vcsr (Sail.BitVec.updateSubrange (← readReg vcsr) 0 0 vxsat_val)
  (dirty_v_context ())

/-- Type quantifiers: SEW : Int, LMUL_pow : Int -/
def get_num_elem (LMUL_pow : Int) (SEW : Int) : SailM Int := do
  let LMUL_pow_reg :=
    if (LMUL_pow <b 0)
    then 0
    else LMUL_pow
  let num_elem := (Int.tdiv ((2 ^i LMUL_pow_reg) *i VLEN) SEW)
  assert (num_elem >b 0) "riscv_vext_regs.sail:242.21-242.22"
  (pure num_elem)

/-- Type quantifiers: num_elem : Nat, SEW : Nat, num_elem ≥ 0 ∧ SEW ≥ 0 -/
def read_single_vreg (num_elem : Nat) (SEW : Nat) (vrid : vregidx) : SailM (Vector (BitVec SEW) num_elem) := do
  let bv ← (( do (rV_bits vrid) ) : SailM vregtype )
  let result : (Vector (BitVec SEW) num_elem) := (vectorInit (zeros_implicit (n := SEW)))
  assert (Bool.and (8 ≤b SEW) (SEW ≤b 64)) "riscv_vext_regs.sail:252.29-252.30"
  let loop_i_lower := 0
  let loop_i_upper := (num_elem -i 1)
  let mut loop_vars := result
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let result := loop_vars
    loop_vars :=
      let start_index := (i *i SEW)
      (vectorUpdate result i (BitVec.slice bv start_index SEW))
  (pure loop_vars)

/-- Type quantifiers: num_elem : Nat, SEW : Int, num_elem ≥ 0 -/
def write_single_vreg (num_elem : Nat) (SEW : Int) (vrid : vregidx) (v : (Vector (BitVec SEW) num_elem)) : SailM Unit := do
  let r : vregtype := (zeros_implicit (n := 65536))
  assert (Bool.and (8 ≤b SEW) (SEW ≤b 64)) "riscv_vext_regs.sail:266.29-266.30"
  let r ← (( do
    let loop_i_lower := 0
    let loop_i_upper := (num_elem -i 1)
    let mut loop_vars := r
    for i in [loop_i_upper:loop_i_lower + 1:1]i do
      let r := loop_vars
      loop_vars :=
        let r : vregtype := (shiftl r SEW)
        (r ||| (zero_extend (m := 65536) (GetElem?.getElem! v i)))
    (pure loop_vars) ) : SailM (BitVec 65536) )
  (wV_bits vrid r)

/-- Type quantifiers: num_elem : Nat, SEW : Nat, LMUL_pow : Int, num_elem ≥ 0 ∧ SEW ≥ 0 -/
def read_vreg (num_elem : Nat) (SEW : Nat) (LMUL_pow : Int) (vrid : vregidx) : SailM (Vector (BitVec SEW) num_elem) := do
  let vrid_val := (BitVec.toNat (vregidx_bits vrid))
  let result : (Vector (BitVec SEW) num_elem) := (vectorInit (zeros_implicit (n := SEW)))
  let LMUL_pow_reg :=
    if (LMUL_pow <b 0)
    then 0
    else LMUL_pow
  if ((vrid_val +i (2 ^i LMUL_pow_reg)) >b 32)
  then
    assert false "invalid register group: vrid overflow the largest number"
    throw Error.Exit
  else
    if (bne (Int.emod vrid_val (2 ^i LMUL_pow_reg)) 0)
    then
      assert false "invalid register group: vrid is not a multiple of EMUL"
      throw Error.Exit
    else
      if (LMUL_pow <b 0)
      then (read_single_vreg (Vector.length result) SEW vrid)
      else
        let num_elem_single : Int := (Int.tdiv VLEN SEW)
        assert (num_elem_single ≥b 0) "riscv_vext_regs.sail:294.34-294.35"
        let loop_i_lmul_lower := 0
        let loop_i_lmul_upper := ((2 ^i LMUL_pow_reg) -i 1)
        let mut loop_vars := result
        for i_lmul in [loop_i_lmul_lower:loop_i_lmul_upper + 1:1]i do
          let result := loop_vars
          loop_vars ← do
            let r_start_i : Int := (i_lmul *i num_elem_single)
            let r_end_i : Int := ((r_start_i +i num_elem_single) -i 1)
            let vrid_lmul : vregidx := (vregidx_offset vrid (to_bits 5 i_lmul))
            let single_result ← (( do (read_single_vreg num_elem_single SEW vrid_lmul) ) : SailM
              (Vector (BitVec SEW) num_elem_single) )
            let loop_r_i_lower := r_start_i
            let loop_r_i_upper := r_end_i
            let mut loop_vars_1 := result
            for r_i in [loop_r_i_lower:loop_r_i_upper + 1:1]i do
              let result := loop_vars_1
              loop_vars_1 ← do
                let s_i : Int := (r_i -i r_start_i)
                assert (Bool.and (0 ≤b r_i) (r_i <b num_elem)) "riscv_vext_regs.sail:302.42-302.43"
                assert (Bool.and (0 ≤b s_i) (s_i <b num_elem_single)) "riscv_vext_regs.sail:303.50-303.51"
                (pure (vectorUpdate result r_i (GetElem?.getElem! single_result s_i)))
            (pure loop_vars_1)
        (pure loop_vars)

/-- Type quantifiers: EEW : Nat, index : Int, 8 ≤ EEW ∧ EEW ≤ 128 -/
def read_single_element (EEW : Nat) (index : Int) (vrid : vregidx) : SailM (BitVec EEW) := do
  assert (VLEN ≥b EEW) "riscv_vext_regs.sail:316.20-316.21"
  let elem_per_reg : Int := (Int.tdiv VLEN EEW)
  assert (elem_per_reg ≥b 0) "riscv_vext_regs.sail:318.27-318.28"
  let real_vrid : vregidx := (vregidx_offset vrid (to_bits 5 (Int.tdiv index elem_per_reg)))
  let real_index : Int := (Int.emod index elem_per_reg)
  let vrid_val ← (( do (read_single_vreg elem_per_reg EEW real_vrid) ) : SailM
    (Vector (BitVec EEW) elem_per_reg) )
  assert (Bool.and (0 ≤b real_index) (real_index <b elem_per_reg)) "riscv_vext_regs.sail:322.53-322.54"
  (pure (GetElem?.getElem! vrid_val real_index))

/-- Type quantifiers: num_elem : Nat, SEW : Nat, LMUL_pow : Int, num_elem ≥ 0 ∧ SEW ≥ 0 -/
def write_vreg (num_elem : Nat) (SEW : Nat) (LMUL_pow : Int) (vrid : vregidx) (vec : (Vector (BitVec SEW) num_elem)) : SailM Unit := do
  let LMUL_pow_reg :=
    if (LMUL_pow <b 0)
    then 0
    else LMUL_pow
  let num_elem_single : Int := (Int.tdiv VLEN SEW)
  assert (num_elem_single ≥b 0) "riscv_vext_regs.sail:332.30-332.31"
  let loop_i_lmul_lower := 0
  let loop_i_lmul_upper := ((2 ^i LMUL_pow_reg) -i 1)
  let mut loop_vars := ()
  for i_lmul in [loop_i_lmul_lower:loop_i_lmul_upper + 1:1]i do
    let () := loop_vars
    loop_vars ← do
      let single_vec : (Vector (BitVec SEW) num_elem_single) :=
        (vectorInit (zeros_implicit (n := SEW)))
      let vrid_lmul : vregidx := (vregidx_offset vrid (to_bits 5 i_lmul))
      let r_start_i : Int := (i_lmul *i num_elem_single)
      let r_end_i : Int := ((r_start_i +i num_elem_single) -i 1)
      let single_vec ← (( do
        let loop_r_i_lower := r_start_i
        let loop_r_i_upper := r_end_i
        let mut loop_vars_1 := single_vec
        for r_i in [loop_r_i_lower:loop_r_i_upper + 1:1]i do
          let single_vec := loop_vars_1
          loop_vars_1 ← do
            let s_i : Int := (r_i -i r_start_i)
            assert (Bool.and (0 ≤b r_i) (r_i <b num_elem)) "riscv_vext_regs.sail:340.38-340.39"
            assert (Bool.and (0 ≤b s_i) (s_i <b num_elem_single)) "riscv_vext_regs.sail:341.46-341.47"
            (pure (vectorUpdate single_vec s_i (GetElem?.getElem! vec r_i)))
        (pure loop_vars_1) ) : SailM (Vector (BitVec SEW) num_elem_single) )
      (write_single_vreg num_elem_single SEW vrid_lmul single_vec)
  (pure loop_vars)

/-- Type quantifiers: EEW : Nat, index : Int, 8 ≤ EEW ∧ EEW ≤ 128 -/
def write_single_element (EEW : Nat) (index : Int) (vrid : vregidx) (value : (BitVec EEW)) : SailM Unit := do
  let elem_per_reg : Int := (Int.tdiv VLEN EEW)
  assert (elem_per_reg ≥b 0) "riscv_vext_regs.sail:352.27-352.28"
  let real_vrid : vregidx := (vregidx_offset vrid (to_bits 5 (Int.tdiv index elem_per_reg)))
  let real_index : Int := (Int.emod index elem_per_reg)
  let vrid_val ← (( do (read_single_vreg elem_per_reg EEW real_vrid) ) : SailM
    (Vector (BitVec EEW) elem_per_reg) )
  let r : vregtype := (zeros_implicit (n := 65536))
  let r ← (( do
    let loop_i_lower := 0
    let loop_i_upper := (elem_per_reg -i 1)
    let mut loop_vars := r
    for i in [loop_i_upper:loop_i_lower + 1:1]i do
      let r := loop_vars
      loop_vars :=
        let r : vregtype := (shiftl r EEW)
        if (BEq.beq i real_index)
        then (r ||| (zero_extend (m := 65536) value))
        else (r ||| (zero_extend (m := 65536) (GetElem?.getElem! vrid_val i)))
    (pure loop_vars) ) : SailM (BitVec 65536) )
  (wV_bits real_vrid r)

/-- Type quantifiers: num_elem : Nat, num_elem > 0 -/
def read_vmask (num_elem : Nat) (vm : (BitVec 1)) (vrid : vregidx) : SailM (BitVec num_elem) := do
  assert (num_elem ≤b 65536) "riscv_vext_regs.sail:372.36-372.37"
  let vreg_val ← (( do (rV_bits vrid) ) : SailM vregtype )
  let result : (BitVec num_elem) := (ones (n := num_elem))
  if (BEq.beq vm (0b1 : (BitVec 1)))
  then (pure result)
  else
    let loop_i_lower := 0
    let loop_i_upper := (num_elem -i 1)
    let mut loop_vars := result
    for i in [loop_i_lower:loop_i_upper + 1:1]i do
      let result := loop_vars
      loop_vars := (BitVec.update result i (BitVec.access vreg_val i))
    (pure loop_vars)

/-- Type quantifiers: num_elem : Nat, num_elem > 0 -/
def read_vmask_carry (num_elem : Nat) (vm : (BitVec 1)) (vrid : vregidx) : SailM (BitVec num_elem) := do
  assert (num_elem ≤b 65536) "riscv_vext_regs.sail:390.36-390.37"
  let vreg_val ← (( do (rV_bits vrid) ) : SailM vregtype )
  let result : (BitVec num_elem) := (zeros_implicit (n := num_elem))
  if (BEq.beq vm (0b1 : (BitVec 1)))
  then (pure result)
  else
    let loop_i_lower := 0
    let loop_i_upper := (num_elem -i 1)
    let mut loop_vars := result
    for i in [loop_i_lower:loop_i_upper + 1:1]i do
      let result := loop_vars
      loop_vars := (BitVec.update result i (BitVec.access vreg_val i))
    (pure loop_vars)

/-- Type quantifiers: num_elem : Nat, num_elem > 0 -/
def write_vmask (num_elem : Nat) (vrid : vregidx) (v : (BitVec num_elem)) : SailM Unit := do
  assert (Bool.and (0 <b VLEN) (VLEN ≤b 65536)) "riscv_vext_regs.sail:408.43-408.44"
  assert (Bool.and (0 <b num_elem) (num_elem ≤b VLEN)) "riscv_vext_regs.sail:409.40-409.41"
  let vreg_val ← (( do (rV_bits vrid) ) : SailM vregtype )
  let result ← (( do (undefined_bitvector 65536) ) : SailM vregtype )
  let result ← (( do
    let loop_i_lower := 0
    let loop_i_upper := (num_elem -i 1)
    let mut loop_vars := result
    for i in [loop_i_lower:loop_i_upper + 1:1]i do
      let result := loop_vars
      loop_vars := (BitVec.update result i (BitVec.access v i))
    (pure loop_vars) ) : SailM (BitVec 65536) )
  let result ← (( do
    let loop_i_lower := num_elem
    let loop_i_upper := (VLEN -i 1)
    let mut loop_vars := result
    for i in [loop_i_lower:loop_i_upper + 1:1]i do
      let result := loop_vars
      loop_vars := (BitVec.update result i (BitVec.access vreg_val i))
    (pure loop_vars) ) : SailM (BitVec 65536) )
  (wV_bits vrid result)

def set_vstart (value : (BitVec 16)) : SailM Unit := do
  (dirty_v_context ())
  let vstart_length := (get_vlen_pow ())
  writeReg vstart (zero_extend (m := 16) (Sail.BitVec.extractLsb value (vstart_length -i 1) 0))

def ext_check_xret_priv (p : Privilege) : Bool :=
  true

def ext_fail_xret_priv (_ : Unit) : Unit :=
  ()

def handle_trap_extension (p : Privilege) (pc : (BitVec (2 ^ 3 * 8))) (u : (Option Unit)) : Unit :=
  ()

def prepare_trap_vector (p : Privilege) (cause : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let tvec ← (( do
    match p with
    | Machine => readReg mtvec
    | Supervisor => readReg stvec
    | User => (internal_error "riscv_sys_exceptions.sail" 25 "Invalid privilege level") ) : SailM
    Mtvec )
  match (tvec_addr tvec cause) with
  | .some epc => (pure epc)
  | none => (internal_error "riscv_sys_exceptions.sail" 29 "Invalid tvec mode")

def get_xepc (p : Privilege) : SailM (BitVec (2 ^ 3 * 8)) := do
  match p with
  | Machine => (align_pc (← readReg mepc))
  | Supervisor => (align_pc (← readReg sepc))
  | User => (internal_error "riscv_sys_exceptions.sail" 45 "Invalid privilege level")

def set_xepc (p : Privilege) (value : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  let target := (legalize_xepc value)
  match p with
  | Machine => writeReg mepc target
  | Supervisor => writeReg sepc target
  | User => (internal_error "riscv_sys_exceptions.sail" 54 "Invalid privilege level")
  (pure target)

def prepare_xret_target (p : Privilege) : SailM (BitVec (2 ^ 3 * 8)) := do
  (get_xepc p)

def get_mtvec (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  readReg mtvec

def get_stvec (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  readReg stvec

def set_mtvec (value : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  writeReg mtvec (legalize_tvec (← readReg mtvec) value)
  readReg mtvec

def set_stvec (value : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  writeReg stvec (legalize_tvec (← readReg stvec) value)
  readReg stvec

def undefined_HpmEvent (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_HpmEvent (v : (BitVec 64)) : (BitVec 64) :=
  v

def _get_HpmEvent_MINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 62 62)

def _update_HpmEvent_MINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 62 62 x)

def _update_CountSmcntrpmf_MINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 62 62 x)

def _set_HpmEvent_MINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_MINH r v)

def _get_CountSmcntrpmf_MINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 62 62)

def _set_CountSmcntrpmf_MINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_MINH r v)

def _get_HpmEvent_OF (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 63 63)

def _update_HpmEvent_OF (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 63 63 x)

def _set_HpmEvent_OF (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_OF r v)

def _get_HpmEvent_SINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 61 61)

def _update_HpmEvent_SINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 61 61 x)

def _update_CountSmcntrpmf_SINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 61 61 x)

def _set_HpmEvent_SINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_SINH r v)

def _get_CountSmcntrpmf_SINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 61 61)

def _set_CountSmcntrpmf_SINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_SINH r v)

def _get_HpmEvent_UINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 60 60)

def _update_HpmEvent_UINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 60 60 x)

def _update_CountSmcntrpmf_UINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 60 60 x)

def _set_HpmEvent_UINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_UINH r v)

def _get_CountSmcntrpmf_UINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 60 60)

def _set_CountSmcntrpmf_UINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_UINH r v)

def _get_HpmEvent_VSINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 59 59)

def _update_HpmEvent_VSINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 59 59 x)

def _update_CountSmcntrpmf_VSINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 59 59 x)

def _set_HpmEvent_VSINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_VSINH r v)

def _get_CountSmcntrpmf_VSINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 59 59)

def _set_CountSmcntrpmf_VSINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_VSINH r v)

def _get_HpmEvent_VUINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 58 58)

def _update_HpmEvent_VUINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 58 58 x)

def _update_CountSmcntrpmf_VUINH (v : (BitVec 64)) (x : (BitVec 1)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 58 58 x)

def _set_HpmEvent_VUINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_VUINH r v)

def _get_CountSmcntrpmf_VUINH (v : (BitVec 64)) : (BitVec 1) :=
  (Sail.BitVec.extractLsb v 58 58)

def _set_CountSmcntrpmf_VUINH (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 1)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_CountSmcntrpmf_VUINH r v)

def _get_HpmEvent_event (v : (BitVec 64)) : (BitVec 32) :=
  (Sail.BitVec.extractLsb v 31 0)

def _update_HpmEvent_event (v : (BitVec 64)) (x : (BitVec 32)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 31 0 x)

def _set_HpmEvent_event (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 32)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_HpmEvent_event r v)

def hpmidx_from_bits (b : (BitVec 5)) : SailM Nat := do
  let index := (BitVec.toNat b)
  assert (index ≥b 3) "unreachable HPM index"
  (pure index)

def legalize_hpmevent (v : (BitVec 64)) : SailM (BitVec 64) := do
  (pure (_update_HpmEvent_event
      (_update_HpmEvent_VUINH
        (_update_HpmEvent_VSINH
          (_update_HpmEvent_UINH
            (_update_HpmEvent_SINH
              (_update_HpmEvent_MINH
                (_update_HpmEvent_OF (Mk_HpmEvent (zeros_implicit (n := 64)))
                  (← do
                    if (← (extensionEnabled Ext_Sscofpmf))
                    then (pure (_get_HpmEvent_OF v))
                    else (pure (0b0 : (BitVec 1)))))
                (← do
                  if (← (extensionEnabled Ext_Sscofpmf))
                  then (pure (_get_HpmEvent_MINH v))
                  else (pure (0b0 : (BitVec 1)))))
              (← do
                if (Bool.and (← (extensionEnabled Ext_Sscofpmf)) (← (extensionEnabled Ext_S)))
                then (pure (_get_HpmEvent_SINH v))
                else (pure (0b0 : (BitVec 1)))))
            (← do
              if (Bool.and (← (extensionEnabled Ext_Sscofpmf)) (← (extensionEnabled Ext_U)))
              then (pure (_get_HpmEvent_UINH v))
              else (pure (0b0 : (BitVec 1))))) (0b0 : (BitVec 1))) (0b0 : (BitVec 1)))
      (_get_HpmEvent_event v)))

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def read_mhpmcounter (index : Nat) : SailM (BitVec (2 ^ 3 * 8)) := do
  (pure (Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmcounter) index) (xlen -i 1) 0))

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def read_mhpmcounterh (index : Nat) : SailM (BitVec 32) := do
  (pure (Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmcounter) index) 63 32))

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def read_mhpmevent (index : Nat) : SailM (BitVec (2 ^ 3 * 8)) := do
  (pure (Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmevent) index) (xlen -i 1) 0))

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def write_mhpmcounter (index : Nat) (value : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  if (BEq.beq (BitVec.access (sys_writable_hpm_counters ()) index) 1#1)
  then
    writeReg mhpmcounter (vectorUpdate (← readReg mhpmcounter) index
      (Sail.BitVec.updateSubrange (GetElem?.getElem! (← readReg mhpmcounter) index) (xlen -i 1) 0
        value))
  else (pure ())

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def write_mhpmcounterh (index : Nat) (value : (BitVec 32)) : SailM Unit := do
  if (BEq.beq (BitVec.access (sys_writable_hpm_counters ()) index) 1#1)
  then
    writeReg mhpmcounter (vectorUpdate (← readReg mhpmcounter) index
      (Sail.BitVec.updateSubrange (GetElem?.getElem! (← readReg mhpmcounter) index) 63 32 value))
  else (pure ())

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def write_mhpmevent (index : Nat) (value : (BitVec (2 ^ 3 * 8))) : SailM Unit := do
  if (BEq.beq (BitVec.access (sys_writable_hpm_counters ()) index) 1#1)
  then
    writeReg mhpmevent (vectorUpdate (← readReg mhpmevent) index
      (← (legalize_hpmevent
          (Mk_HpmEvent
            (← do
              match xlen with
              | 32 =>
                (pure ((Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmevent) index) 63
                      32) ++ value))
              | 64 => (pure value)
              | _ => (internal_error "riscv_zihpm.sail" 223 "Unsupported xlen"))))))
  else (pure ())

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def read_mhpmeventh (index : Nat) : SailM (BitVec 32) := do
  (pure (Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmevent) index) 63 32))

/-- Type quantifiers: index : Nat, 3 ≤ index ∧ index ≤ 31 -/
def write_mhpmeventh (index : Nat) (value : (BitVec 32)) : SailM Unit := do
  if (BEq.beq (BitVec.access (sys_writable_hpm_counters ()) index) 1#1)
  then
    writeReg mhpmevent (vectorUpdate (← readReg mhpmevent) index
      (← (legalize_hpmevent
          (Mk_HpmEvent
            (value ++ (Sail.BitVec.extractLsb (GetElem?.getElem! (← readReg mhpmevent) index) 31 0))))))
  else (pure ())

def get_scountovf (priv : Privilege) : SailM (BitVec 32) := do
  let overflow ← do
    (pure ((_get_HpmEvent_OF (GetElem?.getElem! (← readReg mhpmevent) 31)) ++ ((_get_HpmEvent_OF
            (GetElem?.getElem! (← readReg mhpmevent) 30)) ++ ((_get_HpmEvent_OF
              (GetElem?.getElem! (← readReg mhpmevent) 29)) ++ ((_get_HpmEvent_OF
                (GetElem?.getElem! (← readReg mhpmevent) 28)) ++ ((_get_HpmEvent_OF
                  (GetElem?.getElem! (← readReg mhpmevent) 27)) ++ ((_get_HpmEvent_OF
                    (GetElem?.getElem! (← readReg mhpmevent) 26)) ++ ((_get_HpmEvent_OF
                      (GetElem?.getElem! (← readReg mhpmevent) 25)) ++ ((_get_HpmEvent_OF
                        (GetElem?.getElem! (← readReg mhpmevent) 24)) ++ ((_get_HpmEvent_OF
                          (GetElem?.getElem! (← readReg mhpmevent) 23)) ++ ((_get_HpmEvent_OF
                            (GetElem?.getElem! (← readReg mhpmevent) 22)) ++ ((_get_HpmEvent_OF
                              (GetElem?.getElem! (← readReg mhpmevent) 21)) ++ ((_get_HpmEvent_OF
                                (GetElem?.getElem! (← readReg mhpmevent) 20)) ++ ((_get_HpmEvent_OF
                                  (GetElem?.getElem! (← readReg mhpmevent) 19)) ++ ((_get_HpmEvent_OF
                                    (GetElem?.getElem! (← readReg mhpmevent) 18)) ++ ((_get_HpmEvent_OF
                                      (GetElem?.getElem! (← readReg mhpmevent) 17)) ++ ((_get_HpmEvent_OF
                                        (GetElem?.getElem! (← readReg mhpmevent) 16)) ++ ((_get_HpmEvent_OF
                                          (GetElem?.getElem! (← readReg mhpmevent) 15)) ++ ((_get_HpmEvent_OF
                                            (GetElem?.getElem! (← readReg mhpmevent) 14)) ++ ((_get_HpmEvent_OF
                                              (GetElem?.getElem! (← readReg mhpmevent) 13)) ++ ((_get_HpmEvent_OF
                                                (GetElem?.getElem! (← readReg mhpmevent) 12)) ++ ((_get_HpmEvent_OF
                                                  (GetElem?.getElem! (← readReg mhpmevent) 11)) ++ ((_get_HpmEvent_OF
                                                    (GetElem?.getElem! (← readReg mhpmevent) 10)) ++ ((_get_HpmEvent_OF
                                                      (GetElem?.getElem! (← readReg mhpmevent) 9)) ++ ((_get_HpmEvent_OF
                                                        (GetElem?.getElem! (← readReg mhpmevent) 8)) ++ ((_get_HpmEvent_OF
                                                          (GetElem?.getElem! (← readReg mhpmevent)
                                                            7)) ++ ((_get_HpmEvent_OF
                                                            (GetElem?.getElem!
                                                              (← readReg mhpmevent) 6)) ++ ((_get_HpmEvent_OF
                                                              (GetElem?.getElem!
                                                                (← readReg mhpmevent) 5)) ++ ((_get_HpmEvent_OF
                                                                (GetElem?.getElem!
                                                                  (← readReg mhpmevent) 4)) ++ ((_get_HpmEvent_OF
                                                                  (GetElem?.getElem!
                                                                    (← readReg mhpmevent) 3)) ++ (0b000 : (BitVec 3))))))))))))))))))))))))))))))))
  match priv with
  | Machine => (pure overflow)
  | Supervisor => (pure (overflow &&& (← readReg mcounteren)))
  | User => (internal_error "riscv_sscofpmf.sail" 77 "scountovf not readable from User mode")

def undefined_seed_opst (_ : Unit) : SailM seed_opst := do
  (internal_pick [BIST, ES16, WAIT, DEAD])

/-- Type quantifiers: arg_ : Nat, 0 ≤ arg_ ∧ arg_ ≤ 3 -/
def seed_opst_of_num (arg_ : Nat) : seed_opst :=
  match arg_ with
  | 0 => BIST
  | 1 => ES16
  | 2 => WAIT
  | _ => DEAD

def num_of_seed_opst (arg_ : seed_opst) : Int :=
  match arg_ with
  | BIST => 0
  | ES16 => 1
  | WAIT => 2
  | DEAD => 3

def opst_code_forwards (arg_ : seed_opst) : (BitVec 2) :=
  match arg_ with
  | BIST => (0b00 : (BitVec 2))
  | WAIT => (0b01 : (BitVec 2))
  | ES16 => (0b10 : (BitVec 2))
  | DEAD => (0b11 : (BitVec 2))

def opst_code_backwards (arg_ : (BitVec 2)) : seed_opst :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then BIST
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then WAIT
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then ES16
      else DEAD

def opst_code_forwards_matches (arg_ : seed_opst) : Bool :=
  match arg_ with
  | BIST => true
  | WAIT => true
  | ES16 => true
  | DEAD => true

def opst_code_backwards_matches (arg_ : (BitVec 2)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00 : (BitVec 2)))
  then true
  else
    if (BEq.beq b__0 (0b01 : (BitVec 2)))
    then true
    else
      if (BEq.beq b__0 (0b10 : (BitVec 2)))
      then true
      else
        if (BEq.beq b__0 (0b11 : (BitVec 2)))
        then true
        else false

def read_seed_csr (_ : Unit) : SailM (BitVec (2 ^ 3 * 8)) := do
  let reserved_bits : (BitVec 6) := (0b000000 : (BitVec 6))
  let custom_bits : (BitVec 8) := (0x00 : (BitVec 8))
  let seed ← (( do (get_16_random_bits ()) ) : SailM (BitVec 16) )
  (pure (zero_extend (m := ((2 ^i 3) *i 8))
      ((opst_code_forwards ES16) ++ (reserved_bits ++ (custom_bits ++ seed)))))

def write_seed_csr (_ : Unit) : (BitVec (2 ^ 3 * 8)) :=
  (zeros_implicit (n := ((2 ^i 3) *i 8)))

def undefined_CountSmcntrpmf (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_CountSmcntrpmf (v : (BitVec 64)) : (BitVec 64) :=
  v

def legalize_smcntrpmf (c : (BitVec 64)) (value : (BitVec 64)) : SailM (BitVec 64) := do
  let v := (Mk_CountSmcntrpmf value)
  (pure (_update_CountSmcntrpmf_UINH
      (_update_CountSmcntrpmf_SINH (_update_CountSmcntrpmf_MINH c (_get_CountSmcntrpmf_MINH v))
        (← do
          if (← (extensionEnabled Ext_S))
          then (pure (_get_CountSmcntrpmf_SINH v))
          else (pure (0b0 : (BitVec 1)))))
      (← do
        if (← (extensionEnabled Ext_U))
        then (pure (_get_CountSmcntrpmf_UINH v))
        else (pure (0b0 : (BitVec 1))))))

def counter_priv_filter_bit (reg : (BitVec 64)) (priv : Privilege) : (BitVec 1) :=
  match priv with
  | Machine => (_get_CountSmcntrpmf_MINH reg)
  | Supervisor => (_get_CountSmcntrpmf_SINH reg)
  | User => (_get_CountSmcntrpmf_UINH reg)

def should_inc_mcycle (priv : Privilege) : SailM Bool := do
  (pure (Bool.and (BEq.beq (_get_Counterin_CY (← readReg mcountinhibit)) (0b0 : (BitVec 1)))
      (BEq.beq (counter_priv_filter_bit (← readReg mcyclecfg) priv) (0b0 : (BitVec 1)))))

def should_inc_minstret (priv : Privilege) : SailM Bool := do
  (pure (Bool.and (BEq.beq (_get_Counterin_IR (← readReg mcountinhibit)) (0b0 : (BitVec 1)))
      (BEq.beq (counter_priv_filter_bit (← readReg minstretcfg) priv) (0b0 : (BitVec 1)))))

def csrAccess (csr : (BitVec 12)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb csr 11 10)

def csrPriv (csr : (BitVec 12)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb csr 9 8)

def check_CSR_priv (csr : (BitVec 12)) (p : Privilege) : Bool :=
  (zopz0zKzJ_u (privLevel_to_bits p) (csrPriv csr))

/-- Type quantifiers: k_ex102015# : Bool -/
def check_CSR_access (csr : (BitVec 12)) (isWrite : Bool) : Bool :=
  (not (Bool.and isWrite (BEq.beq (csrAccess csr) (0b11 : (BitVec 2)))))

def check_TVM_SATP (csr : (BitVec 12)) (p : Privilege) : SailM Bool := do
  (pure (not
      (Bool.and (BEq.beq csr (0x180 : (BitVec 12)))
        (Bool.and (BEq.beq p Supervisor)
          (BEq.beq (_get_Mstatus_TVM (← readReg mstatus)) (0b1 : (BitVec 1)))))))

def feature_enabled_for_priv (p : Privilege) (machine_enable_bit : (BitVec 1)) (supervisor_enable_bit : (BitVec 1)) : SailM Bool := do
  match p with
  | Machine => (pure true)
  | Supervisor => (pure (BEq.beq machine_enable_bit 1#1))
  | User =>
    (pure (Bool.and (BEq.beq machine_enable_bit 1#1)
        (Bool.or (not (← (extensionEnabled Ext_S))) (BEq.beq supervisor_enable_bit 1#1))))

def check_Counteren (csr : (BitVec 12)) (p : Privilege) : SailM Bool := do
  if (Bool.or (zopz0zI_u csr (0xC00 : (BitVec 12))) (zopz0zI_u (0xC1F : (BitVec 12)) csr))
  then (pure true)
  else
    let index := (BitVec.toNat (Sail.BitVec.extractLsb csr 4 0))
    (feature_enabled_for_priv p (BitVec.access (← readReg mcounteren) index)
      (BitVec.access (← readReg scounteren) index))

def check_Stimecmp (csr : (BitVec 12)) (p : Privilege) : SailM Bool := do
  if (Bool.and (bne csr (0x14D : (BitVec 12))) (bne csr (0x15D : (BitVec 12))))
  then (pure true)
  else
    (pure (Bool.or (BEq.beq p Machine)
        (Bool.and (BEq.beq p Supervisor)
          (Bool.and (BEq.beq (_get_Counteren_TM (← readReg mcounteren)) (0b1 : (BitVec 1)))
            (BEq.beq (_get_MEnvcfg_STCE (← readReg menvcfg)) (0b1 : (BitVec 1)))))))

/-- Type quantifiers: k_ex102102# : Bool -/
def check_seed_CSR (csr : (BitVec 12)) (p : Privilege) (isWrite : Bool) : Bool :=
  if (not (BEq.beq csr (0x015 : (BitVec 12))))
  then true
  else
    if (not isWrite)
    then false
    else
      match p with
      | Machine => true
      | Supervisor => false
      | User => false

def is_CSR_defined (b__0 : (BitVec 12)) : SailM Bool := do
  if (BEq.beq b__0 (0x301 : (BitVec 12)))
  then (pure true)
  else
    if (BEq.beq b__0 (0x300 : (BitVec 12)))
    then (pure true)
    else
      if (BEq.beq b__0 (0x310 : (BitVec 12)))
      then (pure (BEq.beq xlen 32))
      else
        if (BEq.beq b__0 (0x30A : (BitVec 12)))
        then (extensionEnabled Ext_U)
        else
          if (BEq.beq b__0 (0x31A : (BitVec 12)))
          then (pure (Bool.and (← (extensionEnabled Ext_U)) (BEq.beq xlen 32)))
          else
            if (BEq.beq b__0 (0x10A : (BitVec 12)))
            then (extensionEnabled Ext_S)
            else
              if (BEq.beq b__0 (0x304 : (BitVec 12)))
              then (pure true)
              else
                if (BEq.beq b__0 (0x344 : (BitVec 12)))
                then (pure true)
                else
                  if (BEq.beq b__0 (0x302 : (BitVec 12)))
                  then (extensionEnabled Ext_S)
                  else
                    if (BEq.beq b__0 (0x312 : (BitVec 12)))
                    then (pure (Bool.and (← (extensionEnabled Ext_S)) (BEq.beq xlen 32)))
                    else
                      if (BEq.beq b__0 (0x303 : (BitVec 12)))
                      then (extensionEnabled Ext_S)
                      else
                        if (BEq.beq b__0 (0x342 : (BitVec 12)))
                        then (pure true)
                        else
                          if (BEq.beq b__0 (0x343 : (BitVec 12)))
                          then (pure true)
                          else
                            if (BEq.beq b__0 (0x340 : (BitVec 12)))
                            then (pure true)
                            else
                              if (BEq.beq b__0 (0x106 : (BitVec 12)))
                              then (extensionEnabled Ext_S)
                              else
                                if (BEq.beq b__0 (0x306 : (BitVec 12)))
                                then (extensionEnabled Ext_U)
                                else
                                  if (BEq.beq b__0 (0x320 : (BitVec 12)))
                                  then (pure true)
                                  else
                                    if (BEq.beq b__0 (0xF11 : (BitVec 12)))
                                    then (pure true)
                                    else
                                      if (BEq.beq b__0 (0xF12 : (BitVec 12)))
                                      then (pure true)
                                      else
                                        if (BEq.beq b__0 (0xF13 : (BitVec 12)))
                                        then (pure true)
                                        else
                                          if (BEq.beq b__0 (0xF14 : (BitVec 12)))
                                          then (pure true)
                                          else
                                            if (BEq.beq b__0 (0xF15 : (BitVec 12)))
                                            then (pure true)
                                            else
                                              if (BEq.beq b__0 (0x100 : (BitVec 12)))
                                              then (extensionEnabled Ext_S)
                                              else
                                                if (BEq.beq b__0 (0x144 : (BitVec 12)))
                                                then (extensionEnabled Ext_S)
                                                else
                                                  if (BEq.beq b__0 (0x104 : (BitVec 12)))
                                                  then (extensionEnabled Ext_S)
                                                  else
                                                    if (BEq.beq b__0 (0x140 : (BitVec 12)))
                                                    then (extensionEnabled Ext_S)
                                                    else
                                                      if (BEq.beq b__0 (0x142 : (BitVec 12)))
                                                      then (extensionEnabled Ext_S)
                                                      else
                                                        if (BEq.beq b__0 (0x143 : (BitVec 12)))
                                                        then (extensionEnabled Ext_S)
                                                        else
                                                          if (BEq.beq b__0 (0x7A0 : (BitVec 12)))
                                                          then (pure true)
                                                          else
                                                            if (BEq.beq
                                                                 (Sail.BitVec.extractLsb b__0 11 4)
                                                                 (0x3A : (BitVec 8)))
                                                            then
                                                              let idx : (BitVec 4) :=
                                                                (Sail.BitVec.extractLsb b__0 3 0)
                                                              (pure (Bool.and
                                                                  ((sys_pmp_count ()) >b (BitVec.toNat
                                                                      idx))
                                                                  (Bool.or
                                                                    (BEq.beq (BitVec.access idx 0)
                                                                      0#1) (BEq.beq xlen 32))))
                                                            else
                                                              if (BEq.beq
                                                                   (Sail.BitVec.extractLsb b__0 11 4)
                                                                   (0x3B : (BitVec 8)))
                                                              then
                                                                let idx : (BitVec 4) :=
                                                                  (Sail.BitVec.extractLsb b__0 3 0)
                                                                (pure ((sys_pmp_count ()) >b (BitVec.toNat
                                                                      ((0b00 : (BitVec 2)) ++ idx))))
                                                              else
                                                                if (BEq.beq
                                                                     (Sail.BitVec.extractLsb b__0 11
                                                                       4) (0x3C : (BitVec 8)))
                                                                then
                                                                  let idx : (BitVec 4) :=
                                                                    (Sail.BitVec.extractLsb b__0 3 0)
                                                                  (pure ((sys_pmp_count ()) >b (BitVec.toNat
                                                                        ((0b01 : (BitVec 2)) ++ idx))))
                                                                else
                                                                  if (BEq.beq
                                                                       (Sail.BitVec.extractLsb b__0
                                                                         11 4) (0x3D : (BitVec 8)))
                                                                  then
                                                                    let idx : (BitVec 4) :=
                                                                      (Sail.BitVec.extractLsb b__0 3
                                                                        0)
                                                                    (pure ((sys_pmp_count ()) >b (BitVec.toNat
                                                                          ((0b10 : (BitVec 2)) ++ idx))))
                                                                  else
                                                                    if (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           b__0 11 4)
                                                                         (0x3E : (BitVec 8)))
                                                                    then
                                                                      let idx : (BitVec 4) :=
                                                                        (Sail.BitVec.extractLsb b__0
                                                                          3 0)
                                                                      (pure ((sys_pmp_count ()) >b (BitVec.toNat
                                                                            ((0b11 : (BitVec 2)) ++ idx))))
                                                                    else
                                                                      if (BEq.beq b__0
                                                                           (0x008 : (BitVec 12)))
                                                                      then (extensionEnabled Ext_V)
                                                                      else
                                                                        if (BEq.beq b__0
                                                                             (0x009 : (BitVec 12)))
                                                                        then
                                                                          (extensionEnabled Ext_V)
                                                                        else
                                                                          if (BEq.beq b__0
                                                                               (0x00A : (BitVec 12)))
                                                                          then
                                                                            (extensionEnabled Ext_V)
                                                                          else
                                                                            if (BEq.beq b__0
                                                                                 (0x00F : (BitVec 12)))
                                                                            then
                                                                              (extensionEnabled
                                                                                Ext_V)
                                                                            else
                                                                              if (BEq.beq b__0
                                                                                   (0xC20 : (BitVec 12)))
                                                                              then
                                                                                (extensionEnabled
                                                                                  Ext_V)
                                                                              else
                                                                                if (BEq.beq b__0
                                                                                     (0xC21 : (BitVec 12)))
                                                                                then
                                                                                  (extensionEnabled
                                                                                    Ext_V)
                                                                                else
                                                                                  if (BEq.beq b__0
                                                                                       (0xC22 : (BitVec 12)))
                                                                                  then
                                                                                    (extensionEnabled
                                                                                      Ext_V)
                                                                                  else
                                                                                    if (BEq.beq b__0
                                                                                         (0x105 : (BitVec 12)))
                                                                                    then
                                                                                      (extensionEnabled
                                                                                        Ext_S)
                                                                                    else
                                                                                      if (BEq.beq
                                                                                           b__0
                                                                                           (0x141 : (BitVec 12)))
                                                                                      then
                                                                                        (extensionEnabled
                                                                                          Ext_S)
                                                                                      else
                                                                                        if (BEq.beq
                                                                                             b__0
                                                                                             (0x305 : (BitVec 12)))
                                                                                        then
                                                                                          (pure true)
                                                                                        else
                                                                                          if (BEq.beq
                                                                                               b__0
                                                                                               (0x341 : (BitVec 12)))
                                                                                          then
                                                                                            (pure true)
                                                                                          else
                                                                                            if (Bool.and
                                                                                                 (BEq.beq
                                                                                                   (Sail.BitVec.extractLsb
                                                                                                     b__0
                                                                                                     11
                                                                                                     5)
                                                                                                   (0b0011001 : (BitVec 7)))
                                                                                                 (let index : (BitVec 5) :=
                                                                                                   (Sail.BitVec.extractLsb
                                                                                                     b__0
                                                                                                     4
                                                                                                     0)
                                                                                                 ((BitVec.toNat
                                                                                                     index) ≥b 3) : Bool))
                                                                                            then
                                                                                              (extensionEnabled
                                                                                                Ext_Zihpm)
                                                                                            else
                                                                                              if (Bool.and
                                                                                                   (BEq.beq
                                                                                                     (Sail.BitVec.extractLsb
                                                                                                       b__0
                                                                                                       11
                                                                                                       5)
                                                                                                     (0b1011000 : (BitVec 7)))
                                                                                                   (let index : (BitVec 5) :=
                                                                                                     (Sail.BitVec.extractLsb
                                                                                                       b__0
                                                                                                       4
                                                                                                       0)
                                                                                                   ((BitVec.toNat
                                                                                                       index) ≥b 3) : Bool))
                                                                                              then
                                                                                                (extensionEnabled
                                                                                                  Ext_Zihpm)
                                                                                              else
                                                                                                if (Bool.and
                                                                                                     (BEq.beq
                                                                                                       (Sail.BitVec.extractLsb
                                                                                                         b__0
                                                                                                         11
                                                                                                         5)
                                                                                                       (0b1011100 : (BitVec 7)))
                                                                                                     (let index : (BitVec 5) :=
                                                                                                       (Sail.BitVec.extractLsb
                                                                                                         b__0
                                                                                                         4
                                                                                                         0)
                                                                                                     ((BitVec.toNat
                                                                                                         index) ≥b 3) : Bool))
                                                                                                then
                                                                                                  (pure (Bool.and
                                                                                                      (← (extensionEnabled
                                                                                                          Ext_Zihpm))
                                                                                                      (BEq.beq
                                                                                                        xlen
                                                                                                        32)))
                                                                                                else
                                                                                                  if (Bool.and
                                                                                                       (BEq.beq
                                                                                                         (Sail.BitVec.extractLsb
                                                                                                           b__0
                                                                                                           11
                                                                                                           5)
                                                                                                         (0b1100000 : (BitVec 7)))
                                                                                                       (let index : (BitVec 5) :=
                                                                                                         (Sail.BitVec.extractLsb
                                                                                                           b__0
                                                                                                           4
                                                                                                           0)
                                                                                                       ((BitVec.toNat
                                                                                                           index) ≥b 3) : Bool))
                                                                                                  then
                                                                                                    (pure (Bool.and
                                                                                                        (← (extensionEnabled
                                                                                                            Ext_Zihpm))
                                                                                                        (← (extensionEnabled
                                                                                                            Ext_U))))
                                                                                                  else
                                                                                                    if (Bool.and
                                                                                                         (BEq.beq
                                                                                                           (Sail.BitVec.extractLsb
                                                                                                             b__0
                                                                                                             11
                                                                                                             5)
                                                                                                           (0b1100100 : (BitVec 7)))
                                                                                                         (let index : (BitVec 5) :=
                                                                                                           (Sail.BitVec.extractLsb
                                                                                                             b__0
                                                                                                             4
                                                                                                             0)
                                                                                                         ((BitVec.toNat
                                                                                                             index) ≥b 3) : Bool))
                                                                                                    then
                                                                                                      (pure (Bool.and
                                                                                                          (← (extensionEnabled
                                                                                                              Ext_Zihpm))
                                                                                                          (Bool.and
                                                                                                            (← (extensionEnabled
                                                                                                                Ext_U))
                                                                                                            (BEq.beq
                                                                                                              xlen
                                                                                                              32))))
                                                                                                    else
                                                                                                      if (Bool.and
                                                                                                           (BEq.beq
                                                                                                             (Sail.BitVec.extractLsb
                                                                                                               b__0
                                                                                                               11
                                                                                                               5)
                                                                                                             (0b0111001 : (BitVec 7)))
                                                                                                           (let index : (BitVec 5) :=
                                                                                                             (Sail.BitVec.extractLsb
                                                                                                               b__0
                                                                                                               4
                                                                                                               0)
                                                                                                           ((BitVec.toNat
                                                                                                               index) ≥b 3) : Bool))
                                                                                                      then
                                                                                                        (pure (Bool.and
                                                                                                            (← (extensionEnabled
                                                                                                                Ext_Sscofpmf))
                                                                                                            (BEq.beq
                                                                                                              xlen
                                                                                                              32)))
                                                                                                      else
                                                                                                        if (BEq.beq
                                                                                                             b__0
                                                                                                             (0xDA0 : (BitVec 12)))
                                                                                                        then
                                                                                                          (pure (Bool.and
                                                                                                              (← (extensionEnabled
                                                                                                                  Ext_Sscofpmf))
                                                                                                              (← (extensionEnabled
                                                                                                                  Ext_S))))
                                                                                                        else
                                                                                                          if (BEq.beq
                                                                                                               b__0
                                                                                                               (0x015 : (BitVec 12)))
                                                                                                          then
                                                                                                            (extensionEnabled
                                                                                                              Ext_Zkr)
                                                                                                          else
                                                                                                            if (BEq.beq
                                                                                                                 b__0
                                                                                                                 (0xC00 : (BitVec 12)))
                                                                                                            then
                                                                                                              (extensionEnabled
                                                                                                                Ext_Zicntr)
                                                                                                            else
                                                                                                              if (BEq.beq
                                                                                                                   b__0
                                                                                                                   (0xC01 : (BitVec 12)))
                                                                                                              then
                                                                                                                (extensionEnabled
                                                                                                                  Ext_Zicntr)
                                                                                                              else
                                                                                                                if (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0xC02 : (BitVec 12)))
                                                                                                                then
                                                                                                                  (extensionEnabled
                                                                                                                    Ext_Zicntr)
                                                                                                                else
                                                                                                                  if (BEq.beq
                                                                                                                       b__0
                                                                                                                       (0xC80 : (BitVec 12)))
                                                                                                                  then
                                                                                                                    (pure (Bool.and
                                                                                                                        (← (extensionEnabled
                                                                                                                            Ext_Zicntr))
                                                                                                                        (BEq.beq
                                                                                                                          xlen
                                                                                                                          32)))
                                                                                                                  else
                                                                                                                    if (BEq.beq
                                                                                                                         b__0
                                                                                                                         (0xC81 : (BitVec 12)))
                                                                                                                    then
                                                                                                                      (pure (Bool.and
                                                                                                                          (← (extensionEnabled
                                                                                                                              Ext_Zicntr))
                                                                                                                          (BEq.beq
                                                                                                                            xlen
                                                                                                                            32)))
                                                                                                                    else
                                                                                                                      if (BEq.beq
                                                                                                                           b__0
                                                                                                                           (0xC82 : (BitVec 12)))
                                                                                                                      then
                                                                                                                        (pure (Bool.and
                                                                                                                            (← (extensionEnabled
                                                                                                                                Ext_Zicntr))
                                                                                                                            (BEq.beq
                                                                                                                              xlen
                                                                                                                              32)))
                                                                                                                      else
                                                                                                                        if (BEq.beq
                                                                                                                             b__0
                                                                                                                             (0xB00 : (BitVec 12)))
                                                                                                                        then
                                                                                                                          (extensionEnabled
                                                                                                                            Ext_Zicntr)
                                                                                                                        else
                                                                                                                          if (BEq.beq
                                                                                                                               b__0
                                                                                                                               (0xB02 : (BitVec 12)))
                                                                                                                          then
                                                                                                                            (extensionEnabled
                                                                                                                              Ext_Zicntr)
                                                                                                                          else
                                                                                                                            if (BEq.beq
                                                                                                                                 b__0
                                                                                                                                 (0xB80 : (BitVec 12)))
                                                                                                                            then
                                                                                                                              (pure (Bool.and
                                                                                                                                  (← (extensionEnabled
                                                                                                                                      Ext_Zicntr))
                                                                                                                                  (BEq.beq
                                                                                                                                    xlen
                                                                                                                                    32)))
                                                                                                                            else
                                                                                                                              if (BEq.beq
                                                                                                                                   b__0
                                                                                                                                   (0xB82 : (BitVec 12)))
                                                                                                                              then
                                                                                                                                (pure (Bool.and
                                                                                                                                    (← (extensionEnabled
                                                                                                                                        Ext_Zicntr))
                                                                                                                                    (BEq.beq
                                                                                                                                      xlen
                                                                                                                                      32)))
                                                                                                                              else
                                                                                                                                if (BEq.beq
                                                                                                                                     b__0
                                                                                                                                     (0x321 : (BitVec 12)))
                                                                                                                                then
                                                                                                                                  (extensionEnabled
                                                                                                                                    Ext_Smcntrpmf)
                                                                                                                                else
                                                                                                                                  if (BEq.beq
                                                                                                                                       b__0
                                                                                                                                       (0x721 : (BitVec 12)))
                                                                                                                                  then
                                                                                                                                    (pure (Bool.and
                                                                                                                                        (← (extensionEnabled
                                                                                                                                            Ext_Smcntrpmf))
                                                                                                                                        (BEq.beq
                                                                                                                                          xlen
                                                                                                                                          32)))
                                                                                                                                  else
                                                                                                                                    if (BEq.beq
                                                                                                                                         b__0
                                                                                                                                         (0x322 : (BitVec 12)))
                                                                                                                                    then
                                                                                                                                      (extensionEnabled
                                                                                                                                        Ext_Smcntrpmf)
                                                                                                                                    else
                                                                                                                                      if (BEq.beq
                                                                                                                                           b__0
                                                                                                                                           (0x722 : (BitVec 12)))
                                                                                                                                      then
                                                                                                                                        (pure (Bool.and
                                                                                                                                            (← (extensionEnabled
                                                                                                                                                Ext_Smcntrpmf))
                                                                                                                                            (BEq.beq
                                                                                                                                              xlen
                                                                                                                                              32)))
                                                                                                                                      else
                                                                                                                                        if (BEq.beq
                                                                                                                                             b__0
                                                                                                                                             (0x180 : (BitVec 12)))
                                                                                                                                        then
                                                                                                                                          (extensionEnabled
                                                                                                                                            Ext_S)
                                                                                                                                        else
                                                                                                                                          (pure false)

/-- Type quantifiers: k_ex102551# : Bool -/
def check_CSR (csr : (BitVec 12)) (p : Privilege) (isWrite : Bool) : SailM Bool := do
  (pure (Bool.and (← (is_CSR_defined csr))
      (Bool.and (check_CSR_priv csr p)
        (Bool.and (check_CSR_access csr isWrite)
          (Bool.and (← (check_TVM_SATP csr p))
            (Bool.and (← (check_Counteren csr p))
              (Bool.and (← (check_Stimecmp csr p)) (check_seed_CSR csr p isWrite))))))))

def exception_delegatee (e : ExceptionType) (p : Privilege) : SailM Privilege := do
  let idx := (num_of_ExceptionType e)
  let super ← do (bit_to_bool (BitVec.access (← readReg medeleg) idx))
  let deleg ← do
    if (Bool.and (← (extensionEnabled Ext_S)) super)
    then (pure Supervisor)
    else (pure Machine)
  if (zopz0zI_u (privLevel_to_bits deleg) (privLevel_to_bits p))
  then (pure p)
  else (pure deleg)

def findPendingInterrupt (ip : (BitVec (2 ^ 3 * 8))) : (Option InterruptType) :=
  let ip := (Mk_Minterrupts ip)
  if (BEq.beq (_get_Minterrupts_MEI ip) (0b1 : (BitVec 1)))
  then (some I_M_External)
  else
    if (BEq.beq (_get_Minterrupts_MSI ip) (0b1 : (BitVec 1)))
    then (some I_M_Software)
    else
      if (BEq.beq (_get_Minterrupts_MTI ip) (0b1 : (BitVec 1)))
      then (some I_M_Timer)
      else
        if (BEq.beq (_get_Minterrupts_SEI ip) (0b1 : (BitVec 1)))
        then (some I_S_External)
        else
          if (BEq.beq (_get_Minterrupts_SSI ip) (0b1 : (BitVec 1)))
          then (some I_S_Software)
          else
            if (BEq.beq (_get_Minterrupts_STI ip) (0b1 : (BitVec 1)))
            then (some I_S_Timer)
            else none

def getPendingSet (priv : Privilege) : SailM (Option ((BitVec (2 ^ 3 * 8)) × Privilege)) := do
  assert (Bool.or (← (extensionEnabled Ext_S))
    (BEq.beq (← readReg mideleg) (zeros_implicit (n := ((2 ^i 3) *i 8))))) "riscv_sys_control.sail:135.58-135.59"
  let pending_m ← do
    (pure ((← readReg mip) &&& ((← readReg mie) &&& (Complement.complement (← readReg mideleg)))))
  let pending_s ← do (pure ((← readReg mip) &&& ((← readReg mie) &&& (← readReg mideleg))))
  let mIE ← do
    (pure (Bool.or
        (Bool.and (BEq.beq priv Machine)
          (BEq.beq (_get_Mstatus_MIE (← readReg mstatus)) (0b1 : (BitVec 1))))
        (Bool.or (BEq.beq priv Supervisor) (BEq.beq priv User))))
  let sIE ← do
    (pure (Bool.or
        (Bool.and (BEq.beq priv Supervisor)
          (BEq.beq (_get_Mstatus_SIE (← readReg mstatus)) (0b1 : (BitVec 1)))) (BEq.beq priv User)))
  if (Bool.and mIE (bne pending_m (zeros_implicit (n := ((2 ^i 3) *i 8)))))
  then (pure (some (pending_m, Machine)))
  else
    if (Bool.and sIE (bne pending_s (zeros_implicit (n := ((2 ^i 3) *i 8)))))
    then (pure (some (pending_s, Supervisor)))
    else (pure none)

def dispatchInterrupt (priv : Privilege) : SailM (Option (InterruptType × Privilege)) := do
  match (← (getPendingSet priv)) with
  | none => (pure none)
  | .some (ip, p) =>
    match (findPendingInterrupt ip) with
    | none => (pure none)
    | .some i => (pure (some (i, p)))

def tval (excinfo : (Option (BitVec (2 ^ 3 * 8)))) : (BitVec (2 ^ 3 * 8)) :=
  match excinfo with
  | .some e => e
  | none => (zeros_implicit (n := ((2 ^i 3) *i 8)))

def rvfi_trap (_ : Unit) : Unit :=
  ()

/-- Type quantifiers: k_ex102797# : Bool -/
def trap_handler (del_priv : Privilege) (intr : Bool) (c : (BitVec 8)) (pc : (BitVec (2 ^ 3 * 8))) (info : (Option (BitVec (2 ^ 3 * 8)))) (ext : (Option Unit)) : SailM (BitVec (2 ^ 3 * 8)) := do
  let _ : Unit := (rvfi_trap ())
  let _ : Unit :=
    if (get_config_print_platform ())
    then
      (print_endline
        (HAppend.hAppend "handling "
          (HAppend.hAppend
            (if intr
            then "int#"
            else "exc#")
            (HAppend.hAppend (BitVec.toFormatted c)
              (HAppend.hAppend " at priv "
                (HAppend.hAppend (privLevel_to_str del_priv)
                  (HAppend.hAppend " with tval " (BitVec.toFormatted (tval info)))))))))
    else ()
  match del_priv with
  | Machine =>
    writeReg mcause (Sail.BitVec.updateSubrange (← readReg mcause) (((2 ^i 3) *i 8) -i 1)
      (((2 ^i 3) *i 8) -i 1) (bool_to_bits intr))
    writeReg mcause (Sail.BitVec.updateSubrange (← readReg mcause) (((2 ^i 3) *i 8) -i 2) 0
      (zero_extend (m := 63) c))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 7 7
      (_get_Mstatus_MIE (← readReg mstatus)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 3 3 (0b0 : (BitVec 1)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 12 11
      (privLevel_to_bits (← readReg cur_privilege)))
    writeReg mtval (tval info)
    writeReg mepc pc
    writeReg cur_privilege del_priv
    let _ : Unit := (handle_trap_extension del_priv pc ext)
    if (get_config_print_reg ())
    then
      (pure (print_endline
          (HAppend.hAppend "CSR mstatus <- " (BitVec.toFormatted (← readReg mstatus)))))
    else (pure ())
    (prepare_trap_vector del_priv (← readReg mcause))
  | Supervisor =>
    assert (← (extensionEnabled Ext_S)) "no supervisor mode present for delegation"
    writeReg scause (Sail.BitVec.updateSubrange (← readReg scause) (((2 ^i 3) *i 8) -i 1)
      (((2 ^i 3) *i 8) -i 1) (bool_to_bits intr))
    writeReg scause (Sail.BitVec.updateSubrange (← readReg scause) (((2 ^i 3) *i 8) -i 2) 0
      (zero_extend (m := 63) c))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 5 5
      (_get_Mstatus_SIE (← readReg mstatus)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 1 1 (0b0 : (BitVec 1)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 8 8
      (← do
        match (← readReg cur_privilege) with
        | User => (pure (0b0 : (BitVec 1)))
        | Supervisor => (pure (0b1 : (BitVec 1)))
        | Machine =>
          (internal_error "riscv_sys_control.sail" 229 "invalid privilege for s-mode trap")))
    writeReg stval (tval info)
    writeReg sepc pc
    writeReg cur_privilege del_priv
    let _ : Unit := (handle_trap_extension del_priv pc ext)
    if (get_config_print_reg ())
    then
      (pure (print_endline
          (HAppend.hAppend "CSR mstatus <- " (BitVec.toFormatted (← readReg mstatus)))))
    else (pure ())
    (prepare_trap_vector del_priv (← readReg scause))
  | User => (internal_error "riscv_sys_control.sail" 243 "Invalid privilege level")

def exception_handler (cur_priv : Privilege) (ctl : ctl_result) (pc : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  match (cur_priv, ctl) with
  | (_, .CTL_TRAP e) =>
    let del_priv ← do (exception_delegatee e.trap cur_priv)
    let _ : Unit :=
      if (get_config_print_platform ())
      then
        (print_endline
          (HAppend.hAppend "trapping from "
            (HAppend.hAppend (privLevel_to_str cur_priv)
              (HAppend.hAppend " to "
                (HAppend.hAppend (privLevel_to_str del_priv)
                  (HAppend.hAppend " to handle " (exceptionType_to_str e.trap)))))))
      else ()
    (trap_handler del_priv false (exceptionType_to_bits e.trap) pc e.excinfo e.ext)
  | (_, .CTL_MRET ()) =>
    let prev_priv ← do readReg cur_privilege
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 3 3
      (_get_Mstatus_MPIE (← readReg mstatus)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 7 7 (0b1 : (BitVec 1)))
    writeReg cur_privilege (← (privLevel_of_bits (_get_Mstatus_MPP (← readReg mstatus))))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 12 11
      (privLevel_to_bits
        (← do
          if (← (extensionEnabled Ext_U))
          then (pure User)
          else (pure Machine))))
    if (bne (← readReg cur_privilege) Machine)
    then
      writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 17 17 (0b0 : (BitVec 1)))
    else (pure ())
    if (get_config_print_reg ())
    then
      (pure (print_endline
          (HAppend.hAppend "CSR mstatus <- " (BitVec.toFormatted (← readReg mstatus)))))
    else (pure ())
    if (get_config_print_platform ())
    then
      (pure (print_endline
          (HAppend.hAppend "ret-ing from "
            (HAppend.hAppend (privLevel_to_str prev_priv)
              (HAppend.hAppend " to " (privLevel_to_str (← readReg cur_privilege)))))))
    else (pure ())
    (prepare_xret_target Machine)
  | (_, .CTL_SRET ()) =>
    let prev_priv ← do readReg cur_privilege
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 1 1
      (_get_Mstatus_SPIE (← readReg mstatus)))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 5 5 (0b1 : (BitVec 1)))
    writeReg cur_privilege (← do
      if (BEq.beq (_get_Mstatus_SPP (← readReg mstatus)) (0b1 : (BitVec 1)))
      then (pure Supervisor)
      else (pure User))
    writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 8 8 (0b0 : (BitVec 1)))
    if (bne (← readReg cur_privilege) Machine)
    then
      writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 17 17 (0b0 : (BitVec 1)))
    else (pure ())
    if (get_config_print_reg ())
    then
      (pure (print_endline
          (HAppend.hAppend "CSR mstatus <- " (BitVec.toFormatted (← readReg mstatus)))))
    else (pure ())
    if (get_config_print_platform ())
    then
      (pure (print_endline
          (HAppend.hAppend "ret-ing from "
            (HAppend.hAppend (privLevel_to_str prev_priv)
              (HAppend.hAppend " to " (privLevel_to_str (← readReg cur_privilege)))))))
    else (pure ())
    (prepare_xret_target Supervisor)

def handle_mem_exception (typ_0 : virtaddr) (e : ExceptionType) : SailM Unit := do
  let .virtaddr addr : virtaddr := typ_0
  let t : sync_exception :=
    { trap := e
      excinfo := (some addr)
      ext := none }
  (set_next_pc (← (exception_handler (← readReg cur_privilege) (CTL_TRAP t) (← readReg PC))))

def handle_exception (e : ExceptionType) : SailM Unit := do
  let t : sync_exception :=
    { trap := e
      excinfo := none
      ext := none }
  (set_next_pc (← (exception_handler (← readReg cur_privilege) (CTL_TRAP t) (← readReg PC))))

def handle_interrupt (i : InterruptType) (del_priv : Privilege) : SailM Unit := do
  (set_next_pc
    (← (trap_handler del_priv true (interruptType_to_bits i) (← readReg PC) none none)))

def reset_misa (_ : Unit) : SailM Unit := do
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 0 0 (0b1 : (BitVec 1)))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 2 2
    (bool_to_bits (sys_enable_rvc ())))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 1 1
    (bool_to_bits (sys_enable_bext ())))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 8 8 (0b1 : (BitVec 1)))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 12 12 (0b1 : (BitVec 1)))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 20 20
    (bool_to_bits (sys_enable_user ())))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 18 18
    (bool_to_bits (sys_enable_supervisor ())))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 21 21
    (bool_to_bits (sys_enable_vext ())))
  if (Bool.and (sys_enable_fdext ()) (sys_enable_zfinx ()))
  then (internal_error "riscv_sys_control.sail" 322 "F and Zfinx cannot both be enabled!")
  else (pure ())
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 5 5
    (bool_to_bits (sys_enable_fdext ())))
  writeReg misa (Sail.BitVec.updateSubrange (← readReg misa) 3 3
    (bool_to_bits (sys_enable_fdext ())))

def reset_sys (_ : Unit) : SailM Unit := do
  writeReg cur_privilege Machine
  writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 3 3 (0b0 : (BitVec 1)))
  writeReg mstatus (Sail.BitVec.updateSubrange (← readReg mstatus) 17 17 (0b0 : (BitVec 1)))
  (reset_misa ())
  (cancel_reservation ())
  writeReg mcause (zeros_implicit (n := ((2 ^i 3) *i 8)))
  (reset_pmp ())
  writeReg vstart (zeros_implicit (n := 16))
  writeReg vl (zeros_implicit (n := ((2 ^i 3) *i 8)))
  writeReg vcsr (Sail.BitVec.updateSubrange (← readReg vcsr) 2 1 (0b00 : (BitVec 2)))
  writeReg vcsr (Sail.BitVec.updateSubrange (← readReg vcsr) 0 0 (0b0 : (BitVec 1)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) (((2 ^i 3) *i 8) -i 1)
    (((2 ^i 3) *i 8) -i 1) (0b1 : (BitVec 1)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) (((2 ^i 3) *i 8) -i 2) 8
    (zeros_implicit (n := 55)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) 7 7 (0b0 : (BitVec 1)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) 6 6 (0b0 : (BitVec 1)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) 5 3 (0b000 : (BitVec 3)))
  writeReg vtype (Sail.BitVec.updateSubrange (← readReg vtype) 2 0 (0b000 : (BitVec 3)))
  if (get_config_print_reg ())
  then
    (pure (print_endline
        (HAppend.hAppend "CSR mstatus <- "
          (HAppend.hAppend (BitVec.toFormatted (← readReg mstatus))
            (HAppend.hAppend " (input: "
              (HAppend.hAppend
                (BitVec.toFormatted ((zeros_implicit (n := ((2 ^i 3) *i 8))) : xlenbits)) ")"))))))
  else (pure ())

/-- Type quantifiers: k_t : Type -/
def MemoryOpResult_add_meta (r : (Result k_t ExceptionType)) (m : Unit) : (Result (k_t × Unit) ExceptionType) :=
  match r with
  | .Ok v => (Ok (v, m))
  | .Err e => (Err e)

/-- Type quantifiers: k_t : Type -/
def MemoryOpResult_drop_meta (r : (Result (k_t × Unit) ExceptionType)) : (Result k_t ExceptionType) :=
  match r with
  | .Ok (v, m) => (Ok v)
  | .Err e => (Err e)

def plat_htif_tohost (_ : Unit) : (BitVec 64) :=
  (to_bits physaddrbits_len (elf_tohost ()))

/-- Type quantifiers: width : Int, width ≤ max_mem_access -/
def within_phys_mem (typ_0 : physaddr) (width : Int) : Bool :=
  let .physaddr addr : physaddr := typ_0
  let addr_int := (BitVec.toNat addr)
  let ram_base_int := (BitVec.toNat (plat_ram_base ()))
  let rom_base_int := (BitVec.toNat (plat_rom_base ()))
  let ram_size_int := (BitVec.toNat (plat_ram_size ()))
  let rom_size_int := (BitVec.toNat (plat_rom_size ()))
  if (Bool.and (ram_base_int ≤b addr_int)
       ((addr_int +i width) ≤b (ram_base_int +i ram_size_int)))
  then true
  else
    if (Bool.and (rom_base_int ≤b addr_int)
         ((addr_int +i width) ≤b (rom_base_int +i rom_size_int)))
    then true
    else
      let _ : Unit :=
        (print_endline
          (HAppend.hAppend "within_phys_mem: "
            (HAppend.hAppend (BitVec.toFormatted addr) " not within phys-mem:")))
      let _ : Unit :=
        (print_endline (HAppend.hAppend "  plat_rom_base: " (BitVec.toFormatted (plat_rom_base ()))))
      let _ : Unit :=
        (print_endline (HAppend.hAppend "  plat_rom_size: " (BitVec.toFormatted (plat_rom_size ()))))
      let _ : Unit :=
        (print_endline (HAppend.hAppend "  plat_ram_base: " (BitVec.toFormatted (plat_ram_base ()))))
      let _ : Unit :=
        (print_endline (HAppend.hAppend "  plat_ram_size: " (BitVec.toFormatted (plat_ram_size ()))))
      false

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def within_clint (typ_0 : physaddr) (width : Nat) : Bool :=
  let .physaddr addr : physaddr := typ_0
  let addr_int := (BitVec.toNat addr)
  let clint_base_int := (BitVec.toNat (plat_clint_base ()))
  let clint_size_int := (BitVec.toNat (plat_clint_size ()))
  (Bool.and (clint_base_int ≤b addr_int)
    ((addr_int +i width) ≤b (clint_base_int +i clint_size_int)))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def within_htif_writable (typ_0 : physaddr) (width : Nat) : Bool :=
  let .physaddr addr : physaddr := typ_0
  (Bool.or (BEq.beq (plat_htif_tohost ()) addr)
    (Bool.and (BEq.beq (BitVec.addInt (plat_htif_tohost ()) 4) addr) (BEq.beq width 4)))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def within_htif_readable (typ_0 : physaddr) (width : Nat) : Bool :=
  let .physaddr addr : physaddr := typ_0
  (Bool.or (BEq.beq (plat_htif_tohost ()) addr)
    (Bool.and (BEq.beq (BitVec.addInt (plat_htif_tohost ()) 4) addr) (BEq.beq width 4)))

def MSIP_BASE : physaddrbits := (zero_extend (m := 64) (0x00000 : (BitVec 20)))

def MTIMECMP_BASE : physaddrbits := (zero_extend (m := 64) (0x04000 : (BitVec 20)))

def MTIMECMP_BASE_HI : physaddrbits := (zero_extend (m := 64) (0x04004 : (BitVec 20)))

def MTIME_BASE : physaddrbits := (zero_extend (m := 64) (0x0BFF8 : (BitVec 20)))

def MTIME_BASE_HI : physaddrbits := (zero_extend (m := 64) (0x0BFFC : (BitVec 20)))

/-- Type quantifiers: width : Nat, width > 0 -/
def clint_load (t : (AccessType Unit)) (app_1 : physaddr) (width : Nat) : SailM (Result (BitVec (8 * width)) ExceptionType) := do
  let .physaddr addr := app_1
  let addr := (addr - (plat_clint_base ()))
  if (Bool.and (BEq.beq addr MSIP_BASE) (Bool.or (BEq.beq width 8) (BEq.beq width 4)))
  then
    if (get_config_print_platform ())
    then
      (pure (print_endline
          (HAppend.hAppend "clint["
            (HAppend.hAppend (BitVec.toFormatted addr)
              (HAppend.hAppend "] -> " (BitVec.toFormatted (_get_Minterrupts_MSI (← readReg mip))))))))
    else (pure ())
    (pure (Ok (zero_extend (m := (8 *i width)) (_get_Minterrupts_MSI (← readReg mip)))))
  else
    if (Bool.and (BEq.beq addr MTIMECMP_BASE) (BEq.beq width 4))
    then
      if (get_config_print_platform ())
      then
        (pure (print_endline
            (HAppend.hAppend "clint<4>["
              (HAppend.hAppend (BitVec.toFormatted addr)
                (HAppend.hAppend "] -> "
                  (BitVec.toFormatted (Sail.BitVec.extractLsb (← readReg mtimecmp) 31 0)))))))
      else (pure ())
      (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg mtimecmp) 31 0))))
    else
      if (Bool.and (BEq.beq addr MTIMECMP_BASE) (BEq.beq width 8))
      then
        if (get_config_print_platform ())
        then
          (pure (print_endline
              (HAppend.hAppend "clint<8>["
                (HAppend.hAppend (BitVec.toFormatted addr)
                  (HAppend.hAppend "] -> " (BitVec.toFormatted (← readReg mtimecmp)))))))
        else (pure ())
        (pure (Ok (zero_extend (m := 64) (← readReg mtimecmp))))
      else
        if (Bool.and (BEq.beq addr MTIMECMP_BASE_HI) (BEq.beq width 4))
        then
          if (get_config_print_platform ())
          then
            (pure (print_endline
                (HAppend.hAppend "clint-hi<4>["
                  (HAppend.hAppend (BitVec.toFormatted addr)
                    (HAppend.hAppend "] -> "
                      (BitVec.toFormatted (Sail.BitVec.extractLsb (← readReg mtimecmp) 63 32)))))))
          else (pure ())
          (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg mtimecmp) 63 32))))
        else
          if (Bool.and (BEq.beq addr MTIME_BASE) (BEq.beq width 4))
          then
            if (get_config_print_platform ())
            then
              (pure (print_endline
                  (HAppend.hAppend "clint["
                    (HAppend.hAppend (BitVec.toFormatted addr)
                      (HAppend.hAppend "] -> " (BitVec.toFormatted (← readReg mtime)))))))
            else (pure ())
            (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg mtime) 31 0))))
          else
            if (Bool.and (BEq.beq addr MTIME_BASE) (BEq.beq width 8))
            then
              if (get_config_print_platform ())
              then
                (pure (print_endline
                    (HAppend.hAppend "clint["
                      (HAppend.hAppend (BitVec.toFormatted addr)
                        (HAppend.hAppend "] -> " (BitVec.toFormatted (← readReg mtime)))))))
              else (pure ())
              (pure (Ok (zero_extend (m := 64) (← readReg mtime))))
            else
              if (Bool.and (BEq.beq addr MTIME_BASE_HI) (BEq.beq width 4))
              then
                if (get_config_print_platform ())
                then
                  (pure (print_endline
                      (HAppend.hAppend "clint["
                        (HAppend.hAppend (BitVec.toFormatted addr)
                          (HAppend.hAppend "] -> " (BitVec.toFormatted (← readReg mtime)))))))
                else (pure ())
                (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg mtime) 63 32))))
              else
                let _ : Unit :=
                  if (get_config_print_platform ())
                  then
                    (print_endline
                      (HAppend.hAppend "clint["
                        (HAppend.hAppend (BitVec.toFormatted addr) "] -> <not-mapped>")))
                  else ()
                match t with
                | .Execute () => (pure (Err (E_Fetch_Access_Fault ())))
                | .Read Data => (pure (Err (E_Load_Access_Fault ())))
                | _ => (pure (Err (E_SAMO_Access_Fault ())))

def clint_dispatch (_ : Unit) : SailM Unit := do
  writeReg mip (Sail.BitVec.updateSubrange (← readReg mip) 7 7
    (bool_to_bits (zopz0zIzJ_u (← readReg mtimecmp) (← readReg mtime))))
  if (← (extensionEnabled Ext_Sstc))
  then
    writeReg mip (Sail.BitVec.updateSubrange (← readReg mip) 5 5
      (bool_to_bits (zopz0zIzJ_u (← readReg stimecmp) (← readReg mtime))))
  else (pure ())
  if (get_config_print_platform ())
  then
    (pure (print_endline
        (HAppend.hAppend "clint mtime "
          (HAppend.hAppend (BitVec.toFormatted (← readReg mtime))
            (HAppend.hAppend " (mip.MTI <- "
              (HAppend.hAppend (BitVec.toFormatted (_get_Minterrupts_MTI (← readReg mip)))
                (HAppend.hAppend
                  (← do
                    if (← (extensionEnabled Ext_Sstc))
                    then
                      (pure (HAppend.hAppend ", mip.STI <- "
                          (BitVec.toFormatted (_get_Minterrupts_STI (← readReg mip)))))
                    else (pure "")) ")")))))))
  else (pure ())

/-- Type quantifiers: width : Nat, width > 0 -/
def clint_store (app_0 : physaddr) (width : Nat) (data : (BitVec (8 * width))) : SailM (Result Bool ExceptionType) := do
  let .physaddr addr := app_0
  let addr := (addr - (plat_clint_base ()))
  if (Bool.and (BEq.beq addr MSIP_BASE) (Bool.or (BEq.beq width 8) (BEq.beq width 4)))
  then
    if (get_config_print_platform ())
    then
      (pure (print_endline
          (HAppend.hAppend "clint["
            (HAppend.hAppend (BitVec.toFormatted addr)
              (HAppend.hAppend "] <- "
                (HAppend.hAppend (BitVec.toFormatted data)
                  (HAppend.hAppend " (mip.MSI <- "
                    (HAppend.hAppend (← (bit_str (BitVec.access data 0))) ")"))))))))
    else (pure ())
    writeReg mip (Sail.BitVec.updateSubrange (← readReg mip) 3 3
      (BitVec.join1 [(BitVec.access data 0)]))
    (clint_dispatch ())
    (pure (Ok true))
  else
    if (Bool.and (BEq.beq addr MTIMECMP_BASE) (BEq.beq width 8))
    then
      let _ : Unit :=
        if (get_config_print_platform ())
        then
          (print_endline
            (HAppend.hAppend "clint<8>["
              (HAppend.hAppend (BitVec.toFormatted addr)
                (HAppend.hAppend "] <- " (HAppend.hAppend (BitVec.toFormatted data) " (mtimecmp)")))))
        else ()
      writeReg mtimecmp (zero_extend (m := 64) data)
      (clint_dispatch ())
      (pure (Ok true))
    else
      if (Bool.and (BEq.beq addr MTIMECMP_BASE) (BEq.beq width 4))
      then
        let _ : Unit :=
          if (get_config_print_platform ())
          then
            (print_endline
              (HAppend.hAppend "clint<4>["
                (HAppend.hAppend (BitVec.toFormatted addr)
                  (HAppend.hAppend "] <- " (HAppend.hAppend (BitVec.toFormatted data) " (mtimecmp)")))))
          else ()
        writeReg mtimecmp (Sail.BitVec.updateSubrange (← readReg mtimecmp) 31 0
          (zero_extend (m := 32) data))
        (clint_dispatch ())
        (pure (Ok true))
      else
        if (Bool.and (BEq.beq addr MTIMECMP_BASE_HI) (BEq.beq width 4))
        then
          let _ : Unit :=
            if (get_config_print_platform ())
            then
              (print_endline
                (HAppend.hAppend "clint<4>["
                  (HAppend.hAppend (BitVec.toFormatted addr)
                    (HAppend.hAppend "] <- "
                      (HAppend.hAppend (BitVec.toFormatted data) " (mtimecmp)")))))
            else ()
          writeReg mtimecmp (Sail.BitVec.updateSubrange (← readReg mtimecmp) 63 32
            (zero_extend (m := 32) data))
          (clint_dispatch ())
          (pure (Ok true))
        else
          if (Bool.and (BEq.beq addr MTIME_BASE) (BEq.beq width 8))
          then
            let _ : Unit :=
              if (get_config_print_platform ())
              then
                (print_endline
                  (HAppend.hAppend "clint<8>["
                    (HAppend.hAppend (BitVec.toFormatted addr)
                      (HAppend.hAppend "] <- "
                        (HAppend.hAppend (BitVec.toFormatted data) " (mtime)")))))
              else ()
            writeReg mtime data
            (clint_dispatch ())
            (pure (Ok true))
          else
            if (Bool.and (BEq.beq addr MTIME_BASE) (BEq.beq width 4))
            then
              let _ : Unit :=
                if (get_config_print_platform ())
                then
                  (print_endline
                    (HAppend.hAppend "clint<4>["
                      (HAppend.hAppend (BitVec.toFormatted addr)
                        (HAppend.hAppend "] <- "
                          (HAppend.hAppend (BitVec.toFormatted data) " (mtime)")))))
                else ()
              writeReg mtime (Sail.BitVec.updateSubrange (← readReg mtime) 31 0 data)
              (clint_dispatch ())
              (pure (Ok true))
            else
              if (Bool.and (BEq.beq addr MTIME_BASE_HI) (BEq.beq width 4))
              then
                let _ : Unit :=
                  if (get_config_print_platform ())
                  then
                    (print_endline
                      (HAppend.hAppend "clint<4>["
                        (HAppend.hAppend (BitVec.toFormatted addr)
                          (HAppend.hAppend "] <- "
                            (HAppend.hAppend (BitVec.toFormatted data) " (mtime)")))))
                  else ()
                writeReg mtime (Sail.BitVec.updateSubrange (← readReg mtime) 63 32 data)
                (clint_dispatch ())
                (pure (Ok true))
              else
                let _ : Unit :=
                  if (get_config_print_platform ())
                  then
                    (print_endline
                      (HAppend.hAppend "clint["
                        (HAppend.hAppend (BitVec.toFormatted addr)
                          (HAppend.hAppend "] <- "
                            (HAppend.hAppend (BitVec.toFormatted data) " (<unmapped>)")))))
                  else ()
                (pure (Err (E_SAMO_Access_Fault ())))

def tick_clock (_ : Unit) : SailM Unit := do
  if (← (should_inc_mcycle (← readReg cur_privilege)))
  then writeReg mcycle (BitVec.addInt (← readReg mcycle) 1)
  else (pure ())
  writeReg mtime (BitVec.addInt (← readReg mtime) 1)
  (clint_dispatch ())

def undefined_htif_cmd (_ : Unit) : SailM (BitVec 64) := do
  (undefined_bitvector 64)

def Mk_htif_cmd (v : (BitVec 64)) : (BitVec 64) :=
  v

def _get_htif_cmd_cmd (v : (BitVec 64)) : (BitVec 8) :=
  (Sail.BitVec.extractLsb v 55 48)

def _update_htif_cmd_cmd (v : (BitVec 64)) (x : (BitVec 8)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 55 48 x)

def _set_htif_cmd_cmd (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 8)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_htif_cmd_cmd r v)

def _get_htif_cmd_device (v : (BitVec 64)) : (BitVec 8) :=
  (Sail.BitVec.extractLsb v 63 56)

def _update_htif_cmd_device (v : (BitVec 64)) (x : (BitVec 8)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 63 56 x)

def _set_htif_cmd_device (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 8)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_htif_cmd_device r v)

def _get_htif_cmd_payload (v : (BitVec 64)) : (BitVec 48) :=
  (Sail.BitVec.extractLsb v 47 0)

def _update_htif_cmd_payload (v : (BitVec 64)) (x : (BitVec 48)) : (BitVec 64) :=
  (Sail.BitVec.updateSubrange v 47 0 x)

def _set_htif_cmd_payload (r_ref : (RegisterRef (BitVec 64))) (v : (BitVec 48)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_htif_cmd_payload r v)

def reset_htif (_ : Unit) : SailM Unit := do
  writeReg htif_cmd_write 0#1
  writeReg htif_payload_writes (0x0 : (BitVec 4))
  writeReg htif_tohost (zeros_implicit (n := 64))

/-- Type quantifiers: width : Nat, width > 0 -/
def htif_load (t : (AccessType Unit)) (app_1 : physaddr) (width : Nat) : SailM (Result (BitVec (8 * width)) ExceptionType) := do
  let .physaddr paddr := app_1
  if (get_config_print_platform ())
  then
    (pure (print_endline
        (HAppend.hAppend "htif["
          (HAppend.hAppend (BitVec.toFormatted paddr)
            (HAppend.hAppend "] -> " (BitVec.toFormatted (← readReg htif_tohost)))))))
  else (pure ())
  if (Bool.and (BEq.beq width 8) (BEq.beq paddr (plat_htif_tohost ())))
  then (pure (Ok (zero_extend (m := 64) (← readReg htif_tohost))))
  else
    if (Bool.and (BEq.beq width 4) (BEq.beq paddr (plat_htif_tohost ())))
    then (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg htif_tohost) 31 0))))
    else
      if (Bool.and (BEq.beq width 4) (BEq.beq paddr (BitVec.addInt (plat_htif_tohost ()) 4)))
      then
        (pure (Ok (zero_extend (m := 32) (Sail.BitVec.extractLsb (← readReg htif_tohost) 63 32))))
      else
        match t with
        | .Execute () => (pure (Err (E_Fetch_Access_Fault ())))
        | .Read Data => (pure (Err (E_Load_Access_Fault ())))
        | _ => (pure (Err (E_SAMO_Access_Fault ())))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ 8 -/
def htif_store (app_0 : physaddr) (width : Nat) (data : (BitVec (8 * width))) : SailM (Result Bool ExceptionType) := do
  let .physaddr paddr := app_0
  let _ : Unit :=
    if (get_config_print_platform ())
    then
      (print_endline
        (HAppend.hAppend "htif["
          (HAppend.hAppend (BitVec.toFormatted paddr)
            (HAppend.hAppend "] <- " (BitVec.toFormatted data)))))
    else ()
  if (BEq.beq width 8)
  then
    writeReg htif_cmd_write 1#1
    writeReg htif_payload_writes (BitVec.addInt (← readReg htif_payload_writes) 1)
    writeReg htif_tohost (zero_extend (m := 64) data)
  else
    if (Bool.and (BEq.beq width 4) (BEq.beq paddr (plat_htif_tohost ())))
    then
      if (BEq.beq data (Sail.BitVec.extractLsb (← readReg htif_tohost) 31 0))
      then writeReg htif_payload_writes (BitVec.addInt (← readReg htif_payload_writes) 1)
      else writeReg htif_payload_writes (0x1 : (BitVec 4))
      writeReg htif_tohost (Sail.BitVec.updateSubrange (← readReg htif_tohost) 31 0 data)
    else
      if (Bool.and (BEq.beq width 4) (BEq.beq paddr (BitVec.addInt (plat_htif_tohost ()) 4)))
      then
        if (BEq.beq (Sail.BitVec.extractLsb data 15 0)
             (Sail.BitVec.extractLsb (← readReg htif_tohost) 47 32))
        then writeReg htif_payload_writes (BitVec.addInt (← readReg htif_payload_writes) 1)
        else writeReg htif_payload_writes (0x1 : (BitVec 4))
        writeReg htif_cmd_write 1#1
        writeReg htif_tohost (Sail.BitVec.updateSubrange (← readReg htif_tohost) 63 32 data)
      else writeReg htif_tohost (zero_extend (m := 64) data)
  if (Bool.or
       (Bool.and (BEq.beq (← readReg htif_cmd_write) 1#1)
         (← do
           (pure ((BitVec.toNat (← readReg htif_payload_writes)) >b 0))))
       (← do
         (pure ((BitVec.toNat (← readReg htif_payload_writes)) >b 2))))
  then
    let cmd ← do (pure (Mk_htif_cmd (← readReg htif_tohost)))
    let b__0 := (_get_htif_cmd_device cmd)
    if (BEq.beq b__0 (0x00 : (BitVec 8)))
    then
      let _ : Unit :=
        if (get_config_print_platform ())
        then
          (print_endline
            (HAppend.hAppend "htif-syscall-proxy cmd: "
              (BitVec.toFormatted (_get_htif_cmd_payload cmd))))
        else ()
      if (BEq.beq (BitVec.access (_get_htif_cmd_payload cmd) 0) 1#1)
      then
        writeReg htif_done true
        writeReg htif_exit_code (shiftr (zero_extend (m := 64) (_get_htif_cmd_payload cmd)) 1)
      else (pure ())
    else
      if (BEq.beq b__0 (0x01 : (BitVec 8)))
      then
        let _ : Unit :=
          if (get_config_print_platform ())
          then
            (print_endline
              (HAppend.hAppend "htif-term cmd: " (BitVec.toFormatted (_get_htif_cmd_payload cmd))))
          else ()
        let b__2 := (_get_htif_cmd_cmd cmd)
        if (BEq.beq b__2 (0x00 : (BitVec 8)))
        then (pure ())
        else
          if (BEq.beq b__2 (0x01 : (BitVec 8)))
          then (plat_term_write (Sail.BitVec.extractLsb (_get_htif_cmd_payload cmd) 7 0))
          else (pure (print (HAppend.hAppend "Unknown term cmd: " (BitVec.toFormatted b__2))))
        (reset_htif ())
      else (pure (print (HAppend.hAppend "htif-???? cmd: " (BitVec.toFormatted data))))
  else (pure ())
  (pure (Ok true))

def htif_tick (_ : Unit) : SailM Unit := do
  if (get_config_print_platform ())
  then
    (pure (print_endline
        (HAppend.hAppend "htif::tick " (BitVec.toFormatted (← readReg htif_tohost)))))
  else (pure ())
  writeReg htif_tohost (← readReg htif_tohost)

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def within_mmio_readable (addr : physaddr) (width : Nat) : Bool :=
  (Bool.or (within_clint addr width) (Bool.and (within_htif_readable addr width) (1 ≤b width)))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def within_mmio_writable (addr : physaddr) (width : Nat) : Bool :=
  (Bool.or (within_clint addr width) (Bool.and (within_htif_writable addr width) (width ≤b 8)))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def mmio_read (t : (AccessType Unit)) (paddr : physaddr) (width : Nat) : SailM (Result (BitVec (8 * width)) ExceptionType) := do
  if (within_clint paddr width)
  then (clint_load t paddr width)
  else
    if (Bool.and (within_htif_readable paddr width) (1 ≤b width))
    then (htif_load t paddr width)
    else
      match t with
      | .Execute () => (pure (Err (E_Fetch_Access_Fault ())))
      | .Read Data => (pure (Err (E_Load_Access_Fault ())))
      | _ => (pure (Err (E_SAMO_Access_Fault ())))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def mmio_write (paddr : physaddr) (width : Nat) (data : (BitVec (8 * width))) : SailM (Result Bool ExceptionType) := do
  if (within_clint paddr width)
  then (clint_store paddr width data)
  else
    if (Bool.and (within_htif_writable paddr width) (width ≤b 8))
    then (htif_store paddr width data)
    else (pure (Err (E_SAMO_Access_Fault ())))

def init_platform (_ : Unit) : SailM Unit := do
  writeReg htif_tohost (zeros_implicit (n := 64))
  writeReg htif_done false
  writeReg htif_exit_code (zeros_implicit (n := 64))
  writeReg htif_cmd_write 0#1
  writeReg htif_payload_writes (zeros_implicit (n := 4))

def tick_platform (_ : Unit) : SailM Unit := do
  (htif_tick ())

def handle_illegal (_ : Unit) : SailM Unit := do
  let info ← do
    if (plat_mtval_has_illegal_inst_bits ())
    then (pure (some (← readReg instbits)))
    else (pure none)
  let t : sync_exception :=
    { trap := (E_Illegal_Instr ())
      excinfo := info
      ext := none }
  (set_next_pc (← (exception_handler (← readReg cur_privilege) (CTL_TRAP t) (← readReg PC))))

def platform_wfi (_ : Unit) : Unit :=
  ()

/-- Type quantifiers: width : Int -/
def is_aligned_addr (typ_0 : physaddr) (width : Int) : Bool :=
  let .physaddr addr : physaddr := typ_0
  (BEq.beq (Int.emod (BitVec.toNat addr) width) 0)

/-- Type quantifiers: k_ex103224# : Bool, k_ex103223# : Bool, k_ex103222# : Bool -/
def read_kind_of_flags (aq : Bool) (rl : Bool) (res : Bool) : (Option read_kind) :=
  match (aq, rl, res) with
  | (false, false, false) => (some Read_plain)
  | (true, false, false) => (some Read_RISCV_acquire)
  | (true, true, false) => (some Read_RISCV_strong_acquire)
  | (false, false, true) => (some Read_RISCV_reserved)
  | (true, false, true) => (some Read_RISCV_reserved_acquire)
  | (true, true, true) => (some Read_RISCV_reserved_strong_acquire)
  | (false, true, false) => none
  | (false, true, true) => none

/-- Type quantifiers: k_ex103230# : Bool, k_ex103229# : Bool, k_ex103228# : Bool -/
def write_kind_of_flags (aq : Bool) (rl : Bool) (con : Bool) : SailM write_kind := do
  match (aq, rl, con) with
  | (false, false, false) => (pure Write_plain)
  | (false, true, false) => (pure Write_RISCV_release)
  | (false, false, true) => (pure Write_RISCV_conditional)
  | (false, true, true) => (pure Write_RISCV_conditional_release)
  | (true, true, false) => (pure Write_RISCV_strong_release)
  | (true, true, true) => (pure Write_RISCV_conditional_strong_release)
  | (true, false, false) => sailThrow ((Error_not_implemented "store.aq"))
  | (true, false, true) => sailThrow ((Error_not_implemented "sc.aq"))

/-- Type quantifiers: k_ex103237# : Bool, k_ex103236# : Bool, k_ex103235# : Bool, k_ex103234# : Bool, width
  : Nat, 0 < width ∧ width ≤ max_mem_access -/
def phys_mem_read (t : (AccessType Unit)) (paddr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (res : Bool) (meta : Bool) : SailM (Result ((BitVec (8 * width)) × Unit) ExceptionType) := do
  let result ← do
    match (read_kind_of_flags aq rl res) with
    | .some rk => (pure (some (← (read_ram rk paddr width meta))))
    | none => (pure none)
  match (t, result) with
  | (.Execute (), none) => (pure (Err (E_Fetch_Access_Fault ())))
  | (.Read Data, none) => (pure (Err (E_Load_Access_Fault ())))
  | (_, none) => (pure (Err (E_SAMO_Access_Fault ())))
  | (_, .some (v, m)) =>
    let _ : Unit :=
      if (get_config_print_mem ())
      then
        (print_endline
          (HAppend.hAppend "mem["
            (HAppend.hAppend (accessType_to_str t)
              (HAppend.hAppend ","
                (HAppend.hAppend (BitVec.toFormatted (physaddr_bits paddr))
                  (HAppend.hAppend "] -> " (BitVec.toFormatted v)))))))
      else ()
    (pure (Ok (v, m)))

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def phys_access_check (t : (AccessType Unit)) (p : Privilege) (paddr : physaddr) (width : Nat) : SailM (Option ExceptionType) := do
  if (BEq.beq (sys_pmp_count ()) 0)
  then (pure none)
  else (pmpCheck paddr width t p)

/-- Type quantifiers: k_ex103261# : Bool, k_ex103260# : Bool, k_ex103259# : Bool, k_ex103258# : Bool, width
  : Nat, 0 < width ∧ width ≤ max_mem_access -/
def checked_mem_read (t : (AccessType Unit)) (priv : Privilege) (paddr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (res : Bool) (meta : Bool) : SailM (Result ((BitVec (8 * width)) × Unit) ExceptionType) := do
  match (← (phys_access_check t priv paddr width)) with
  | .some e => (pure (Err e))
  | none =>
    if (within_mmio_readable paddr width)
    then (pure (MemoryOpResult_add_meta (← (mmio_read t paddr width)) default_meta))
    else
      if (within_phys_mem paddr width)
      then
        match (ext_check_phys_mem_read t paddr width aq rl res meta) with
        | .Ext_PhysAddr_OK () => (phys_mem_read t paddr width aq rl res meta)
        | .Ext_PhysAddr_Error e => (pure (Err e))
      else
        match t with
        | .Execute () => (pure (Err (E_Fetch_Access_Fault ())))
        | .Read Data => (pure (Err (E_Load_Access_Fault ())))
        | _ => (pure (Err (E_SAMO_Access_Fault ())))

/-- Type quantifiers: width : Nat, width > 0 -/
def rvfi_read (app_0 : physaddr) (width : Nat) (result : (Result ((BitVec (8 * width)) × Unit) ExceptionType)) : Unit :=
  let .physaddr addr := app_0
  ()

/-- Type quantifiers: k_ex103271# : Bool, k_ex103270# : Bool, k_ex103269# : Bool, k_ex103268# : Bool, width
  : Nat, 0 < width ∧ width ≤ max_mem_access -/
def mem_read_priv_meta (typ : (AccessType Unit)) (priv : Privilege) (paddr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (res : Bool) (meta : Bool) : SailM (Result ((BitVec (8 * width)) × Unit) ExceptionType) := do
  let result ← (( do
    if (Bool.and (Bool.or aq res) (not (is_aligned_addr paddr width)))
    then (pure (Err (E_Load_Addr_Align ())))
    else
      match (aq, rl, res) with
      | (false, true, false) => sailThrow ((Error_not_implemented "load.rl"))
      | (false, true, true) => sailThrow ((Error_not_implemented "lr.rl"))
      | (_, _, _) => (checked_mem_read typ priv paddr width aq rl res meta) ) : SailM
    (MemoryOpResult ((BitVec (8 * width)) × mem_meta)) )
  let _ : Unit := (rvfi_read paddr width result)
  (pure result)

/-- Type quantifiers: k_ex103325# : Bool, k_ex103324# : Bool, k_ex103323# : Bool, k_ex103322# : Bool, width
  : Nat, 0 < width ∧ width ≤ max_mem_access -/
def mem_read_meta (typ : (AccessType Unit)) (paddr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (res : Bool) (meta : Bool) : SailM (Result ((BitVec (8 * width)) × Unit) ExceptionType) := do
  (mem_read_priv_meta typ
    (← (effectivePrivilege typ (← readReg mstatus) (← readReg cur_privilege))) paddr width aq
    rl res meta)

/-- Type quantifiers: k_ex103328# : Bool, k_ex103327# : Bool, k_ex103326# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_read_priv (typ : (AccessType Unit)) (priv : Privilege) (paddr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (res : Bool) : SailM (Result (BitVec (8 * width)) ExceptionType) := do
  (pure (MemoryOpResult_drop_meta (← (mem_read_priv_meta typ priv paddr width aq rl res false))))

/-- Type quantifiers: k_ex103331# : Bool, k_ex103330# : Bool, k_ex103329# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_read (typ : (AccessType Unit)) (paddr : physaddr) (width : Nat) (aq : Bool) (rel : Bool) (res : Bool) : SailM (Result (BitVec (8 * width)) ExceptionType) := do
  (mem_read_priv typ
    (← (effectivePrivilege typ (← readReg mstatus) (← readReg cur_privilege))) paddr width aq
    rel res)

/-- Type quantifiers: k_ex103334# : Bool, k_ex103333# : Bool, k_ex103332# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_write_ea (addr : physaddr) (width : Nat) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Unit ExceptionType) := do
  if (Bool.and (Bool.or rl con) (not (is_aligned_addr addr width)))
  then (pure (Err (E_SAMO_Addr_Align ())))
  else (pure (Ok (write_ram_ea (← (write_kind_of_flags aq rl con)) addr width)))

/-- Type quantifiers: width : Nat, width > 0 -/
def rvfi_write (app_0 : physaddr) (width : Nat) (value : (BitVec (8 * width))) (meta : Unit) (result : (Result Bool ExceptionType)) : Unit :=
  let .physaddr addr := app_0
  ()

/-- Type quantifiers: width : Nat, 0 < width ∧ width ≤ max_mem_access -/
def phys_mem_write (wk : write_kind) (paddr : physaddr) (width : Nat) (data : (BitVec (8 * width))) (meta : Unit) : SailM (Result Bool ExceptionType) := do
  let result ← do (write_ram wk paddr width data meta)
  let _ : Unit :=
    if (get_config_print_mem ())
    then
      (print_endline
        (HAppend.hAppend "mem["
          (HAppend.hAppend (BitVec.toFormatted (physaddr_bits paddr))
            (HAppend.hAppend "] <- " (BitVec.toFormatted data)))))
    else ()
  (pure (Ok result))

/-- Type quantifiers: k_ex103352# : Bool, k_ex103351# : Bool, k_ex103350# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def checked_mem_write (paddr : physaddr) (width : Nat) (data : (BitVec (8 * width))) (typ : (AccessType Unit)) (priv : Privilege) (meta : Unit) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Bool ExceptionType) := do
  match (← (phys_access_check typ priv paddr width)) with
  | .some e => (pure (Err e))
  | none =>
    if (within_mmio_writable paddr width)
    then (mmio_write paddr width data)
    else
      if (within_phys_mem paddr width)
      then
        let wk ← do (write_kind_of_flags aq rl con)
        match (ext_check_phys_mem_write wk paddr width data meta) with
        | .Ext_PhysAddr_OK () => (phys_mem_write wk paddr width data meta)
        | .Ext_PhysAddr_Error e => (pure (Err e))
      else (pure (Err (E_SAMO_Access_Fault ())))

/-- Type quantifiers: k_ex103366# : Bool, k_ex103365# : Bool, k_ex103364# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_write_value_priv_meta (paddr : physaddr) (width : Nat) (value : (BitVec (8 * width))) (typ : (AccessType Unit)) (priv : Privilege) (meta : Unit) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Bool ExceptionType) := do
  if (Bool.and (Bool.or rl con) (not (is_aligned_addr paddr width)))
  then (pure (Err (E_SAMO_Addr_Align ())))
  else
    let result ← do (checked_mem_write paddr width value typ priv meta aq rl con)
    let _ : Unit := (rvfi_write paddr width value meta result)
    (pure result)

/-- Type quantifiers: k_ex103377# : Bool, k_ex103376# : Bool, k_ex103375# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_write_value_priv (paddr : physaddr) (width : Nat) (value : (BitVec (8 * width))) (priv : Privilege) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Bool ExceptionType) := do
  (mem_write_value_priv_meta paddr width value (Write default_write_acc) priv default_meta aq rl con)

/-- Type quantifiers: k_ex103380# : Bool, k_ex103379# : Bool, k_ex103378# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_write_value_meta (paddr : physaddr) (width : Nat) (value : (BitVec (8 * width))) (ext_acc : Unit) (meta : Unit) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Bool ExceptionType) := do
  let typ := (Write ext_acc)
  let ep ← do (effectivePrivilege typ (← readReg mstatus) (← readReg cur_privilege))
  (mem_write_value_priv_meta paddr width value typ ep meta aq rl con)

/-- Type quantifiers: k_ex103383# : Bool, k_ex103382# : Bool, k_ex103381# : Bool, width : Nat, 0 <
  width ∧ width ≤ max_mem_access -/
def mem_write_value (paddr : physaddr) (width : Nat) (value : (BitVec (8 * width))) (aq : Bool) (rl : Bool) (con : Bool) : SailM (Result Bool ExceptionType) := do
  (mem_write_value_meta paddr width value default_write_acc default_meta aq rl con)

def undefined_PTE_Ext (_ : Unit) : SailM (BitVec 10) := do
  (undefined_bitvector 10)

def Mk_PTE_Ext (v : (BitVec 10)) : (BitVec 10) :=
  v

def _get_PTE_Ext_PBMT (v : (BitVec 10)) : (BitVec 2) :=
  (Sail.BitVec.extractLsb v 8 7)

def _update_PTE_Ext_PBMT (v : (BitVec 10)) (x : (BitVec 2)) : (BitVec 10) :=
  (Sail.BitVec.updateSubrange v 8 7 x)

def _set_PTE_Ext_PBMT (r_ref : (RegisterRef (BitVec 10))) (v : (BitVec 2)) : SailM Unit := do
  let r ← do (reg_deref r_ref)
  writeRegRef r_ref (_update_PTE_Ext_PBMT r v)

def default_sv32_ext_pte : pte_ext_bits := (zeros_implicit (n := 10))

/-- Type quantifiers: k_pte_size : Nat, k_pte_size ∈ {32, 64} -/
def ext_bits_of_PTE (pte : (BitVec k_pte_size)) : (BitVec 10) :=
  (Mk_PTE_Ext
    (if (BEq.beq (Sail.BitVec.length pte) 64)
    then (Sail.BitVec.extractLsb pte 63 54)
    else default_sv32_ext_pte))

/-- Type quantifiers: k_pte_size : Nat, k_pte_size ∈ {32, 64} -/
def PPN_of_PTE (pte : (BitVec k_pte_size)) : (BitVec (if k_pte_size = 32 then 22 else 44)) :=
  if (BEq.beq (Sail.BitVec.length pte) 32)
  then (Sail.BitVec.extractLsb pte 31 10)
  else (Sail.BitVec.extractLsb pte 53 10)

def undefined_PTE_Flags (_ : Unit) : SailM (BitVec 8) := do
  (undefined_bitvector 8)

def Mk_PTE_Flags (v : (BitVec 8)) : (BitVec 8) :=
  v

def pte_is_ptr (pte_flags : (BitVec 8)) : Bool :=
  (Bool.and (BEq.beq (_get_PTE_Flags_X pte_flags) (0b0 : (BitVec 1)))
    (Bool.and (BEq.beq (_get_PTE_Flags_W pte_flags) (0b0 : (BitVec 1)))
      (BEq.beq (_get_PTE_Flags_R pte_flags) (0b0 : (BitVec 1)))))

def pte_is_invalid (pte_flags : (BitVec 8)) (pte_ext : (BitVec 10)) : SailM Bool := do
  (pure (Bool.or (BEq.beq (_get_PTE_Flags_V pte_flags) (0b0 : (BitVec 1)))
      (Bool.or
        (Bool.and (BEq.beq (_get_PTE_Flags_W pte_flags) (0b1 : (BitVec 1)))
          (BEq.beq (_get_PTE_Flags_R pte_flags) (0b0 : (BitVec 1))))
        (Bool.or
          (Bool.and (bne (_get_PTE_Ext_N pte_ext) (0b0 : (BitVec 1)))
            (not (← (extensionEnabled Ext_Svnapot))))
          (Bool.or
            (Bool.and (bne (_get_PTE_Ext_PBMT pte_ext) (zeros_implicit (n := 2)))
              (not (← (extensionEnabled Ext_Svpbmt))))
            (bne (_get_PTE_Ext_reserved pte_ext) (zeros_implicit (n := 7))))))))

/-- Type quantifiers: k_ex103692# : Bool, k_ex103691# : Bool -/
def check_PTE_permission (ac : (AccessType Unit)) (priv : Privilege) (mxr : Bool) (do_sum : Bool) (pte_flags : (BitVec 8)) (ext : (BitVec 10)) (ext_ptw : Unit) : SailM PTE_Check := do
  let pte_U := (_get_PTE_Flags_U pte_flags)
  let pte_R := (_get_PTE_Flags_R pte_flags)
  let pte_W := (_get_PTE_Flags_W pte_flags)
  let pte_X := (_get_PTE_Flags_X pte_flags)
  let success ← (( do
    match (ac, priv) with
    | (.Read _, User) =>
      (pure (Bool.and (BEq.beq pte_U (0b1 : (BitVec 1)))
          (Bool.or (BEq.beq pte_R (0b1 : (BitVec 1)))
            (Bool.and (BEq.beq pte_X (0b1 : (BitVec 1))) mxr))))
    | (.Write _, User) =>
      (pure (Bool.and (BEq.beq pte_U (0b1 : (BitVec 1))) (BEq.beq pte_W (0b1 : (BitVec 1)))))
    | (.ReadWrite (_, _), User) =>
      (pure (Bool.and (BEq.beq pte_U (0b1 : (BitVec 1)))
          (Bool.and (BEq.beq pte_W (0b1 : (BitVec 1)))
            (Bool.or (BEq.beq pte_R (0b1 : (BitVec 1)))
              (Bool.and (BEq.beq pte_X (0b1 : (BitVec 1))) mxr)))))
    | (.Execute (), User) =>
      (pure (Bool.and (BEq.beq pte_U (0b1 : (BitVec 1))) (BEq.beq pte_X (0b1 : (BitVec 1)))))
    | (.Read _, Supervisor) =>
      (pure (Bool.and (Bool.or (BEq.beq pte_U (0b0 : (BitVec 1))) do_sum)
          (Bool.or (BEq.beq pte_R (0b1 : (BitVec 1)))
            (Bool.and (BEq.beq pte_X (0b1 : (BitVec 1))) mxr))))
    | (.Write _, Supervisor) =>
      (pure (Bool.and (Bool.or (BEq.beq pte_U (0b0 : (BitVec 1))) do_sum)
          (BEq.beq pte_W (0b1 : (BitVec 1)))))
    | (.ReadWrite (_, _), Supervisor) =>
      (pure (Bool.and (Bool.or (BEq.beq pte_U (0b0 : (BitVec 1))) do_sum)
          (Bool.and (BEq.beq pte_W (0b1 : (BitVec 1)))
            (Bool.or (BEq.beq pte_R (0b1 : (BitVec 1)))
              (Bool.and (BEq.beq pte_X (0b1 : (BitVec 1))) mxr)))))
    | (.Execute (), Supervisor) =>
      (pure (Bool.and (BEq.beq pte_U (0b0 : (BitVec 1))) (BEq.beq pte_X (0b1 : (BitVec 1)))))
    | (_, Machine) => (internal_error "riscv_vmem_pte.sail" 130 "m-mode mem perm check") ) : SailM
    Bool )
  if success
  then (pure (PTE_Check_Success ()))
  else (pure (PTE_Check_Failure ((), ())))

/-- Type quantifiers: k_pte_size : Nat, k_pte_size ∈ {32, 64} -/
def update_PTE_Bits (pte : (BitVec k_pte_size)) (a : (AccessType Unit)) : (Option (BitVec k_pte_size)) :=
  let pte_flags := (Mk_PTE_Flags (Sail.BitVec.extractLsb pte 7 0))
  let update_d : Bool :=
    (Bool.and (BEq.beq (_get_PTE_Flags_D pte_flags) (0b0 : (BitVec 1)))
      (match a with
      | .Execute () => false
      | .Read _ => false
      | .Write _ => true
      | .ReadWrite (_, _) => true : Bool))
  let update_a := (BEq.beq (_get_PTE_Flags_A pte_flags) (0b0 : (BitVec 1)))
  if (Bool.or update_d update_a)
  then
    let pte_flags :=
      (_update_PTE_Flags_D (_update_PTE_Flags_A pte_flags (0b1 : (BitVec 1)))
        (if update_d
        then (0b1 : (BitVec 1))
        else (_get_PTE_Flags_D pte_flags)))
    (some (Sail.BitVec.updateSubrange pte 7 0 pte_flags))
  else none

def ext_get_ptw_error (eptwf : Unit) : PTW_Error :=
  (PTW_No_Permission ())

def translationException (a : (AccessType Unit)) (f : PTW_Error) : ExceptionType :=
  match (a, f) with
  | (_, .PTW_Ext_Error e) => (E_Extension (ext_translate_exception e))
  | (.ReadWrite _, .PTW_Access ()) => (E_SAMO_Access_Fault ())
  | (.ReadWrite _, _) => (E_SAMO_Page_Fault ())
  | (.Read _, .PTW_Access ()) => (E_Load_Access_Fault ())
  | (.Read _, _) => (E_Load_Page_Fault ())
  | (.Write _, .PTW_Access ()) => (E_SAMO_Access_Fault ())
  | (.Write _, _) => (E_SAMO_Page_Fault ())
  | (.Execute (), .PTW_Access ()) => (E_Fetch_Access_Fault ())
  | (.Execute (), _) => (E_Fetch_Page_Fault ())

def tlb_vpn_bits := (57 -i 12)

def tlb_ppn_bits := 44

/-- Type quantifiers: pte_width : Nat, pte_width ∈ {4, 8} -/
def tlb_get_pte (pte_width : Nat) (ent : TLB_Entry) : (BitVec (pte_width * 8)) :=
  (Sail.BitVec.extractLsb ent.pte ((pte_width *i 8) -i 1) 0)

/-- Type quantifiers: k_n : Nat, k_n ∈ {4, 8} -/
def tlb_set_pte (ent : TLB_Entry) (pte : (BitVec (k_n * 8))) : TLB_Entry :=
  { ent with pte := (zero_extend (m := 64) pte) }

/-- Type quantifiers: sv_width : Nat, is_sv_mode(sv_width) -/
def tlb_get_ppn (sv_width : Nat) (ent : TLB_Entry) (vpn : (BitVec (sv_width - 12))) : (BitVec (if sv_width
  = 32 then 22 else 44)) :=
  let vpn : (BitVec 64) := (sign_extend (m := 64) vpn)
  let levelMask : (BitVec 64) := (zero_extend (m := 64) ent.levelMask)
  let ppn : (BitVec 64) := (zero_extend (m := 64) ent.ppn)
  (Sail.BitVec.truncate (ppn ||| (vpn &&& levelMask))
    (if (BEq.beq sv_width 32)
    then 22
    else 44))

/-- Type quantifiers: sv_mode : Nat, is_sv_mode(sv_mode) -/
def tlb_hash (sv_mode : Nat) (vpn : (BitVec (sv_mode - 12))) : Nat :=
  (BitVec.toNat (Sail.BitVec.extractLsb vpn 5 0))

def reset_TLB (_ : Unit) : SailM Unit := do
  writeReg tlb (vectorInit none)

/-- Type quantifiers: index : Nat, 0 ≤ index ∧ index ≤ (64 - 1) -/
def write_TLB (index : Nat) (entry : TLB_Entry) : SailM Unit := do
  writeReg tlb (vectorUpdate (← readReg tlb) index (some entry))

def match_TLB_Entry (ent : TLB_Entry) (asid : (BitVec 16)) (vpn : (BitVec (57 - 12))) : Bool :=
  (Bool.and (Bool.or ent.global (BEq.beq ent.asid asid))
    (BEq.beq ent.vpn (vpn &&& (Complement.complement ent.levelMask))))

def flush_TLB_Entry (ent : TLB_Entry) (asid : (Option (BitVec 16))) (vaddr : (Option (BitVec (2 ^ 3 * 8)))) : Bool :=
  let asid_matches : Bool :=
    match asid with
    | .some asid => (Bool.and (BEq.beq ent.asid asid) (not ent.global))
    | none => true
  let addr_matches : Bool :=
    match vaddr with
    | .some vaddr =>
      let vaddr : (BitVec 64) := (sign_extend (m := 64) vaddr)
      (BEq.beq ent.vpn
        ((Sail.BitVec.extractLsb vaddr 56 pagesize_bits) &&& (Complement.complement ent.levelMask)))
    | none => true
  (Bool.and asid_matches addr_matches)

/-- Type quantifiers: sv_width : Nat, is_sv_mode(sv_width) -/
def lookup_TLB (sv_width : Nat) (asid : (BitVec 16)) (vpn : (BitVec (sv_width - 12))) : SailM (Option (Nat × TLB_Entry)) := do
  let index := (tlb_hash sv_width vpn)
  match (GetElem?.getElem! (← readReg tlb) index) with
  | none => (pure none)
  | .some entry =>
    if (match_TLB_Entry entry asid (sign_extend (m := (57 -i 12)) vpn))
    then (pure (some (index, entry)))
    else (pure none)

/-- Type quantifiers: k_ex104088# : Bool, level : Nat, sv_width : Nat, is_sv_mode(sv_width), 0 ≤
  level ∧
  level ≤
  (if sv_width = 32 then 1 else (if sv_width = 39 then 2 else (if sv_width = 48 then 3 else 4))) -/
def add_to_TLB (sv_width : Nat) (asid : (BitVec 16)) (vpn : (BitVec (sv_width - 12))) (ppn : (BitVec (if sv_width
  = 32 then 22 else 44))) (pte : (BitVec (if sv_width = 32 then 32 else 64))) (pteAddr : physaddr) (level : Nat) (global : Bool) : SailM Unit := do
  let shift :=
    (level *i (if (BEq.beq sv_width 32)
      then 10
      else 9))
  let levelMask := (ones (n := shift))
  let vpn := (vpn &&& (Complement.complement (zero_extend (m := (sv_width -i 12)) levelMask)))
  let ppn :=
    (ppn &&& (Complement.complement
        (zero_extend
          (m := (if (BEq.beq sv_width 32)
          then 22
          else 44)) levelMask)))
  let entry : TLB_Entry :=
    { asid := asid
      global := global
      pte := (zero_extend (m := 64) pte)
      pteAddr := pteAddr
      levelMask := (zero_extend (m := (57 -i 12)) levelMask)
      vpn := (sign_extend (m := (57 -i 12)) vpn)
      ppn := (zero_extend (m := 44) ppn) }
  let index := (tlb_hash sv_width vpn)
  writeReg tlb (vectorUpdate (← readReg tlb) index (some entry))

def flush_TLB (asid : (Option (BitVec 16))) (addr : (Option (BitVec (2 ^ 3 * 8)))) : SailM Unit := do
  let loop_i_lower := 0
  let loop_i_upper ← do (pure ((Vector.length (← readReg tlb)) -i 1))
  let mut loop_vars := ()
  for i in [loop_i_lower:loop_i_upper + 1:1]i do
    let () := loop_vars
    loop_vars ← do
      match (GetElem?.getElem! (← readReg tlb) i) with
      | none => (pure ())
      | .some entry =>
        if (flush_TLB_Entry entry asid addr)
        then writeReg tlb (vectorUpdate (← readReg tlb) i none)
        else (pure ())
  (pure loop_vars)

/-- Type quantifiers: pte_size : Nat, pte_size ∈ {4, 8} -/
def write_pte (paddr : physaddr) (pte_size : Nat) (pte : (BitVec (pte_size * 8))) : SailM (Result Bool ExceptionType) := do
  (mem_write_value_priv paddr pte_size pte Supervisor false false false)

/-- Type quantifiers: pte_size : Nat, pte_size ∈ {4, 8} -/
def read_pte (paddr : physaddr) (pte_size : Nat) : SailM (Result (BitVec (8 * pte_size)) ExceptionType) := do
  (mem_read_priv (Read Data) Supervisor paddr pte_size false false false)

/-- Type quantifiers: k_ex104144# : Bool, level : Nat, k_ex104142# : Bool, k_ex104141# : Bool, sv_width
  : Nat, is_sv_mode(sv_width), 0 ≤ level ∧
  level ≤
  (if sv_width = 32 then 1 else (if sv_width = 39 then 2 else (if sv_width = 48 then 3 else 4))) -/
def pt_walk (sv_width : Nat) (vpn : (BitVec (sv_width - 12))) (ac : (AccessType Unit)) (priv : Privilege) (mxr : Bool) (do_sum : Bool) (pt_base : (BitVec (if sv_width
  = 32 then 22 else 44))) (level : Nat) (global : Bool) (ext_ptw : Unit) : SailM (PTW_Result sv_width) := do
  let vpn_i_size :=
    if (BEq.beq sv_width 32)
    then 10
    else 9
  let vpn_i :=
    (Sail.BitVec.extractLsb vpn (((level +i 1) *i vpn_i_size) -i 1) (level *i vpn_i_size))
  let log_pte_size_bytes :=
    if (BEq.beq sv_width 32)
    then 2
    else 3
  let pte_addr := (pt_base ++ (vpn_i ++ (zeros_implicit (n := log_pte_size_bytes))))
  assert (Bool.or (BEq.beq sv_width 32) (BEq.beq xlen 64)) "riscv_vmem.sail:100.36-100.37"
  let pte_addr := (physaddr (zero_extend (m := 64) pte_addr))
  match (← (read_pte pte_addr (2 ^i log_pte_size_bytes))) with
  | .Err _ => (pure (PTW_Failure ((PTW_Access ()), ext_ptw)))
  | .Ok pte =>
    let pte_flags := (Mk_PTE_Flags (Sail.BitVec.extractLsb pte 7 0))
    let pte_ext := (ext_bits_of_PTE pte)
    if (← (pte_is_invalid pte_flags pte_ext))
    then (pure (PTW_Failure ((PTW_Invalid_PTE ()), ext_ptw)))
    else
      let ppn := (PPN_of_PTE pte)
      let global := (Bool.or global (BEq.beq (_get_PTE_Flags_G pte_flags) (0b1 : (BitVec 1))))
      if (pte_is_ptr pte_flags)
      then
        if (level >b 0)
        then (pt_walk sv_width vpn ac priv mxr do_sum ppn (level -i 1) global ext_ptw)
        else (pure (PTW_Failure ((PTW_Invalid_PTE ()), ext_ptw)))
      else
        let pte_check ← do (check_PTE_permission ac priv mxr do_sum pte_flags pte_ext ext_ptw)
        match pte_check with
        | .PTE_Check_Failure (ext_ptw, ext_ptw_fail) =>
          (pure (PTW_Failure ((ext_get_ptw_error ext_ptw_fail), ext_ptw)))
        | .PTE_Check_Success ext_ptw =>
          if (level >b 0)
          then
            let ppn_size_bits :=
              if (BEq.beq sv_width 32)
              then 10
              else 9
            let low_bits := (ppn_size_bits *i level)
            if (bne (Sail.BitVec.extractLsb ppn (low_bits -i 1) 0)
                 (zeros_implicit
                   (n := (((((if (BEq.beq sv_width 32)
                           then 10
                           else 9) *i level) -i 1) -i 0) +i 1))))
            then (pure (PTW_Failure ((PTW_Misaligned ()), ext_ptw)))
            else
              let ppn :=
                ((Sail.BitVec.extractLsb ppn ((Sail.BitVec.length ppn) -i 1) low_bits) ++ (Sail.BitVec.extractLsb
                    vpn (low_bits -i 1) 0))
              (pure (PTW_Success
                  ({ ppn := ppn
                     pte := pte
                     pteAddr := pte_addr
                     level := level
                     global := global }, ext_ptw)))
          else
            (pure (PTW_Success
                ({ ppn := ppn
                   pte := pte
                   pteAddr := pte_addr
                   level := level
                   global := global }, ext_ptw)))

/-- Type quantifiers: k_n : Nat, k_n ∈ {32, 64} -/
def satp_to_asid (satp_val : (BitVec k_n)) : (BitVec (if k_n = 32 then 9 else 16)) :=
  if (BEq.beq (Sail.BitVec.length satp_val) 32)
  then (_get_Satp32_Asid (Mk_Satp32 satp_val))
  else (_get_Satp64_Asid (Mk_Satp64 satp_val))

/-- Type quantifiers: k_n : Nat, k_n ∈ {32, 64} -/
def satp_to_ppn (satp_val : (BitVec k_n)) : (BitVec (if k_n = 32 then 22 else 44)) :=
  if (BEq.beq (Sail.BitVec.length satp_val) 32)
  then (_get_Satp32_PPN (Mk_Satp32 satp_val))
  else (_get_Satp64_PPN (Mk_Satp64 satp_val))

def translationMode (priv : Privilege) : SailM SATPMode := do
  if (BEq.beq priv Machine)
  then (pure Bare)
  else
    let arch ← do (architecture_backwards (get_mstatus_SXL (← readReg mstatus)))
    let mbits ← (( do
      match arch with
      | RV64 =>
        assert (xlen ≥b 64) "riscv_vmem.sail:186.25-186.26"
        (pure (_get_Satp64_Mode (Mk_Satp64 (← readReg satp))))
      | RV32 =>
        (pure ((0b000 : (BitVec 3)) ++ (_get_Satp32_Mode
              (Mk_Satp32 (Sail.BitVec.extractLsb (← readReg satp) 31 0)))))
      | RV128 => (internal_error "riscv_vmem.sail" 190 "RV128 not supported") ) : SailM satp_mode )
    match (satpMode_of_bits arch mbits) with
    | .some m => (pure m)
    | none => (internal_error "riscv_vmem.sail" 195 "invalid translation mode in satp")

/-- Type quantifiers: tlb_index : Nat, k_ex104208# : Bool, k_ex104207# : Bool, sv_width : Nat, is_sv_mode(sv_width), 0
  ≤ tlb_index ∧ tlb_index ≤ (64 - 1) -/
def translate_TLB_hit (sv_width : Nat) (asid : (BitVec 16)) (vpn : (BitVec (sv_width - 12))) (ac : (AccessType Unit)) (priv : Privilege) (mxr : Bool) (do_sum : Bool) (ext_ptw : Unit) (tlb_index : Nat) (ent : TLB_Entry) : SailM (TR_Result (BitVec (if sv_width
  = 32 then 22 else 44)) PTW_Error) := do
  let pte_width :=
    if (BEq.beq sv_width 32)
    then 4
    else 8
  let pte := (tlb_get_pte pte_width ent)
  let ext_pte := (ext_bits_of_PTE pte)
  let pte_flags := (Mk_PTE_Flags (Sail.BitVec.extractLsb pte 7 0))
  let pte_check ← do (check_PTE_permission ac priv mxr do_sum pte_flags ext_pte ext_ptw)
  match pte_check with
  | .PTE_Check_Failure (ext_ptw, ext_ptw_fail) =>
    (pure (TR_Failure ((ext_get_ptw_error ext_ptw_fail), ext_ptw)))
  | .PTE_Check_Success ext_ptw =>
    match (update_PTE_Bits pte ac) with
    | none => (pure (TR_Address ((tlb_get_ppn sv_width ent vpn), ext_ptw)))
    | .some pte' =>
      if (not (plat_enable_dirty_update ()))
      then (pure (TR_Failure ((PTW_PTE_Update ()), ext_ptw)))
      else
        (write_TLB tlb_index (tlb_set_pte ent pte'))
        match (← (write_pte ent.pteAddr pte_width pte')) with
        | .Ok _ => (pure ())
        | .Err e => (internal_error "riscv_vmem.sail" 250 "invalid physical address in TLB")
        (pure (TR_Address ((tlb_get_ppn sv_width ent vpn), ext_ptw)))

/-- Type quantifiers: k_ex104232# : Bool, k_ex104231# : Bool, sv_width : Nat, is_sv_mode(sv_width) -/
def translate_TLB_miss (sv_width : Nat) (asid : (BitVec 16)) (base_ppn : (BitVec (if sv_width = 32 then 22 else 44))) (vpn : (BitVec (sv_width - 12))) (ac : (AccessType Unit)) (priv : Privilege) (mxr : Bool) (do_sum : Bool) (ext_ptw : Unit) : SailM (TR_Result (BitVec (if sv_width
  = 32 then 22 else 44)) PTW_Error) := do
  let initial_level :=
    if (BEq.beq sv_width 32)
    then 1
    else
      if (BEq.beq sv_width 39)
      then 2
      else
        if (BEq.beq sv_width 48)
        then 3
        else 4
  let pte_width :=
    if (BEq.beq sv_width 32)
    then 4
    else 8
  let ptw_result ← do
    (pt_walk sv_width vpn ac priv mxr do_sum base_ppn initial_level false ext_ptw)
  match ptw_result with
  | .PTW_Failure (f, ext_ptw) => (pure (TR_Failure (f, ext_ptw)))
  | .PTW_Success ({ ppn := ppn, pte := pte, pteAddr := pteAddr, level := level, global := global }, ext_ptw) =>
    let ext_pte := (ext_bits_of_PTE pte)
    match (update_PTE_Bits pte ac) with
    | none =>
      (add_to_TLB sv_width asid vpn ppn pte pteAddr level global)
      (pure (TR_Address (ppn, ext_ptw)))
    | .some pte =>
      if (not (plat_enable_dirty_update ()))
      then (pure (TR_Failure ((PTW_PTE_Update ()), ext_ptw)))
      else
        match (← (write_pte pteAddr pte_width pte)) with
        | .Ok _ =>
          (add_to_TLB sv_width asid vpn ppn pte pteAddr level global)
          (pure (TR_Address (ppn, ext_ptw)))
        | .Err e => (pure (TR_Failure ((PTW_Access ()), ext_ptw)))

def satp_mode_width_forwards (arg_ : SATPMode) : SailM Int := do
  match arg_ with
  | Sv32 => (pure 32)
  | Sv39 => (pure 39)
  | Sv48 => (pure 48)
  | Sv57 => (pure 57)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: arg_ : Nat, arg_ ∈ {32, 39, 48, 57} -/
def satp_mode_width_backwards (arg_ : Nat) : SATPMode :=
  match arg_ with
  | 32 => Sv32
  | 39 => Sv39
  | 48 => Sv48
  | _ => Sv57

def satp_mode_width_forwards_matches (arg_ : SATPMode) : Bool :=
  match arg_ with
  | Sv32 => true
  | Sv39 => true
  | Sv48 => true
  | Sv57 => true
  | _ => false

/-- Type quantifiers: arg_ : Nat, arg_ ∈ {32, 39, 48, 57} -/
def satp_mode_width_backwards_matches (arg_ : Nat) : Bool :=
  match arg_ with
  | 32 => true
  | 39 => true
  | 48 => true
  | 57 => true
  | _ => false

/-- Type quantifiers: k_ex104275# : Bool, k_ex104274# : Bool, sv_width : Nat, is_sv_mode(sv_width) -/
def translate (sv_width : Nat) (asid : (BitVec 16)) (base_ppn : (BitVec (if sv_width = 32 then 22 else 44))) (vpn : (BitVec (sv_width - 12))) (ac : (AccessType Unit)) (priv : Privilege) (mxr : Bool) (do_sum : Bool) (ext_ptw : Unit) : SailM (TR_Result (BitVec (if sv_width
  = 32 then 22 else 44)) PTW_Error) := do
  match (← (lookup_TLB sv_width asid vpn)) with
  | .some (index, ent) => (translate_TLB_hit sv_width asid vpn ac priv mxr do_sum ext_ptw index ent)
  | none => (translate_TLB_miss sv_width asid base_ppn vpn ac priv mxr do_sum ext_ptw)

/-- Type quantifiers: sv_width : Nat, is_sv_mode(sv_width) -/
def get_satp (sv_width : Nat) : SailM (BitVec (if sv_width = 32 then 32 else 64)) := do
  assert (Bool.or (BEq.beq sv_width 32) (BEq.beq xlen 64)) "riscv_vmem.sail:346.30-346.31"
  if (BEq.beq sv_width 32)
  then (pure (Sail.BitVec.extractLsb (← readReg satp) 31 0))
  else readReg satp

def translateAddr (vAddr : virtaddr) (ac : (AccessType Unit)) : SailM (TR_Result physaddr ExceptionType) := do
  let effPriv ← do (effectivePrivilege ac (← readReg mstatus) (← readReg cur_privilege))
  let mode ← do (translationMode effPriv)
  if (BEq.beq mode Bare)
  then (pure (TR_Address ((physaddr (zero_extend (m := 64) (virtaddr_bits vAddr))), init_ext_ptw)))
  else
    let sv_width ← do (satp_mode_width_forwards mode)
    let satp_sxlen ← do (get_satp sv_width)
    assert (Bool.or (BEq.beq sv_width 32) (BEq.beq xlen 64)) "riscv_vmem.sail:372.36-372.37"
    let svAddr := (Sail.BitVec.extractLsb (virtaddr_bits vAddr) (sv_width -i 1) 0)
    if (bne (virtaddr_bits vAddr) (sign_extend (m := ((2 ^i 3) *i 8)) svAddr))
    then (pure (TR_Failure ((translationException ac (PTW_Invalid_Addr ())), init_ext_ptw)))
    else
      let mxr ← do (pure (BEq.beq (_get_Mstatus_MXR (← readReg mstatus)) (0b1 : (BitVec 1))))
      let do_sum ← do (pure (BEq.beq (_get_Mstatus_SUM (← readReg mstatus)) (0b1 : (BitVec 1))))
      let asid := (satp_to_asid satp_sxlen)
      let base_ppn := (satp_to_ppn satp_sxlen)
      let res ← do
        (translate sv_width (zero_extend (m := 16) asid) base_ppn
          (Sail.BitVec.extractLsb svAddr (sv_width -i 1) pagesize_bits) ac effPriv mxr do_sum
          init_ext_ptw)
      match res with
      | .TR_Address (ppn, ext_ptw) =>
        let paddr := (ppn ++ (Sail.BitVec.extractLsb (virtaddr_bits vAddr) (pagesize_bits -i 1) 0))
        (pure (TR_Address ((physaddr (zero_extend (m := 64) paddr)), ext_ptw)))
      | .TR_Failure (f, ext_ptw) => (pure (TR_Failure ((translationException ac f), ext_ptw)))

def reset_vmem (_ : Unit) : SailM Unit := do
  (reset_TLB ())

def xt2 (x : (BitVec 8)) : SailM (BitVec 8) := do
  (pure ((shiftl x 1) ^^^ (← do
        if (← (bit_to_bool (BitVec.access x 7)))
        then (pure (0x1B : (BitVec 8)))
        else (pure (0x00 : (BitVec 8))))))

def xt3 (x : (BitVec 8)) : SailM (BitVec 8) := do
  (pure (x ^^^ (← (xt2 x))))

def gfmul (x : (BitVec 8)) (y : (BitVec 4)) : SailM (BitVec 8) := do
  (pure ((← do
        if (← (bit_to_bool (BitVec.access y 0)))
        then (pure x)
        else (pure (0x00 : (BitVec 8)))) ^^^ ((← do
          if (← (bit_to_bool (BitVec.access y 1)))
          then (xt2 x)
          else (pure (0x00 : (BitVec 8)))) ^^^ ((← do
            if (← (bit_to_bool (BitVec.access y 2)))
            then (xt2 (← (xt2 x)))
            else (pure (0x00 : (BitVec 8)))) ^^^ (← do
            if (← (bit_to_bool (BitVec.access y 3)))
            then (xt2 (← (xt2 (← (xt2 x)))))
            else (pure (0x00 : (BitVec 8))))))))

def aes_mixcolumn_byte_fwd (so : (BitVec 8)) : SailM (BitVec 32) := do
  (pure ((← (gfmul so (0x3 : (BitVec 4)))) ++ (so ++ (so ++ (← (gfmul so (0x2 : (BitVec 4))))))))

def aes_mixcolumn_byte_inv (so : (BitVec 8)) : SailM (BitVec 32) := do
  (pure ((← (gfmul so (0xB : (BitVec 4)))) ++ ((← (gfmul so (0xD : (BitVec 4)))) ++ ((← (gfmul
              so (0x9 : (BitVec 4)))) ++ (← (gfmul so (0xE : (BitVec 4))))))))

def aes_mixcolumn_fwd (x : (BitVec 32)) : SailM (BitVec 32) := do
  let s0 : (BitVec 8) := (Sail.BitVec.extractLsb x 7 0)
  let s1 : (BitVec 8) := (Sail.BitVec.extractLsb x 15 8)
  let s2 : (BitVec 8) := (Sail.BitVec.extractLsb x 23 16)
  let s3 : (BitVec 8) := (Sail.BitVec.extractLsb x 31 24)
  let b0 ← (( do (pure ((← (xt2 s0)) ^^^ ((← (xt3 s1)) ^^^ (s2 ^^^ s3)))) ) : SailM (BitVec 8)
    )
  let b1 ← (( do (pure (s0 ^^^ ((← (xt2 s1)) ^^^ ((← (xt3 s2)) ^^^ s3)))) ) : SailM (BitVec 8)
    )
  let b2 ← (( do (pure (s0 ^^^ (s1 ^^^ ((← (xt2 s2)) ^^^ (← (xt3 s3)))))) ) : SailM (BitVec 8)
    )
  let b3 ← (( do (pure ((← (xt3 s0)) ^^^ (s1 ^^^ (s2 ^^^ (← (xt2 s3)))))) ) : SailM (BitVec 8)
    )
  (pure (b3 ++ (b2 ++ (b1 ++ b0))))

def aes_mixcolumn_inv (x : (BitVec 32)) : SailM (BitVec 32) := do
  let s0 : (BitVec 8) := (Sail.BitVec.extractLsb x 7 0)
  let s1 : (BitVec 8) := (Sail.BitVec.extractLsb x 15 8)
  let s2 : (BitVec 8) := (Sail.BitVec.extractLsb x 23 16)
  let s3 : (BitVec 8) := (Sail.BitVec.extractLsb x 31 24)
  let b0 ← (( do
    (pure ((← (gfmul s0 (0xE : (BitVec 4)))) ^^^ ((← (gfmul s1 (0xB : (BitVec 4)))) ^^^ ((← (gfmul
                s2 (0xD : (BitVec 4)))) ^^^ (← (gfmul s3 (0x9 : (BitVec 4)))))))) ) : SailM
    (BitVec 8) )
  let b1 ← (( do
    (pure ((← (gfmul s0 (0x9 : (BitVec 4)))) ^^^ ((← (gfmul s1 (0xE : (BitVec 4)))) ^^^ ((← (gfmul
                s2 (0xB : (BitVec 4)))) ^^^ (← (gfmul s3 (0xD : (BitVec 4)))))))) ) : SailM
    (BitVec 8) )
  let b2 ← (( do
    (pure ((← (gfmul s0 (0xD : (BitVec 4)))) ^^^ ((← (gfmul s1 (0x9 : (BitVec 4)))) ^^^ ((← (gfmul
                s2 (0xE : (BitVec 4)))) ^^^ (← (gfmul s3 (0xB : (BitVec 4)))))))) ) : SailM
    (BitVec 8) )
  let b3 ← (( do
    (pure ((← (gfmul s0 (0xB : (BitVec 4)))) ^^^ ((← (gfmul s1 (0xD : (BitVec 4)))) ^^^ ((← (gfmul
                s2 (0x9 : (BitVec 4)))) ^^^ (← (gfmul s3 (0xE : (BitVec 4)))))))) ) : SailM
    (BitVec 8) )
  (pure (b3 ++ (b2 ++ (b1 ++ b0))))

def aes_decode_rcon (r : (BitVec 4)) : SailM (BitVec 32) := do
  assert (zopz0zI_u r (0xA : (BitVec 4))) "riscv_types_kext.sail:87.18-87.19"
  let b__0 := r
  if (BEq.beq b__0 (0x0 : (BitVec 4)))
  then (pure (0x00000001 : (BitVec 32)))
  else
    if (BEq.beq b__0 (0x1 : (BitVec 4)))
    then (pure (0x00000002 : (BitVec 32)))
    else
      if (BEq.beq b__0 (0x2 : (BitVec 4)))
      then (pure (0x00000004 : (BitVec 32)))
      else
        if (BEq.beq b__0 (0x3 : (BitVec 4)))
        then (pure (0x00000008 : (BitVec 32)))
        else
          if (BEq.beq b__0 (0x4 : (BitVec 4)))
          then (pure (0x00000010 : (BitVec 32)))
          else
            if (BEq.beq b__0 (0x5 : (BitVec 4)))
            then (pure (0x00000020 : (BitVec 32)))
            else
              if (BEq.beq b__0 (0x6 : (BitVec 4)))
              then (pure (0x00000040 : (BitVec 32)))
              else
                if (BEq.beq b__0 (0x7 : (BitVec 4)))
                then (pure (0x00000080 : (BitVec 32)))
                else
                  if (BEq.beq b__0 (0x8 : (BitVec 4)))
                  then (pure (0x0000001B : (BitVec 32)))
                  else
                    if (BEq.beq b__0 (0x9 : (BitVec 4)))
                    then (pure (0x00000036 : (BitVec 32)))
                    else (internal_error "riscv_types_kext.sail" 99 "Unexpected AES r")

def sm4_sbox_table : (Vector (BitVec 8) 256) :=
  #v[(0x48 : (BitVec 8)), (0x39 : (BitVec 8)), (0xCB : (BitVec 8)), (0xD7 : (BitVec 8)), (0x3E : (BitVec 8)), (0x5F : (BitVec 8)), (0xEE : (BitVec 8)), (0x79 : (BitVec 8)), (0x20 : (BitVec 8)), (0x4D : (BitVec 8)), (0xDC : (BitVec 8)), (0x3A : (BitVec 8)), (0xEC : (BitVec 8)), (0x7D : (BitVec 8)), (0xF0 : (BitVec 8)), (0x18 : (BitVec 8)), (0x84 : (BitVec 8)), (0xC6 : (BitVec 8)), (0x6E : (BitVec 8)), (0xC5 : (BitVec 8)), (0x09 : (BitVec 8)), (0xF1 : (BitVec 8)), (0xB9 : (BitVec 8)), (0x65 : (BitVec 8)), (0x7E : (BitVec 8)), (0x77 : (BitVec 8)), (0x96 : (BitVec 8)), (0x0C : (BitVec 8)), (0x4A : (BitVec 8)), (0x97 : (BitVec 8)), (0x69 : (BitVec 8)), (0x89 : (BitVec 8)), (0xB0 : (BitVec 8)), (0xB4 : (BitVec 8)), (0xE5 : (BitVec 8)), (0xB8 : (BitVec 8)), (0x12 : (BitVec 8)), (0xD0 : (BitVec 8)), (0x74 : (BitVec 8)), (0x2D : (BitVec 8)), (0xBD : (BitVec 8)), (0x7B : (BitVec 8)), (0xCD : (BitVec 8)), (0xA5 : (BitVec 8)), (0x88 : (BitVec 8)), (0x31 : (BitVec 8)), (0xC1 : (BitVec 8)), (0x0A : (BitVec 8)), (0xD8 : (BitVec 8)), (0x5A : (BitVec 8)), (0x10 : (BitVec 8)), (0x1F : (BitVec 8)), (0x41 : (BitVec 8)), (0x5C : (BitVec 8)), (0xD9 : (BitVec 8)), (0x11 : (BitVec 8)), (0x7F : (BitVec 8)), (0xBC : (BitVec 8)), (0xDD : (BitVec 8)), (0xBB : (BitVec 8)), (0x92 : (BitVec 8)), (0xAF : (BitVec 8)), (0x1B : (BitVec 8)), (0x8D : (BitVec 8)), (0x51 : (BitVec 8)), (0x5B : (BitVec 8)), (0x6C : (BitVec 8)), (0x6D : (BitVec 8)), (0x72 : (BitVec 8)), (0x6A : (BitVec 8)), (0xFF : (BitVec 8)), (0x03 : (BitVec 8)), (0x2F : (BitVec 8)), (0x8E : (BitVec 8)), (0xFD : (BitVec 8)), (0xDE : (BitVec 8)), (0x45 : (BitVec 8)), (0x37 : (BitVec 8)), (0xDB : (BitVec 8)), (0xD5 : (BitVec 8)), (0x6F : (BitVec 8)), (0x4E : (BitVec 8)), (0x53 : (BitVec 8)), (0x0D : (BitVec 8)), (0xAB : (BitVec 8)), (0x23 : (BitVec 8)), (0x29 : (BitVec 8)), (0xC0 : (BitVec 8)), (0x60 : (BitVec 8)), (0xCA : (BitVec 8)), (0x66 : (BitVec 8)), (0x82 : (BitVec 8)), (0x2E : (BitVec 8)), (0xE2 : (BitVec 8)), (0xF6 : (BitVec 8)), (0x1D : (BitVec 8)), (0xE3 : (BitVec 8)), (0xB1 : (BitVec 8)), (0x8C : (BitVec 8)), (0xF5 : (BitVec 8)), (0x30 : (BitVec 8)), (0x32 : (BitVec 8)), (0x93 : (BitVec 8)), (0xAD : (BitVec 8)), (0x55 : (BitVec 8)), (0x1A : (BitVec 8)), (0x34 : (BitVec 8)), (0x9B : (BitVec 8)), (0xA4 : (BitVec 8)), (0x5D : (BitVec 8)), (0xAE : (BitVec 8)), (0xE0 : (BitVec 8)), (0xA1 : (BitVec 8)), (0x15 : (BitVec 8)), (0x61 : (BitVec 8)), (0xF9 : (BitVec 8)), (0xCE : (BitVec 8)), (0xF2 : (BitVec 8)), (0xF7 : (BitVec 8)), (0xA3 : (BitVec 8)), (0xB5 : (BitVec 8)), (0x38 : (BitVec 8)), (0xC7 : (BitVec 8)), (0x40 : (BitVec 8)), (0xD2 : (BitVec 8)), (0x8A : (BitVec 8)), (0xBF : (BitVec 8)), (0xEA : (BitVec 8)), (0x9E : (BitVec 8)), (0xC8 : (BitVec 8)), (0xC4 : (BitVec 8)), (0xA0 : (BitVec 8)), (0xE7 : (BitVec 8)), (0x02 : (BitVec 8)), (0x36 : (BitVec 8)), (0x4C : (BitVec 8)), (0x52 : (BitVec 8)), (0x27 : (BitVec 8)), (0xD3 : (BitVec 8)), (0x9F : (BitVec 8)), (0x57 : (BitVec 8)), (0x46 : (BitVec 8)), (0x00 : (BitVec 8)), (0xD4 : (BitVec 8)), (0x87 : (BitVec 8)), (0x78 : (BitVec 8)), (0x21 : (BitVec 8)), (0x01 : (BitVec 8)), (0x3B : (BitVec 8)), (0x7C : (BitVec 8)), (0x22 : (BitVec 8)), (0x25 : (BitVec 8)), (0xA2 : (BitVec 8)), (0xD1 : (BitVec 8)), (0x58 : (BitVec 8)), (0x63 : (BitVec 8)), (0x5E : (BitVec 8)), (0x0E : (BitVec 8)), (0x24 : (BitVec 8)), (0x1E : (BitVec 8)), (0x35 : (BitVec 8)), (0x9D : (BitVec 8)), (0x56 : (BitVec 8)), (0x70 : (BitVec 8)), (0x4B : (BitVec 8)), (0x0F : (BitVec 8)), (0xEB : (BitVec 8)), (0xF8 : (BitVec 8)), (0x8B : (BitVec 8)), (0xDA : (BitVec 8)), (0x64 : (BitVec 8)), (0x71 : (BitVec 8)), (0xB2 : (BitVec 8)), (0x81 : (BitVec 8)), (0x6B : (BitVec 8)), (0x68 : (BitVec 8)), (0xA8 : (BitVec 8)), (0x4F : (BitVec 8)), (0x85 : (BitVec 8)), (0xE6 : (BitVec 8)), (0x19 : (BitVec 8)), (0x3C : (BitVec 8)), (0x59 : (BitVec 8)), (0x83 : (BitVec 8)), (0xBA : (BitVec 8)), (0x17 : (BitVec 8)), (0x73 : (BitVec 8)), (0xF3 : (BitVec 8)), (0xFC : (BitVec 8)), (0xA7 : (BitVec 8)), (0x07 : (BitVec 8)), (0x47 : (BitVec 8)), (0xA6 : (BitVec 8)), (0x3F : (BitVec 8)), (0x8F : (BitVec 8)), (0x75 : (BitVec 8)), (0xFA : (BitVec 8)), (0x94 : (BitVec 8)), (0xDF : (BitVec 8)), (0x80 : (BitVec 8)), (0x95 : (BitVec 8)), (0xE8 : (BitVec 8)), (0x08 : (BitVec 8)), (0xC9 : (BitVec 8)), (0xA9 : (BitVec 8)), (0x1C : (BitVec 8)), (0xB3 : (BitVec 8)), (0xE4 : (BitVec 8)), (0x62 : (BitVec 8)), (0xAC : (BitVec 8)), (0xCF : (BitVec 8)), (0xED : (BitVec 8)), (0x43 : (BitVec 8)), (0x0B : (BitVec 8)), (0x54 : (BitVec 8)), (0x33 : (BitVec 8)), (0x7A : (BitVec 8)), (0x98 : (BitVec 8)), (0xEF : (BitVec 8)), (0x91 : (BitVec 8)), (0xF4 : (BitVec 8)), (0x50 : (BitVec 8)), (0x42 : (BitVec 8)), (0x9C : (BitVec 8)), (0x99 : (BitVec 8)), (0x06 : (BitVec 8)), (0x86 : (BitVec 8)), (0x49 : (BitVec 8)), (0x26 : (BitVec 8)), (0x13 : (BitVec 8)), (0x44 : (BitVec 8)), (0xAA : (BitVec 8)), (0xC3 : (BitVec 8)), (0x04 : (BitVec 8)), (0xBE : (BitVec 8)), (0x2A : (BitVec 8)), (0x76 : (BitVec 8)), (0x9A : (BitVec 8)), (0x67 : (BitVec 8)), (0x2B : (BitVec 8)), (0x05 : (BitVec 8)), (0x2C : (BitVec 8)), (0xFB : (BitVec 8)), (0x28 : (BitVec 8)), (0xC2 : (BitVec 8)), (0x14 : (BitVec 8)), (0xB6 : (BitVec 8)), (0x16 : (BitVec 8)), (0xB7 : (BitVec 8)), (0x3D : (BitVec 8)), (0xE1 : (BitVec 8)), (0xCC : (BitVec 8)), (0xFE : (BitVec 8)), (0xE9 : (BitVec 8)), (0x90 : (BitVec 8)), (0xD6 : (BitVec 8))]

def aes_sbox_fwd_table : (Vector (BitVec 8) 256) :=
  #v[(0x16 : (BitVec 8)), (0xBB : (BitVec 8)), (0x54 : (BitVec 8)), (0xB0 : (BitVec 8)), (0x0F : (BitVec 8)), (0x2D : (BitVec 8)), (0x99 : (BitVec 8)), (0x41 : (BitVec 8)), (0x68 : (BitVec 8)), (0x42 : (BitVec 8)), (0xE6 : (BitVec 8)), (0xBF : (BitVec 8)), (0x0D : (BitVec 8)), (0x89 : (BitVec 8)), (0xA1 : (BitVec 8)), (0x8C : (BitVec 8)), (0xDF : (BitVec 8)), (0x28 : (BitVec 8)), (0x55 : (BitVec 8)), (0xCE : (BitVec 8)), (0xE9 : (BitVec 8)), (0x87 : (BitVec 8)), (0x1E : (BitVec 8)), (0x9B : (BitVec 8)), (0x94 : (BitVec 8)), (0x8E : (BitVec 8)), (0xD9 : (BitVec 8)), (0x69 : (BitVec 8)), (0x11 : (BitVec 8)), (0x98 : (BitVec 8)), (0xF8 : (BitVec 8)), (0xE1 : (BitVec 8)), (0x9E : (BitVec 8)), (0x1D : (BitVec 8)), (0xC1 : (BitVec 8)), (0x86 : (BitVec 8)), (0xB9 : (BitVec 8)), (0x57 : (BitVec 8)), (0x35 : (BitVec 8)), (0x61 : (BitVec 8)), (0x0E : (BitVec 8)), (0xF6 : (BitVec 8)), (0x03 : (BitVec 8)), (0x48 : (BitVec 8)), (0x66 : (BitVec 8)), (0xB5 : (BitVec 8)), (0x3E : (BitVec 8)), (0x70 : (BitVec 8)), (0x8A : (BitVec 8)), (0x8B : (BitVec 8)), (0xBD : (BitVec 8)), (0x4B : (BitVec 8)), (0x1F : (BitVec 8)), (0x74 : (BitVec 8)), (0xDD : (BitVec 8)), (0xE8 : (BitVec 8)), (0xC6 : (BitVec 8)), (0xB4 : (BitVec 8)), (0xA6 : (BitVec 8)), (0x1C : (BitVec 8)), (0x2E : (BitVec 8)), (0x25 : (BitVec 8)), (0x78 : (BitVec 8)), (0xBA : (BitVec 8)), (0x08 : (BitVec 8)), (0xAE : (BitVec 8)), (0x7A : (BitVec 8)), (0x65 : (BitVec 8)), (0xEA : (BitVec 8)), (0xF4 : (BitVec 8)), (0x56 : (BitVec 8)), (0x6C : (BitVec 8)), (0xA9 : (BitVec 8)), (0x4E : (BitVec 8)), (0xD5 : (BitVec 8)), (0x8D : (BitVec 8)), (0x6D : (BitVec 8)), (0x37 : (BitVec 8)), (0xC8 : (BitVec 8)), (0xE7 : (BitVec 8)), (0x79 : (BitVec 8)), (0xE4 : (BitVec 8)), (0x95 : (BitVec 8)), (0x91 : (BitVec 8)), (0x62 : (BitVec 8)), (0xAC : (BitVec 8)), (0xD3 : (BitVec 8)), (0xC2 : (BitVec 8)), (0x5C : (BitVec 8)), (0x24 : (BitVec 8)), (0x06 : (BitVec 8)), (0x49 : (BitVec 8)), (0x0A : (BitVec 8)), (0x3A : (BitVec 8)), (0x32 : (BitVec 8)), (0xE0 : (BitVec 8)), (0xDB : (BitVec 8)), (0x0B : (BitVec 8)), (0x5E : (BitVec 8)), (0xDE : (BitVec 8)), (0x14 : (BitVec 8)), (0xB8 : (BitVec 8)), (0xEE : (BitVec 8)), (0x46 : (BitVec 8)), (0x88 : (BitVec 8)), (0x90 : (BitVec 8)), (0x2A : (BitVec 8)), (0x22 : (BitVec 8)), (0xDC : (BitVec 8)), (0x4F : (BitVec 8)), (0x81 : (BitVec 8)), (0x60 : (BitVec 8)), (0x73 : (BitVec 8)), (0x19 : (BitVec 8)), (0x5D : (BitVec 8)), (0x64 : (BitVec 8)), (0x3D : (BitVec 8)), (0x7E : (BitVec 8)), (0xA7 : (BitVec 8)), (0xC4 : (BitVec 8)), (0x17 : (BitVec 8)), (0x44 : (BitVec 8)), (0x97 : (BitVec 8)), (0x5F : (BitVec 8)), (0xEC : (BitVec 8)), (0x13 : (BitVec 8)), (0x0C : (BitVec 8)), (0xCD : (BitVec 8)), (0xD2 : (BitVec 8)), (0xF3 : (BitVec 8)), (0xFF : (BitVec 8)), (0x10 : (BitVec 8)), (0x21 : (BitVec 8)), (0xDA : (BitVec 8)), (0xB6 : (BitVec 8)), (0xBC : (BitVec 8)), (0xF5 : (BitVec 8)), (0x38 : (BitVec 8)), (0x9D : (BitVec 8)), (0x92 : (BitVec 8)), (0x8F : (BitVec 8)), (0x40 : (BitVec 8)), (0xA3 : (BitVec 8)), (0x51 : (BitVec 8)), (0xA8 : (BitVec 8)), (0x9F : (BitVec 8)), (0x3C : (BitVec 8)), (0x50 : (BitVec 8)), (0x7F : (BitVec 8)), (0x02 : (BitVec 8)), (0xF9 : (BitVec 8)), (0x45 : (BitVec 8)), (0x85 : (BitVec 8)), (0x33 : (BitVec 8)), (0x4D : (BitVec 8)), (0x43 : (BitVec 8)), (0xFB : (BitVec 8)), (0xAA : (BitVec 8)), (0xEF : (BitVec 8)), (0xD0 : (BitVec 8)), (0xCF : (BitVec 8)), (0x58 : (BitVec 8)), (0x4C : (BitVec 8)), (0x4A : (BitVec 8)), (0x39 : (BitVec 8)), (0xBE : (BitVec 8)), (0xCB : (BitVec 8)), (0x6A : (BitVec 8)), (0x5B : (BitVec 8)), (0xB1 : (BitVec 8)), (0xFC : (BitVec 8)), (0x20 : (BitVec 8)), (0xED : (BitVec 8)), (0x00 : (BitVec 8)), (0xD1 : (BitVec 8)), (0x53 : (BitVec 8)), (0x84 : (BitVec 8)), (0x2F : (BitVec 8)), (0xE3 : (BitVec 8)), (0x29 : (BitVec 8)), (0xB3 : (BitVec 8)), (0xD6 : (BitVec 8)), (0x3B : (BitVec 8)), (0x52 : (BitVec 8)), (0xA0 : (BitVec 8)), (0x5A : (BitVec 8)), (0x6E : (BitVec 8)), (0x1B : (BitVec 8)), (0x1A : (BitVec 8)), (0x2C : (BitVec 8)), (0x83 : (BitVec 8)), (0x09 : (BitVec 8)), (0x75 : (BitVec 8)), (0xB2 : (BitVec 8)), (0x27 : (BitVec 8)), (0xEB : (BitVec 8)), (0xE2 : (BitVec 8)), (0x80 : (BitVec 8)), (0x12 : (BitVec 8)), (0x07 : (BitVec 8)), (0x9A : (BitVec 8)), (0x05 : (BitVec 8)), (0x96 : (BitVec 8)), (0x18 : (BitVec 8)), (0xC3 : (BitVec 8)), (0x23 : (BitVec 8)), (0xC7 : (BitVec 8)), (0x04 : (BitVec 8)), (0x15 : (BitVec 8)), (0x31 : (BitVec 8)), (0xD8 : (BitVec 8)), (0x71 : (BitVec 8)), (0xF1 : (BitVec 8)), (0xE5 : (BitVec 8)), (0xA5 : (BitVec 8)), (0x34 : (BitVec 8)), (0xCC : (BitVec 8)), (0xF7 : (BitVec 8)), (0x3F : (BitVec 8)), (0x36 : (BitVec 8)), (0x26 : (BitVec 8)), (0x93 : (BitVec 8)), (0xFD : (BitVec 8)), (0xB7 : (BitVec 8)), (0xC0 : (BitVec 8)), (0x72 : (BitVec 8)), (0xA4 : (BitVec 8)), (0x9C : (BitVec 8)), (0xAF : (BitVec 8)), (0xA2 : (BitVec 8)), (0xD4 : (BitVec 8)), (0xAD : (BitVec 8)), (0xF0 : (BitVec 8)), (0x47 : (BitVec 8)), (0x59 : (BitVec 8)), (0xFA : (BitVec 8)), (0x7D : (BitVec 8)), (0xC9 : (BitVec 8)), (0x82 : (BitVec 8)), (0xCA : (BitVec 8)), (0x76 : (BitVec 8)), (0xAB : (BitVec 8)), (0xD7 : (BitVec 8)), (0xFE : (BitVec 8)), (0x2B : (BitVec 8)), (0x67 : (BitVec 8)), (0x01 : (BitVec 8)), (0x30 : (BitVec 8)), (0xC5 : (BitVec 8)), (0x6F : (BitVec 8)), (0x6B : (BitVec 8)), (0xF2 : (BitVec 8)), (0x7B : (BitVec 8)), (0x77 : (BitVec 8)), (0x7C : (BitVec 8)), (0x63 : (BitVec 8))]

def aes_sbox_inv_table : (Vector (BitVec 8) 256) :=
  #v[(0x7D : (BitVec 8)), (0x0C : (BitVec 8)), (0x21 : (BitVec 8)), (0x55 : (BitVec 8)), (0x63 : (BitVec 8)), (0x14 : (BitVec 8)), (0x69 : (BitVec 8)), (0xE1 : (BitVec 8)), (0x26 : (BitVec 8)), (0xD6 : (BitVec 8)), (0x77 : (BitVec 8)), (0xBA : (BitVec 8)), (0x7E : (BitVec 8)), (0x04 : (BitVec 8)), (0x2B : (BitVec 8)), (0x17 : (BitVec 8)), (0x61 : (BitVec 8)), (0x99 : (BitVec 8)), (0x53 : (BitVec 8)), (0x83 : (BitVec 8)), (0x3C : (BitVec 8)), (0xBB : (BitVec 8)), (0xEB : (BitVec 8)), (0xC8 : (BitVec 8)), (0xB0 : (BitVec 8)), (0xF5 : (BitVec 8)), (0x2A : (BitVec 8)), (0xAE : (BitVec 8)), (0x4D : (BitVec 8)), (0x3B : (BitVec 8)), (0xE0 : (BitVec 8)), (0xA0 : (BitVec 8)), (0xEF : (BitVec 8)), (0x9C : (BitVec 8)), (0xC9 : (BitVec 8)), (0x93 : (BitVec 8)), (0x9F : (BitVec 8)), (0x7A : (BitVec 8)), (0xE5 : (BitVec 8)), (0x2D : (BitVec 8)), (0x0D : (BitVec 8)), (0x4A : (BitVec 8)), (0xB5 : (BitVec 8)), (0x19 : (BitVec 8)), (0xA9 : (BitVec 8)), (0x7F : (BitVec 8)), (0x51 : (BitVec 8)), (0x60 : (BitVec 8)), (0x5F : (BitVec 8)), (0xEC : (BitVec 8)), (0x80 : (BitVec 8)), (0x27 : (BitVec 8)), (0x59 : (BitVec 8)), (0x10 : (BitVec 8)), (0x12 : (BitVec 8)), (0xB1 : (BitVec 8)), (0x31 : (BitVec 8)), (0xC7 : (BitVec 8)), (0x07 : (BitVec 8)), (0x88 : (BitVec 8)), (0x33 : (BitVec 8)), (0xA8 : (BitVec 8)), (0xDD : (BitVec 8)), (0x1F : (BitVec 8)), (0xF4 : (BitVec 8)), (0x5A : (BitVec 8)), (0xCD : (BitVec 8)), (0x78 : (BitVec 8)), (0xFE : (BitVec 8)), (0xC0 : (BitVec 8)), (0xDB : (BitVec 8)), (0x9A : (BitVec 8)), (0x20 : (BitVec 8)), (0x79 : (BitVec 8)), (0xD2 : (BitVec 8)), (0xC6 : (BitVec 8)), (0x4B : (BitVec 8)), (0x3E : (BitVec 8)), (0x56 : (BitVec 8)), (0xFC : (BitVec 8)), (0x1B : (BitVec 8)), (0xBE : (BitVec 8)), (0x18 : (BitVec 8)), (0xAA : (BitVec 8)), (0x0E : (BitVec 8)), (0x62 : (BitVec 8)), (0xB7 : (BitVec 8)), (0x6F : (BitVec 8)), (0x89 : (BitVec 8)), (0xC5 : (BitVec 8)), (0x29 : (BitVec 8)), (0x1D : (BitVec 8)), (0x71 : (BitVec 8)), (0x1A : (BitVec 8)), (0xF1 : (BitVec 8)), (0x47 : (BitVec 8)), (0x6E : (BitVec 8)), (0xDF : (BitVec 8)), (0x75 : (BitVec 8)), (0x1C : (BitVec 8)), (0xE8 : (BitVec 8)), (0x37 : (BitVec 8)), (0xF9 : (BitVec 8)), (0xE2 : (BitVec 8)), (0x85 : (BitVec 8)), (0x35 : (BitVec 8)), (0xAD : (BitVec 8)), (0xE7 : (BitVec 8)), (0x22 : (BitVec 8)), (0x74 : (BitVec 8)), (0xAC : (BitVec 8)), (0x96 : (BitVec 8)), (0x73 : (BitVec 8)), (0xE6 : (BitVec 8)), (0xB4 : (BitVec 8)), (0xF0 : (BitVec 8)), (0xCE : (BitVec 8)), (0xCF : (BitVec 8)), (0xF2 : (BitVec 8)), (0x97 : (BitVec 8)), (0xEA : (BitVec 8)), (0xDC : (BitVec 8)), (0x67 : (BitVec 8)), (0x4F : (BitVec 8)), (0x41 : (BitVec 8)), (0x11 : (BitVec 8)), (0x91 : (BitVec 8)), (0x3A : (BitVec 8)), (0x6B : (BitVec 8)), (0x8A : (BitVec 8)), (0x13 : (BitVec 8)), (0x01 : (BitVec 8)), (0x03 : (BitVec 8)), (0xBD : (BitVec 8)), (0xAF : (BitVec 8)), (0xC1 : (BitVec 8)), (0x02 : (BitVec 8)), (0x0F : (BitVec 8)), (0x3F : (BitVec 8)), (0xCA : (BitVec 8)), (0x8F : (BitVec 8)), (0x1E : (BitVec 8)), (0x2C : (BitVec 8)), (0xD0 : (BitVec 8)), (0x06 : (BitVec 8)), (0x45 : (BitVec 8)), (0xB3 : (BitVec 8)), (0xB8 : (BitVec 8)), (0x05 : (BitVec 8)), (0x58 : (BitVec 8)), (0xE4 : (BitVec 8)), (0xF7 : (BitVec 8)), (0x0A : (BitVec 8)), (0xD3 : (BitVec 8)), (0xBC : (BitVec 8)), (0x8C : (BitVec 8)), (0x00 : (BitVec 8)), (0xAB : (BitVec 8)), (0xD8 : (BitVec 8)), (0x90 : (BitVec 8)), (0x84 : (BitVec 8)), (0x9D : (BitVec 8)), (0x8D : (BitVec 8)), (0xA7 : (BitVec 8)), (0x57 : (BitVec 8)), (0x46 : (BitVec 8)), (0x15 : (BitVec 8)), (0x5E : (BitVec 8)), (0xDA : (BitVec 8)), (0xB9 : (BitVec 8)), (0xED : (BitVec 8)), (0xFD : (BitVec 8)), (0x50 : (BitVec 8)), (0x48 : (BitVec 8)), (0x70 : (BitVec 8)), (0x6C : (BitVec 8)), (0x92 : (BitVec 8)), (0xB6 : (BitVec 8)), (0x65 : (BitVec 8)), (0x5D : (BitVec 8)), (0xCC : (BitVec 8)), (0x5C : (BitVec 8)), (0xA4 : (BitVec 8)), (0xD4 : (BitVec 8)), (0x16 : (BitVec 8)), (0x98 : (BitVec 8)), (0x68 : (BitVec 8)), (0x86 : (BitVec 8)), (0x64 : (BitVec 8)), (0xF6 : (BitVec 8)), (0xF8 : (BitVec 8)), (0x72 : (BitVec 8)), (0x25 : (BitVec 8)), (0xD1 : (BitVec 8)), (0x8B : (BitVec 8)), (0x6D : (BitVec 8)), (0x49 : (BitVec 8)), (0xA2 : (BitVec 8)), (0x5B : (BitVec 8)), (0x76 : (BitVec 8)), (0xB2 : (BitVec 8)), (0x24 : (BitVec 8)), (0xD9 : (BitVec 8)), (0x28 : (BitVec 8)), (0x66 : (BitVec 8)), (0xA1 : (BitVec 8)), (0x2E : (BitVec 8)), (0x08 : (BitVec 8)), (0x4E : (BitVec 8)), (0xC3 : (BitVec 8)), (0xFA : (BitVec 8)), (0x42 : (BitVec 8)), (0x0B : (BitVec 8)), (0x95 : (BitVec 8)), (0x4C : (BitVec 8)), (0xEE : (BitVec 8)), (0x3D : (BitVec 8)), (0x23 : (BitVec 8)), (0xC2 : (BitVec 8)), (0xA6 : (BitVec 8)), (0x32 : (BitVec 8)), (0x94 : (BitVec 8)), (0x7B : (BitVec 8)), (0x54 : (BitVec 8)), (0xCB : (BitVec 8)), (0xE9 : (BitVec 8)), (0xDE : (BitVec 8)), (0xC4 : (BitVec 8)), (0x44 : (BitVec 8)), (0x43 : (BitVec 8)), (0x8E : (BitVec 8)), (0x34 : (BitVec 8)), (0x87 : (BitVec 8)), (0xFF : (BitVec 8)), (0x2F : (BitVec 8)), (0x9B : (BitVec 8)), (0x82 : (BitVec 8)), (0x39 : (BitVec 8)), (0xE3 : (BitVec 8)), (0x7C : (BitVec 8)), (0xFB : (BitVec 8)), (0xD7 : (BitVec 8)), (0xF3 : (BitVec 8)), (0x81 : (BitVec 8)), (0x9E : (BitVec 8)), (0xA3 : (BitVec 8)), (0x40 : (BitVec 8)), (0xBF : (BitVec 8)), (0x38 : (BitVec 8)), (0xA5 : (BitVec 8)), (0x36 : (BitVec 8)), (0x30 : (BitVec 8)), (0xD5 : (BitVec 8)), (0x6A : (BitVec 8)), (0x09 : (BitVec 8)), (0x52 : (BitVec 8))]

def sbox_lookup (x : (BitVec 8)) (table : (Vector (BitVec 8) 256)) : (BitVec 8) :=
  (GetElem?.getElem! table (255 -i (BitVec.toNat x)))

def aes_sbox_fwd (x : (BitVec 8)) : (BitVec 8) :=
  (sbox_lookup x aes_sbox_fwd_table)

def aes_sbox_inv (x : (BitVec 8)) : (BitVec 8) :=
  (sbox_lookup x aes_sbox_inv_table)

def aes_subword_fwd (x : (BitVec 32)) : (BitVec 32) :=
  ((aes_sbox_fwd (Sail.BitVec.extractLsb x 31 24)) ++ ((aes_sbox_fwd
        (Sail.BitVec.extractLsb x 23 16)) ++ ((aes_sbox_fwd (Sail.BitVec.extractLsb x 15 8)) ++ (aes_sbox_fwd
          (Sail.BitVec.extractLsb x 7 0)))))

def aes_subword_inv (x : (BitVec 32)) : (BitVec 32) :=
  ((aes_sbox_inv (Sail.BitVec.extractLsb x 31 24)) ++ ((aes_sbox_inv
        (Sail.BitVec.extractLsb x 23 16)) ++ ((aes_sbox_inv (Sail.BitVec.extractLsb x 15 8)) ++ (aes_sbox_inv
          (Sail.BitVec.extractLsb x 7 0)))))

def sm4_sbox (x : (BitVec 8)) : (BitVec 8) :=
  (sbox_lookup x sm4_sbox_table)

/-- Type quantifiers: c : Nat, 0 ≤ c -/
def aes_get_column (state : (BitVec 128)) (c : Nat) : (BitVec 32) :=
  (Sail.BitVec.extractLsb (shift_bits_right state (to_bits 7 (32 *i c))) 31 0)

def aes_apply_fwd_sbox_to_each_byte (x : (BitVec 64)) : (BitVec 64) :=
  ((aes_sbox_fwd (Sail.BitVec.extractLsb x 63 56)) ++ ((aes_sbox_fwd
        (Sail.BitVec.extractLsb x 55 48)) ++ ((aes_sbox_fwd (Sail.BitVec.extractLsb x 47 40)) ++ ((aes_sbox_fwd
            (Sail.BitVec.extractLsb x 39 32)) ++ ((aes_sbox_fwd (Sail.BitVec.extractLsb x 31 24)) ++ ((aes_sbox_fwd
                (Sail.BitVec.extractLsb x 23 16)) ++ ((aes_sbox_fwd (Sail.BitVec.extractLsb x 15 8)) ++ (aes_sbox_fwd
                  (Sail.BitVec.extractLsb x 7 0)))))))))

def aes_apply_inv_sbox_to_each_byte (x : (BitVec 64)) : (BitVec 64) :=
  ((aes_sbox_inv (Sail.BitVec.extractLsb x 63 56)) ++ ((aes_sbox_inv
        (Sail.BitVec.extractLsb x 55 48)) ++ ((aes_sbox_inv (Sail.BitVec.extractLsb x 47 40)) ++ ((aes_sbox_inv
            (Sail.BitVec.extractLsb x 39 32)) ++ ((aes_sbox_inv (Sail.BitVec.extractLsb x 31 24)) ++ ((aes_sbox_inv
                (Sail.BitVec.extractLsb x 23 16)) ++ ((aes_sbox_inv (Sail.BitVec.extractLsb x 15 8)) ++ (aes_sbox_inv
                  (Sail.BitVec.extractLsb x 7 0)))))))))

/-- Type quantifiers: i : Int -/
def getbyte (x : (BitVec 64)) (i : Int) : (BitVec 8) :=
  (Sail.BitVec.extractLsb (shift_bits_right x (to_bits 6 (i *i 8))) 7 0)

def aes_rv64_shiftrows_fwd (rs2 : (BitVec 64)) (rs1 : (BitVec 64)) : (BitVec 64) :=
  ((getbyte rs1 3) ++ ((getbyte rs2 6) ++ ((getbyte rs2 1) ++ ((getbyte rs1 4) ++ ((getbyte rs2 7) ++ ((getbyte
                rs2 2) ++ ((getbyte rs1 5) ++ (getbyte rs1 0))))))))

def aes_rv64_shiftrows_inv (rs2 : (BitVec 64)) (rs1 : (BitVec 64)) : (BitVec 64) :=
  ((getbyte rs2 3) ++ ((getbyte rs2 6) ++ ((getbyte rs1 1) ++ ((getbyte rs1 4) ++ ((getbyte rs1 7) ++ ((getbyte
                rs2 2) ++ ((getbyte rs2 5) ++ (getbyte rs1 0))))))))

def aes_shift_rows_fwd (x : (BitVec 128)) : (BitVec 128) :=
  let ic3 : (BitVec 32) := (aes_get_column x 3)
  let ic2 : (BitVec 32) := (aes_get_column x 2)
  let ic1 : (BitVec 32) := (aes_get_column x 1)
  let ic0 : (BitVec 32) := (aes_get_column x 0)
  let oc0 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic3 31 24) ++ ((Sail.BitVec.extractLsb ic2 23 16) ++ ((Sail.BitVec.extractLsb
            ic1 15 8) ++ (Sail.BitVec.extractLsb ic0 7 0))))
  let oc1 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic0 31 24) ++ ((Sail.BitVec.extractLsb ic3 23 16) ++ ((Sail.BitVec.extractLsb
            ic2 15 8) ++ (Sail.BitVec.extractLsb ic1 7 0))))
  let oc2 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic1 31 24) ++ ((Sail.BitVec.extractLsb ic0 23 16) ++ ((Sail.BitVec.extractLsb
            ic3 15 8) ++ (Sail.BitVec.extractLsb ic2 7 0))))
  let oc3 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic2 31 24) ++ ((Sail.BitVec.extractLsb ic1 23 16) ++ ((Sail.BitVec.extractLsb
            ic0 15 8) ++ (Sail.BitVec.extractLsb ic3 7 0))))
  (oc3 ++ (oc2 ++ (oc1 ++ oc0)))

def aes_shift_rows_inv (x : (BitVec 128)) : (BitVec 128) :=
  let ic3 : (BitVec 32) := (aes_get_column x 3)
  let ic2 : (BitVec 32) := (aes_get_column x 2)
  let ic1 : (BitVec 32) := (aes_get_column x 1)
  let ic0 : (BitVec 32) := (aes_get_column x 0)
  let oc0 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic1 31 24) ++ ((Sail.BitVec.extractLsb ic2 23 16) ++ ((Sail.BitVec.extractLsb
            ic3 15 8) ++ (Sail.BitVec.extractLsb ic0 7 0))))
  let oc1 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic2 31 24) ++ ((Sail.BitVec.extractLsb ic3 23 16) ++ ((Sail.BitVec.extractLsb
            ic0 15 8) ++ (Sail.BitVec.extractLsb ic1 7 0))))
  let oc2 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic3 31 24) ++ ((Sail.BitVec.extractLsb ic0 23 16) ++ ((Sail.BitVec.extractLsb
            ic1 15 8) ++ (Sail.BitVec.extractLsb ic2 7 0))))
  let oc3 : (BitVec 32) :=
    ((Sail.BitVec.extractLsb ic0 31 24) ++ ((Sail.BitVec.extractLsb ic1 23 16) ++ ((Sail.BitVec.extractLsb
            ic2 15 8) ++ (Sail.BitVec.extractLsb ic3 7 0))))
  (oc3 ++ (oc2 ++ (oc1 ++ oc0)))

def aes_subbytes_fwd (x : (BitVec 128)) : (BitVec 128) :=
  let oc0 : (BitVec 32) := (aes_subword_fwd (aes_get_column x 0))
  let oc1 : (BitVec 32) := (aes_subword_fwd (aes_get_column x 1))
  let oc2 : (BitVec 32) := (aes_subword_fwd (aes_get_column x 2))
  let oc3 : (BitVec 32) := (aes_subword_fwd (aes_get_column x 3))
  (oc3 ++ (oc2 ++ (oc1 ++ oc0)))

def aes_subbytes_inv (x : (BitVec 128)) : (BitVec 128) :=
  let oc0 : (BitVec 32) := (aes_subword_inv (aes_get_column x 0))
  let oc1 : (BitVec 32) := (aes_subword_inv (aes_get_column x 1))
  let oc2 : (BitVec 32) := (aes_subword_inv (aes_get_column x 2))
  let oc3 : (BitVec 32) := (aes_subword_inv (aes_get_column x 3))
  (oc3 ++ (oc2 ++ (oc1 ++ oc0)))

def aes_mixcolumns_fwd (x : (BitVec 128)) : SailM (BitVec 128) := do
  let oc0 ← (( do (aes_mixcolumn_fwd (aes_get_column x 0)) ) : SailM (BitVec 32) )
  let oc1 ← (( do (aes_mixcolumn_fwd (aes_get_column x 1)) ) : SailM (BitVec 32) )
  let oc2 ← (( do (aes_mixcolumn_fwd (aes_get_column x 2)) ) : SailM (BitVec 32) )
  let oc3 ← (( do (aes_mixcolumn_fwd (aes_get_column x 3)) ) : SailM (BitVec 32) )
  (pure (oc3 ++ (oc2 ++ (oc1 ++ oc0))))

def aes_mixcolumns_inv (x : (BitVec 128)) : SailM (BitVec 128) := do
  let oc0 ← (( do (aes_mixcolumn_inv (aes_get_column x 0)) ) : SailM (BitVec 32) )
  let oc1 ← (( do (aes_mixcolumn_inv (aes_get_column x 1)) ) : SailM (BitVec 32) )
  let oc2 ← (( do (aes_mixcolumn_inv (aes_get_column x 2)) ) : SailM (BitVec 32) )
  let oc3 ← (( do (aes_mixcolumn_inv (aes_get_column x 3)) ) : SailM (BitVec 32) )
  (pure (oc3 ++ (oc2 ++ (oc1 ++ oc0))))

def encdec_uop_forwards (arg_ : uop) : (BitVec 7) :=
  match arg_ with
  | RISCV_LUI => (0b0110111 : (BitVec 7))
  | RISCV_AUIPC => (0b0010111 : (BitVec 7))

def encdec_uop_backwards (arg_ : (BitVec 7)) : SailM uop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b0110111 : (BitVec 7)))
  then (pure RISCV_LUI)
  else
    if (BEq.beq b__0 (0b0010111 : (BitVec 7)))
    then (pure RISCV_AUIPC)
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit

def encdec_uop_forwards_matches (arg_ : uop) : Bool :=
  match arg_ with
  | RISCV_LUI => true
  | RISCV_AUIPC => true

def encdec_uop_backwards_matches (arg_ : (BitVec 7)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b0110111 : (BitVec 7)))
  then true
  else
    if (BEq.beq b__0 (0b0010111 : (BitVec 7)))
    then true
    else false

def utype_mnemonic_backwards (arg_ : String) : SailM uop := do
  match arg_ with
  | "lui" => (pure RISCV_LUI)
  | "auipc" => (pure RISCV_AUIPC)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def utype_mnemonic_forwards_matches (arg_ : uop) : Bool :=
  match arg_ with
  | RISCV_LUI => true
  | RISCV_AUIPC => true

def utype_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "lui" => true
  | "auipc" => true
  | _ => false

def encdec_bop_forwards (arg_ : bop) : (BitVec 3) :=
  match arg_ with
  | RISCV_BEQ => (0b000 : (BitVec 3))
  | RISCV_BNE => (0b001 : (BitVec 3))
  | RISCV_BLT => (0b100 : (BitVec 3))
  | RISCV_BGE => (0b101 : (BitVec 3))
  | RISCV_BLTU => (0b110 : (BitVec 3))
  | RISCV_BGEU => (0b111 : (BitVec 3))

def encdec_bop_backwards (arg_ : (BitVec 3)) : SailM bop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then (pure RISCV_BEQ)
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then (pure RISCV_BNE)
    else
      if (BEq.beq b__0 (0b100 : (BitVec 3)))
      then (pure RISCV_BLT)
      else
        if (BEq.beq b__0 (0b101 : (BitVec 3)))
        then (pure RISCV_BGE)
        else
          if (BEq.beq b__0 (0b110 : (BitVec 3)))
          then (pure RISCV_BLTU)
          else
            if (BEq.beq b__0 (0b111 : (BitVec 3)))
            then (pure RISCV_BGEU)
            else
              assert false "Pattern match failure at unknown location"
              throw Error.Exit

def encdec_bop_forwards_matches (arg_ : bop) : Bool :=
  match arg_ with
  | RISCV_BEQ => true
  | RISCV_BNE => true
  | RISCV_BLT => true
  | RISCV_BGE => true
  | RISCV_BLTU => true
  | RISCV_BGEU => true

def encdec_bop_backwards_matches (arg_ : (BitVec 3)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then true
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then true
    else
      if (BEq.beq b__0 (0b100 : (BitVec 3)))
      then true
      else
        if (BEq.beq b__0 (0b101 : (BitVec 3)))
        then true
        else
          if (BEq.beq b__0 (0b110 : (BitVec 3)))
          then true
          else
            if (BEq.beq b__0 (0b111 : (BitVec 3)))
            then true
            else false

def btype_mnemonic_backwards (arg_ : String) : SailM bop := do
  match arg_ with
  | "beq" => (pure RISCV_BEQ)
  | "bne" => (pure RISCV_BNE)
  | "blt" => (pure RISCV_BLT)
  | "bge" => (pure RISCV_BGE)
  | "bltu" => (pure RISCV_BLTU)
  | "bgeu" => (pure RISCV_BGEU)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def btype_mnemonic_forwards_matches (arg_ : bop) : Bool :=
  match arg_ with
  | RISCV_BEQ => true
  | RISCV_BNE => true
  | RISCV_BLT => true
  | RISCV_BGE => true
  | RISCV_BLTU => true
  | RISCV_BGEU => true

def btype_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "beq" => true
  | "bne" => true
  | "blt" => true
  | "bge" => true
  | "bltu" => true
  | "bgeu" => true
  | _ => false

def encdec_iop_forwards (arg_ : iop) : (BitVec 3) :=
  match arg_ with
  | RISCV_ADDI => (0b000 : (BitVec 3))
  | RISCV_SLTI => (0b010 : (BitVec 3))
  | RISCV_SLTIU => (0b011 : (BitVec 3))
  | RISCV_ANDI => (0b111 : (BitVec 3))
  | RISCV_ORI => (0b110 : (BitVec 3))
  | RISCV_XORI => (0b100 : (BitVec 3))

def encdec_iop_backwards (arg_ : (BitVec 3)) : SailM iop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then (pure RISCV_ADDI)
  else
    if (BEq.beq b__0 (0b010 : (BitVec 3)))
    then (pure RISCV_SLTI)
    else
      if (BEq.beq b__0 (0b011 : (BitVec 3)))
      then (pure RISCV_SLTIU)
      else
        if (BEq.beq b__0 (0b111 : (BitVec 3)))
        then (pure RISCV_ANDI)
        else
          if (BEq.beq b__0 (0b110 : (BitVec 3)))
          then (pure RISCV_ORI)
          else
            if (BEq.beq b__0 (0b100 : (BitVec 3)))
            then (pure RISCV_XORI)
            else
              assert false "Pattern match failure at unknown location"
              throw Error.Exit

def encdec_iop_forwards_matches (arg_ : iop) : Bool :=
  match arg_ with
  | RISCV_ADDI => true
  | RISCV_SLTI => true
  | RISCV_SLTIU => true
  | RISCV_ANDI => true
  | RISCV_ORI => true
  | RISCV_XORI => true

def encdec_iop_backwards_matches (arg_ : (BitVec 3)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then true
  else
    if (BEq.beq b__0 (0b010 : (BitVec 3)))
    then true
    else
      if (BEq.beq b__0 (0b011 : (BitVec 3)))
      then true
      else
        if (BEq.beq b__0 (0b111 : (BitVec 3)))
        then true
        else
          if (BEq.beq b__0 (0b110 : (BitVec 3)))
          then true
          else
            if (BEq.beq b__0 (0b100 : (BitVec 3)))
            then true
            else false

def itype_mnemonic_backwards (arg_ : String) : SailM iop := do
  match arg_ with
  | "addi" => (pure RISCV_ADDI)
  | "slti" => (pure RISCV_SLTI)
  | "sltiu" => (pure RISCV_SLTIU)
  | "xori" => (pure RISCV_XORI)
  | "ori" => (pure RISCV_ORI)
  | "andi" => (pure RISCV_ANDI)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def itype_mnemonic_forwards_matches (arg_ : iop) : Bool :=
  match arg_ with
  | RISCV_ADDI => true
  | RISCV_SLTI => true
  | RISCV_SLTIU => true
  | RISCV_XORI => true
  | RISCV_ORI => true
  | RISCV_ANDI => true

def itype_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "addi" => true
  | "slti" => true
  | "sltiu" => true
  | "xori" => true
  | "ori" => true
  | "andi" => true
  | _ => false

def encdec_sop_forwards (arg_ : sop) : (BitVec 3) :=
  match arg_ with
  | RISCV_SLLI => (0b001 : (BitVec 3))
  | RISCV_SRLI => (0b101 : (BitVec 3))
  | RISCV_SRAI => (0b101 : (BitVec 3))

def encdec_sop_backwards (arg_ : (BitVec 3)) : SailM sop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b001 : (BitVec 3)))
  then (pure RISCV_SLLI)
  else
    if (BEq.beq b__0 (0b101 : (BitVec 3)))
    then (pure RISCV_SRLI)
    else
      if (BEq.beq b__0 (0b101 : (BitVec 3)))
      then (pure RISCV_SRAI)
      else
        assert false "Pattern match failure at unknown location"
        throw Error.Exit

def encdec_sop_forwards_matches (arg_ : sop) : Bool :=
  match arg_ with
  | RISCV_SLLI => true
  | RISCV_SRLI => true
  | RISCV_SRAI => true

def encdec_sop_backwards_matches (arg_ : (BitVec 3)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b001 : (BitVec 3)))
  then true
  else
    if (BEq.beq b__0 (0b101 : (BitVec 3)))
    then true
    else
      if (BEq.beq b__0 (0b101 : (BitVec 3)))
      then true
      else false

def shiftiop_mnemonic_backwards (arg_ : String) : SailM sop := do
  match arg_ with
  | "slli" => (pure RISCV_SLLI)
  | "srli" => (pure RISCV_SRLI)
  | "srai" => (pure RISCV_SRAI)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def shiftiop_mnemonic_forwards_matches (arg_ : sop) : Bool :=
  match arg_ with
  | RISCV_SLLI => true
  | RISCV_SRLI => true
  | RISCV_SRAI => true

def shiftiop_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "slli" => true
  | "srli" => true
  | "srai" => true
  | _ => false

def rtype_mnemonic_backwards (arg_ : String) : SailM rop := do
  match arg_ with
  | "add" => (pure RISCV_ADD)
  | "slt" => (pure RISCV_SLT)
  | "sltu" => (pure RISCV_SLTU)
  | "and" => (pure RISCV_AND)
  | "or" => (pure RISCV_OR)
  | "xor" => (pure RISCV_XOR)
  | "sll" => (pure RISCV_SLL)
  | "srl" => (pure RISCV_SRL)
  | "sub" => (pure RISCV_SUB)
  | "sra" => (pure RISCV_SRA)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def rtype_mnemonic_forwards_matches (arg_ : rop) : Bool :=
  match arg_ with
  | RISCV_ADD => true
  | RISCV_SLT => true
  | RISCV_SLTU => true
  | RISCV_AND => true
  | RISCV_OR => true
  | RISCV_XOR => true
  | RISCV_SLL => true
  | RISCV_SRL => true
  | RISCV_SUB => true
  | RISCV_SRA => true

def rtype_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "add" => true
  | "slt" => true
  | "sltu" => true
  | "and" => true
  | "or" => true
  | "xor" => true
  | "sll" => true
  | "srl" => true
  | "sub" => true
  | "sra" => true
  | _ => false

/-- Type quantifiers: k_ex104959# : Bool, k_n : Nat, 0 < k_n ∧ k_n ≤ xlen -/
def extend_value (is_unsigned : Bool) (value : (BitVec k_n)) : (BitVec (2 ^ 3 * 8)) :=
  if is_unsigned
  then (zero_extend (m := ((2 ^i 3) *i 8)) value)
  else (sign_extend (m := ((2 ^i 3) *i 8)) value)

def is_aligned (vaddr : (BitVec (2 ^ 3 * 8))) (width : word_width) : Bool :=
  match width with
  | BYTE => true
  | HALF => (BEq.beq (Sail.BitVec.extractLsb vaddr 0 0) (zeros_implicit (n := ((0 -i 0) +i 1))))
  | WORD => (BEq.beq (Sail.BitVec.extractLsb vaddr 1 0) (zeros_implicit (n := ((1 -i 0) +i 1))))
  | DOUBLE => (BEq.beq (Sail.BitVec.extractLsb vaddr 2 0) (zeros_implicit (n := ((2 -i 0) +i 1))))

def check_misaligned (vaddr : virtaddr) (width : word_width) : Bool :=
  (Bool.and (not (plat_enable_misaligned_access ())) (not (is_aligned (virtaddr_bits vaddr) width)))

def maybe_aq_backwards (arg_ : String) : SailM Bool := do
  match arg_ with
  | ".aq" => (pure true)
  | "" => (pure false)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: k_ex104974# : Bool -/
def maybe_aq_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def maybe_aq_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | ".aq" => true
  | "" => true
  | _ => false

def maybe_rl_backwards (arg_ : String) : SailM Bool := do
  match arg_ with
  | ".rl" => (pure true)
  | "" => (pure false)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: k_ex104975# : Bool -/
def maybe_rl_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def maybe_rl_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | ".rl" => true
  | "" => true
  | _ => false

def maybe_u_backwards (arg_ : String) : SailM Bool := do
  match arg_ with
  | "u" => (pure true)
  | "" => (pure false)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: k_ex104976# : Bool -/
def maybe_u_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | true => true
  | false => true

def maybe_u_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "u" => true
  | "" => true
  | _ => false

def rtypew_mnemonic_backwards (arg_ : String) : SailM ropw := do
  match arg_ with
  | "addw" => (pure RISCV_ADDW)
  | "subw" => (pure RISCV_SUBW)
  | "sllw" => (pure RISCV_SLLW)
  | "srlw" => (pure RISCV_SRLW)
  | "sraw" => (pure RISCV_SRAW)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def rtypew_mnemonic_forwards_matches (arg_ : ropw) : Bool :=
  match arg_ with
  | RISCV_ADDW => true
  | RISCV_SUBW => true
  | RISCV_SLLW => true
  | RISCV_SRLW => true
  | RISCV_SRAW => true

def rtypew_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "addw" => true
  | "subw" => true
  | "sllw" => true
  | "srlw" => true
  | "sraw" => true
  | _ => false

def shiftiwop_mnemonic_backwards (arg_ : String) : SailM sopw := do
  match arg_ with
  | "slliw" => (pure RISCV_SLLIW)
  | "srliw" => (pure RISCV_SRLIW)
  | "sraiw" => (pure RISCV_SRAIW)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def shiftiwop_mnemonic_forwards_matches (arg_ : sopw) : Bool :=
  match arg_ with
  | RISCV_SLLIW => true
  | RISCV_SRLIW => true
  | RISCV_SRAIW => true

def shiftiwop_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "slliw" => true
  | "srliw" => true
  | "sraiw" => true
  | _ => false

/-- Type quantifiers: k_ex104977# : Bool -/
def effective_fence_set (set : (BitVec 4)) (fiom : Bool) : (BitVec 4) :=
  if fiom
  then
    ((Sail.BitVec.extractLsb set 3 2) ++ ((Sail.BitVec.extractLsb set 1 0) ||| (Sail.BitVec.extractLsb
          set 3 2)))
  else set

def bit_maybe_r_backwards (arg_ : String) : SailM (BitVec 1) := do
  match arg_ with
  | "r" => (pure (0b1 : (BitVec 1)))
  | "" => (pure (0b0 : (BitVec 1)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def bit_maybe_r_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b0 : (BitVec 1)))
    then true
    else false

def bit_maybe_r_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "r" => true
  | "" => true
  | _ => false

def bit_maybe_w_backwards (arg_ : String) : SailM (BitVec 1) := do
  match arg_ with
  | "w" => (pure (0b1 : (BitVec 1)))
  | "" => (pure (0b0 : (BitVec 1)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def bit_maybe_w_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b0 : (BitVec 1)))
    then true
    else false

def bit_maybe_w_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "w" => true
  | "" => true
  | _ => false

def bit_maybe_i_backwards (arg_ : String) : SailM (BitVec 1) := do
  match arg_ with
  | "i" => (pure (0b1 : (BitVec 1)))
  | "" => (pure (0b0 : (BitVec 1)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def bit_maybe_i_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b0 : (BitVec 1)))
    then true
    else false

def bit_maybe_i_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "i" => true
  | "" => true
  | _ => false

def bit_maybe_o_backwards (arg_ : String) : SailM (BitVec 1) := do
  match arg_ with
  | "o" => (pure (0b1 : (BitVec 1)))
  | "" => (pure (0b0 : (BitVec 1)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def bit_maybe_o_forwards_matches (arg_ : (BitVec 1)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b1 : (BitVec 1)))
  then true
  else
    if (BEq.beq b__0 (0b0 : (BitVec 1)))
    then true
    else false

def bit_maybe_o_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "o" => true
  | "" => true
  | _ => false

def fence_bits_backwards (arg_ : String) : SailM (BitVec 4) := do
  match arg_ with
  | _ => throw Error.Exit

def fence_bits_forwards_matches (arg_ : (BitVec 4)) : Bool :=
  match arg_ with
  | v__1 => true

def fence_bits_backwards_matches (arg_ : String) : SailM Bool := do
  match arg_ with
  | _ => throw Error.Exit

/-- Type quantifiers: k_ex104995# : Bool, k_ex104994# : Bool -/
def aqrl_str (aq : Bool) (rl : Bool) : String :=
  match (aq, rl) with
  | (false, false) => ""
  | (false, true) => ".rl"
  | (true, false) => ".aq"
  | (true, true) => ".aqrl"

def lrsc_width_str (width : word_width) : String :=
  match width with
  | BYTE => ".b"
  | HALF => ".h"
  | WORD => ".w"
  | DOUBLE => ".d"

def lrsc_width_valid (size : word_width) : Bool :=
  match size with
  | WORD => true
  | DOUBLE => (xlen ≥b 64)
  | _ => false

def amo_width_valid (size : word_width) : SailM Bool := do
  match size with
  | BYTE => (extensionEnabled Ext_Zabha)
  | HALF => (extensionEnabled Ext_Zabha)
  | WORD => (pure true)
  | DOUBLE => (pure (xlen ≥b 64))

def encdec_amoop_forwards (arg_ : amoop) : (BitVec 5) :=
  match arg_ with
  | AMOSWAP => (0b00001 : (BitVec 5))
  | AMOADD => (0b00000 : (BitVec 5))
  | AMOXOR => (0b00100 : (BitVec 5))
  | AMOAND => (0b01100 : (BitVec 5))
  | AMOOR => (0b01000 : (BitVec 5))
  | AMOMIN => (0b10000 : (BitVec 5))
  | AMOMAX => (0b10100 : (BitVec 5))
  | AMOMINU => (0b11000 : (BitVec 5))
  | AMOMAXU => (0b11100 : (BitVec 5))

def encdec_amoop_backwards (arg_ : (BitVec 5)) : SailM amoop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b00001 : (BitVec 5)))
  then (pure AMOSWAP)
  else
    if (BEq.beq b__0 (0b00000 : (BitVec 5)))
    then (pure AMOADD)
    else
      if (BEq.beq b__0 (0b00100 : (BitVec 5)))
      then (pure AMOXOR)
      else
        if (BEq.beq b__0 (0b01100 : (BitVec 5)))
        then (pure AMOAND)
        else
          if (BEq.beq b__0 (0b01000 : (BitVec 5)))
          then (pure AMOOR)
          else
            if (BEq.beq b__0 (0b10000 : (BitVec 5)))
            then (pure AMOMIN)
            else
              if (BEq.beq b__0 (0b10100 : (BitVec 5)))
              then (pure AMOMAX)
              else
                if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                then (pure AMOMINU)
                else
                  if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                  then (pure AMOMAXU)
                  else
                    assert false "Pattern match failure at unknown location"
                    throw Error.Exit

def encdec_amoop_forwards_matches (arg_ : amoop) : Bool :=
  match arg_ with
  | AMOSWAP => true
  | AMOADD => true
  | AMOXOR => true
  | AMOAND => true
  | AMOOR => true
  | AMOMIN => true
  | AMOMAX => true
  | AMOMINU => true
  | AMOMAXU => true

def encdec_amoop_backwards_matches (arg_ : (BitVec 5)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b00001 : (BitVec 5)))
  then true
  else
    if (BEq.beq b__0 (0b00000 : (BitVec 5)))
    then true
    else
      if (BEq.beq b__0 (0b00100 : (BitVec 5)))
      then true
      else
        if (BEq.beq b__0 (0b01100 : (BitVec 5)))
        then true
        else
          if (BEq.beq b__0 (0b01000 : (BitVec 5)))
          then true
          else
            if (BEq.beq b__0 (0b10000 : (BitVec 5)))
            then true
            else
              if (BEq.beq b__0 (0b10100 : (BitVec 5)))
              then true
              else
                if (BEq.beq b__0 (0b11000 : (BitVec 5)))
                then true
                else
                  if (BEq.beq b__0 (0b11100 : (BitVec 5)))
                  then true
                  else false

def amo_mnemonic_backwards (arg_ : String) : SailM amoop := do
  match arg_ with
  | "amoswap" => (pure AMOSWAP)
  | "amoadd" => (pure AMOADD)
  | "amoxor" => (pure AMOXOR)
  | "amoand" => (pure AMOAND)
  | "amoor" => (pure AMOOR)
  | "amomin" => (pure AMOMIN)
  | "amomax" => (pure AMOMAX)
  | "amominu" => (pure AMOMINU)
  | "amomaxu" => (pure AMOMAXU)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def amo_mnemonic_forwards_matches (arg_ : amoop) : Bool :=
  match arg_ with
  | AMOSWAP => true
  | AMOADD => true
  | AMOXOR => true
  | AMOAND => true
  | AMOOR => true
  | AMOMIN => true
  | AMOMAX => true
  | AMOMINU => true
  | AMOMAXU => true

def amo_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "amoswap" => true
  | "amoadd" => true
  | "amoxor" => true
  | "amoand" => true
  | "amoor" => true
  | "amomin" => true
  | "amomax" => true
  | "amominu" => true
  | "amomaxu" => true
  | _ => false

def encdec_mul_op_forwards (arg_ : mul_op) : SailM (BitVec 3) := do
  match arg_ with
  | { high := false, signed_rs1 := true, signed_rs2 := true } => (pure (0b000 : (BitVec 3)))
  | { high := true, signed_rs1 := true, signed_rs2 := true } => (pure (0b001 : (BitVec 3)))
  | { high := true, signed_rs1 := true, signed_rs2 := false } => (pure (0b010 : (BitVec 3)))
  | { high := true, signed_rs1 := false, signed_rs2 := false } => (pure (0b011 : (BitVec 3)))
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def encdec_mul_op_backwards (arg_ : (BitVec 3)) : SailM mul_op := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then
    (pure { high := false
            signed_rs1 := true
            signed_rs2 := true })
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then
      (pure { high := true
              signed_rs1 := true
              signed_rs2 := true })
    else
      if (BEq.beq b__0 (0b010 : (BitVec 3)))
      then
        (pure { high := true
                signed_rs1 := true
                signed_rs2 := false })
      else
        if (BEq.beq b__0 (0b011 : (BitVec 3)))
        then
          (pure { high := true
                  signed_rs1 := false
                  signed_rs2 := false })
        else
          assert false "Pattern match failure at unknown location"
          throw Error.Exit

def encdec_mul_op_forwards_matches (arg_ : mul_op) : Bool :=
  match arg_ with
  | { high := false, signed_rs1 := true, signed_rs2 := true } => true
  | { high := true, signed_rs1 := true, signed_rs2 := true } => true
  | { high := true, signed_rs1 := true, signed_rs2 := false } => true
  | { high := true, signed_rs1 := false, signed_rs2 := false } => true
  | _ => false

def encdec_mul_op_backwards_matches (arg_ : (BitVec 3)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b000 : (BitVec 3)))
  then true
  else
    if (BEq.beq b__0 (0b001 : (BitVec 3)))
    then true
    else
      if (BEq.beq b__0 (0b010 : (BitVec 3)))
      then true
      else
        if (BEq.beq b__0 (0b011 : (BitVec 3)))
        then true
        else false

def mul_mnemonic_backwards (arg_ : String) : SailM mul_op := do
  match arg_ with
  | "mul" =>
    (pure { high := false
            signed_rs1 := true
            signed_rs2 := true })
  | "mulh" =>
    (pure { high := true
            signed_rs1 := true
            signed_rs2 := true })
  | "mulhsu" =>
    (pure { high := true
            signed_rs1 := true
            signed_rs2 := false })
  | "mulhu" =>
    (pure { high := true
            signed_rs1 := false
            signed_rs2 := false })
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def mul_mnemonic_forwards_matches (arg_ : mul_op) : Bool :=
  match arg_ with
  | { high := false, signed_rs1 := true, signed_rs2 := true } => true
  | { high := true, signed_rs1 := true, signed_rs2 := true } => true
  | { high := true, signed_rs1 := true, signed_rs2 := false } => true
  | { high := true, signed_rs1 := false, signed_rs2 := false } => true
  | _ => false

def mul_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "mul" => true
  | "mulh" => true
  | "mulhsu" => true
  | "mulhu" => true
  | _ => false

def maybe_not_u_backwards (arg_ : String) : SailM Bool := do
  match arg_ with
  | "u" => (pure false)
  | "" => (pure true)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

/-- Type quantifiers: k_ex105060# : Bool -/
def maybe_not_u_forwards_matches (arg_ : Bool) : Bool :=
  match arg_ with
  | false => true
  | true => true

def maybe_not_u_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "u" => true
  | "" => true
  | _ => false

def encdec_csrop_forwards (arg_ : csrop) : (BitVec 2) :=
  match arg_ with
  | CSRRW => (0b01 : (BitVec 2))
  | CSRRS => (0b10 : (BitVec 2))
  | CSRRC => (0b11 : (BitVec 2))

def encdec_csrop_backwards (arg_ : (BitVec 2)) : SailM csrop := do
  let b__0 := arg_
  if (BEq.beq b__0 (0b01 : (BitVec 2)))
  then (pure CSRRW)
  else
    if (BEq.beq b__0 (0b10 : (BitVec 2)))
    then (pure CSRRS)
    else
      if (BEq.beq b__0 (0b11 : (BitVec 2)))
      then (pure CSRRC)
      else
        assert false "Pattern match failure at unknown location"
        throw Error.Exit

def encdec_csrop_forwards_matches (arg_ : csrop) : Bool :=
  match arg_ with
  | CSRRW => true
  | CSRRS => true
  | CSRRC => true

def encdec_csrop_backwards_matches (arg_ : (BitVec 2)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0b01 : (BitVec 2)))
  then true
  else
    if (BEq.beq b__0 (0b10 : (BitVec 2)))
    then true
    else
      if (BEq.beq b__0 (0b11 : (BitVec 2)))
      then true
      else false

def csr_mnemonic_backwards (arg_ : String) : SailM csrop := do
  match arg_ with
  | "csrrw" => (pure CSRRW)
  | "csrrs" => (pure CSRRS)
  | "csrrc" => (pure CSRRC)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def csr_mnemonic_forwards_matches (arg_ : csrop) : Bool :=
  match arg_ with
  | CSRRW => true
  | CSRRS => true
  | CSRRC => true

def csr_mnemonic_backwards_matches (arg_ : String) : Bool :=
  match arg_ with
  | "csrrw" => true
  | "csrrs" => true
  | "csrrc" => true
  | _ => false

noncomputable def encdec_forwards (arg_ : ast) : SailM (BitVec 32) := do
  match arg_ with
  | .UTYPE (imm, rd, op) =>
    (pure ((imm : (BitVec 20)) ++ ((encdec_reg_forwards rd) ++ (encdec_uop_forwards op))))
  | .RISCV_JAL (v__2, rd) =>
    if (BEq.beq (Sail.BitVec.extractLsb v__2 0 0) (0b0 : (BitVec 1)))
    then
      let imm_19 : (BitVec 1) := (Sail.BitVec.extractLsb v__2 20 20)
      let imm_8 : (BitVec 1) := (Sail.BitVec.extractLsb v__2 11 11)
      let imm_7_0 : (BitVec 8) := (Sail.BitVec.extractLsb v__2 19 12)
      let imm_19 : (BitVec 1) := (Sail.BitVec.extractLsb v__2 20 20)
      let imm_18_13 : (BitVec 6) := (Sail.BitVec.extractLsb v__2 10 5)
      let imm_12_9 : (BitVec 4) := (Sail.BitVec.extractLsb v__2 4 1)
      (pure ((imm_19 : (BitVec 1)) ++ ((imm_18_13 : (BitVec 6)) ++ ((imm_12_9 : (BitVec 4)) ++ ((imm_8 : (BitVec 1)) ++ ((imm_7_0 : (BitVec 8)) ++ ((encdec_reg_forwards
                      rd) ++ (0b1101111 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RISCV_JALR (imm, rs1, rd) =>
    (pure ((imm : (BitVec 12)) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                rd) ++ (0b1100111 : (BitVec 7)))))))
  | .BTYPE (v__4, rs2, rs1, op) =>
    if (BEq.beq (Sail.BitVec.extractLsb v__4 0 0) (0b0 : (BitVec 1)))
    then
      let imm7_6 : (BitVec 1) := (Sail.BitVec.extractLsb v__4 12 12)
      let imm7_6 : (BitVec 1) := (Sail.BitVec.extractLsb v__4 12 12)
      let imm7_5_0 : (BitVec 6) := (Sail.BitVec.extractLsb v__4 10 5)
      let imm5_4_1 : (BitVec 4) := (Sail.BitVec.extractLsb v__4 4 1)
      let imm5_0 : (BitVec 1) := (Sail.BitVec.extractLsb v__4 11 11)
      (pure ((imm7_6 : (BitVec 1)) ++ ((imm7_5_0 : (BitVec 6)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards
                  rs1) ++ ((encdec_bop_forwards op) ++ ((imm5_4_1 : (BitVec 4)) ++ ((imm5_0 : (BitVec 1)) ++ (0b1100011 : (BitVec 7))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .ITYPE (imm, rs1, rd, op) =>
    (pure ((imm : (BitVec 12)) ++ ((encdec_reg_forwards rs1) ++ ((encdec_iop_forwards op) ++ ((encdec_reg_forwards
                rd) ++ (0b0010011 : (BitVec 7)))))))
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SLLI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then
      (pure ((0b000000 : (BitVec 6)) ++ ((shamt : (BitVec 6)) ++ ((encdec_reg_forwards rs1) ++ ((0b001 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0010011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SRLI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then
      (pure ((0b000000 : (BitVec 6)) ++ ((shamt : (BitVec 6)) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0010011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SRAI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then
      (pure ((0b010000 : (BitVec 6)) ++ ((shamt : (BitVec 6)) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0010011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPE (rs2, rs1, rd, RISCV_ADD) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SLT) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b010 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SLTU) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b011 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_AND) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b111 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_OR) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b110 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_XOR) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b100 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SLL) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b001 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SRL) =>
    (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SUB) =>
    (pure ((0b0100000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .RTYPE (rs2, rs1, rd, RISCV_SRA) =>
    (pure ((0b0100000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0110011 : (BitVec 7))))))))
  | .LOAD (imm, rs1, rd, is_unsigned, size, false, false) =>
    if (Bool.or ((size_bytes_forwards size) <b xlen_bytes)
         (Bool.and (not is_unsigned) (((size_bytes_forwards size) ≤b xlen_bytes) : Bool)))
    then
      (pure ((imm : (BitVec 12)) ++ ((encdec_reg_forwards rs1) ++ ((bool_bits_forwards is_unsigned) ++ ((size_enc_forwards
                  size) ++ ((encdec_reg_forwards rd) ++ (0b0000011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .STORE (v__6, rs2, rs1, size, false, false) =>
    if ((size_bytes_forwards size) ≤b xlen_bytes)
    then
      let imm7 : (BitVec 7) := (Sail.BitVec.extractLsb v__6 11 5)
      let imm7 : (BitVec 7) := (Sail.BitVec.extractLsb v__6 11 5)
      let imm5 : (BitVec 5) := (Sail.BitVec.extractLsb v__6 4 0)
      (pure ((imm7 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b0 : (BitVec 1)) ++ ((size_enc_forwards
                    size) ++ ((imm5 : (BitVec 5)) ++ (0b0100011 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .ADDIW (imm, rs1, rd) =>
    if (BEq.beq xlen 64)
    then
      (pure ((imm : (BitVec 12)) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0011011 : (BitVec 7)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, RISCV_ADDW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, RISCV_SUBW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0100000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, RISCV_SLLW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b001 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, RISCV_SRLW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0000000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .RTYPEW (rs2, rs1, rd, RISCV_SRAW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0100000 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0000000 : (BitVec 7)) ++ ((shamt : (BitVec 5)) ++ ((encdec_reg_forwards rs1) ++ ((0b001 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0011011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0000000 : (BitVec 7)) ++ ((shamt : (BitVec 5)) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0011011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW) =>
    if (BEq.beq xlen 64)
    then
      (pure ((0b0100000 : (BitVec 7)) ++ ((shamt : (BitVec 5)) ++ ((encdec_reg_forwards rs1) ++ ((0b101 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0011011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .FENCE (pred, succ) =>
    (pure ((0x0 : (BitVec 4)) ++ ((pred : (BitVec 4)) ++ ((succ : (BitVec 4)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b0001111 : (BitVec 7)))))))))
  | .FENCE_TSO (pred, succ) =>
    (pure ((0x8 : (BitVec 4)) ++ ((pred : (BitVec 4)) ++ ((succ : (BitVec 4)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b0001111 : (BitVec 7)))))))))
  | .ECALL () =>
    (pure ((0x000 : (BitVec 12)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7)))))))
  | .MRET () =>
    (pure ((0b0011000 : (BitVec 7)) ++ ((0b00010 : (BitVec 5)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7))))))))
  | .SRET () =>
    (pure ((0b0001000 : (BitVec 7)) ++ ((0b00010 : (BitVec 5)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7))))))))
  | .EBREAK () =>
    (pure ((0x001 : (BitVec 12)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7)))))))
  | .WFI () =>
    (pure ((0x105 : (BitVec 12)) ++ ((0b00000 : (BitVec 5)) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7)))))))
  | .SFENCE_VMA (rs1, rs2) =>
    (pure ((0b0001001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b1110011 : (BitVec 7))))))))
  | .FENCEI () =>
    if (← (extensionEnabled Ext_Zifencei))
    then
      (pure ((0x000 : (BitVec 12)) ++ ((0b00000 : (BitVec 5)) ++ ((0b001 : (BitVec 3)) ++ ((0b00000 : (BitVec 5)) ++ (0b0001111 : (BitVec 7)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .LOADRES (aq, rl, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zalrsc)) (lrsc_width_valid size))
    then
      (pure ((0b00010 : (BitVec 5)) ++ ((bool_bits_forwards aq) ++ ((bool_bits_forwards rl) ++ ((0b00000 : (BitVec 5)) ++ ((encdec_reg_forwards
                    rs1) ++ ((0b0 : (BitVec 1)) ++ ((size_enc_forwards size) ++ ((encdec_reg_forwards
                          rd) ++ (0b0101111 : (BitVec 7)))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .STORECON (aq, rl, rs2, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zalrsc)) (lrsc_width_valid size))
    then
      (pure ((0b00011 : (BitVec 5)) ++ ((bool_bits_forwards aq) ++ ((bool_bits_forwards rl) ++ ((encdec_reg_forwards
                  rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b0 : (BitVec 1)) ++ ((size_enc_forwards
                        size) ++ ((encdec_reg_forwards rd) ++ (0b0101111 : (BitVec 7)))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .AMO (op, aq, rl, rs2, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zaamo)) (← (amo_width_valid size)))
    then
      (pure ((encdec_amoop_forwards op) ++ ((bool_bits_forwards aq) ++ ((bool_bits_forwards rl) ++ ((encdec_reg_forwards
                  rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b0 : (BitVec 1)) ++ ((size_enc_forwards
                        size) ++ ((encdec_reg_forwards rd) ++ (0b0101111 : (BitVec 7)))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .MUL (rs2, rs1, rd, mul_op) =>
    if (Bool.or (← (extensionEnabled Ext_M)) (← (extensionEnabled Ext_Zmmul)))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((← (encdec_mul_op_forwards
                    mul_op)) ++ ((encdec_reg_forwards rd) ++ (0b0110011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .DIV (rs2, rs1, rd, s) =>
    if (← (extensionEnabled Ext_M))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b10 : (BitVec 2)) ++ ((bool_not_bits_forwards
                    s) ++ ((encdec_reg_forwards rd) ++ (0b0110011 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .REM (rs2, rs1, rd, s) =>
    if (← (extensionEnabled Ext_M))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b11 : (BitVec 2)) ++ ((bool_not_bits_forwards
                    s) ++ ((encdec_reg_forwards rd) ++ (0b0110011 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .MULW (rs2, rs1, rd) =>
    if (Bool.and (BEq.beq xlen 64)
         (Bool.or (← (extensionEnabled Ext_M)) (← (extensionEnabled Ext_Zmmul))))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards
                    rd) ++ (0b0111011 : (BitVec 7))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .DIVW (rs2, rs1, rd, s) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_M)))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b10 : (BitVec 2)) ++ ((bool_not_bits_forwards
                    s) ++ ((encdec_reg_forwards rd) ++ (0b0111011 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .REMW (rs2, rs1, rd, s) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_M)))
    then
      (pure ((0b0000001 : (BitVec 7)) ++ ((encdec_reg_forwards rs2) ++ ((encdec_reg_forwards rs1) ++ ((0b11 : (BitVec 2)) ++ ((bool_not_bits_forwards
                    s) ++ ((encdec_reg_forwards rd) ++ (0b0111011 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .CSR (csr, rs1, rd, is_imm, op) =>
    (pure ((csr : (BitVec 12)) ++ ((encdec_reg_forwards rs1) ++ ((bool_bits_forwards is_imm) ++ ((encdec_csrop_forwards
                op) ++ ((encdec_reg_forwards rd) ++ (0b1110011 : (BitVec 7))))))))
  | .FENCE_RESERVED (fm, pred, succ, rs, rd) =>
    if (Bool.or (Bool.and (bne fm (0x0 : (BitVec 4))) (bne fm (0x8 : (BitVec 4))))
         (Bool.or (bne rs zreg) (bne rd zreg)))
    then
      (pure ((fm : (BitVec 4)) ++ ((pred : (BitVec 4)) ++ ((succ : (BitVec 4)) ++ ((encdec_reg_forwards
                  rs) ++ ((0b000 : (BitVec 3)) ++ ((encdec_reg_forwards rd) ++ (0b0001111 : (BitVec 7)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .FENCEI_RESERVED (imm, rs, rd) =>
    if (Bool.or (bne imm (0x000 : (BitVec 12))) (Bool.or (bne rs zreg) (bne rd zreg)))
    then
      (pure ((imm : (BitVec 12)) ++ ((encdec_reg_forwards rs) ++ ((0b001 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rd) ++ (0b0001111 : (BitVec 7)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .ILLEGAL s => (pure s)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

noncomputable def encdec_backwards (arg_ : (BitVec 32)) : SailM ast := do
  let head_exp_ := arg_
  match (← do
    let v__206 := head_exp_
    if (let mapping1_ : (BitVec 7) := (Sail.BitVec.extractLsb v__206 6 0)
       let mapping0_ : (BitVec 5) := (Sail.BitVec.extractLsb v__206 11 7)
       (Bool.and (encdec_reg_backwards_matches mapping0_) (encdec_uop_backwards_matches mapping1_)))
    then
      let imm : (BitVec 20) := (Sail.BitVec.extractLsb v__206 31 12)
      let mapping1_ : (BitVec 7) := (Sail.BitVec.extractLsb v__206 6 0)
      let mapping0_ : (BitVec 5) := (Sail.BitVec.extractLsb v__206 11 7)
      let imm : (BitVec 20) := (Sail.BitVec.extractLsb v__206 31 12)
      match ((encdec_reg_backwards mapping0_), (← (encdec_uop_backwards mapping1_))) with
      | (rd, op) => (pure (some (UTYPE (imm, rd, op))))
    else (pure none)) with
  | .some result => (pure result)
  | none =>
    match (let v__204 := head_exp_
    if (Bool.and
         (let mapping2_ : (BitVec 5) := (Sail.BitVec.extractLsb v__204 11 7)
         (encdec_reg_backwards_matches mapping2_))
         (BEq.beq (Sail.BitVec.extractLsb v__204 6 0) (0b1101111 : (BitVec 7))))
    then
      let imm_19 : (BitVec 1) := (Sail.BitVec.extractLsb v__204 31 31)
      let mapping2_ : (BitVec 5) := (Sail.BitVec.extractLsb v__204 11 7)
      let imm_8 : (BitVec 1) := (Sail.BitVec.extractLsb v__204 20 20)
      let imm_7_0 : (BitVec 8) := (Sail.BitVec.extractLsb v__204 19 12)
      let imm_19 : (BitVec 1) := (Sail.BitVec.extractLsb v__204 31 31)
      let imm_18_13 : (BitVec 6) := (Sail.BitVec.extractLsb v__204 30 25)
      let imm_12_9 : (BitVec 4) := (Sail.BitVec.extractLsb v__204 24 21)
      match (encdec_reg_backwards mapping2_) with
      | rd =>
        (some
          (RISCV_JAL
            (((imm_19 : (BitVec 1)) ++ ((imm_7_0 : (BitVec 8)) ++ ((imm_8 : (BitVec 1)) ++ ((imm_18_13 : (BitVec 6)) ++ ((imm_12_9 : (BitVec 4)) ++ (0b0 : (BitVec 1))))))), rd)))
    else none) with
    | .some result => (pure result)
    | none =>
      match (let v__201 := head_exp_
      if (Bool.and
           (let mapping4_ : (BitVec 5) := (Sail.BitVec.extractLsb v__201 11 7)
           let mapping3_ : (BitVec 5) := (Sail.BitVec.extractLsb v__201 19 15)
           (Bool.and (encdec_reg_backwards_matches mapping3_)
             (encdec_reg_backwards_matches mapping4_)))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__201 14 12) (0b000 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__201 6 0) (0b1100111 : (BitVec 7)))))
      then
        let imm : (BitVec 12) := (Sail.BitVec.extractLsb v__201 31 20)
        let mapping4_ : (BitVec 5) := (Sail.BitVec.extractLsb v__201 11 7)
        let mapping3_ : (BitVec 5) := (Sail.BitVec.extractLsb v__201 19 15)
        let imm : (BitVec 12) := (Sail.BitVec.extractLsb v__201 31 20)
        match ((encdec_reg_backwards mapping3_), (encdec_reg_backwards mapping4_)) with
        | (rs1, rd) => (some (RISCV_JALR (imm, rs1, rd)))
      else none) with
      | .some result => (pure result)
      | none =>
        match (← do
          let v__199 := head_exp_
          if (Bool.and
               (let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__199 14 12)
               let mapping6_ : (BitVec 5) := (Sail.BitVec.extractLsb v__199 19 15)
               let mapping5_ : (BitVec 5) := (Sail.BitVec.extractLsb v__199 24 20)
               (Bool.and (encdec_reg_backwards_matches mapping5_)
                 (Bool.and (encdec_reg_backwards_matches mapping6_)
                   (encdec_bop_backwards_matches mapping7_))))
               (BEq.beq (Sail.BitVec.extractLsb v__199 6 0) (0b1100011 : (BitVec 7))))
          then
            let imm7_6 : (BitVec 1) := (Sail.BitVec.extractLsb v__199 31 31)
            let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__199 14 12)
            let mapping6_ : (BitVec 5) := (Sail.BitVec.extractLsb v__199 19 15)
            let mapping5_ : (BitVec 5) := (Sail.BitVec.extractLsb v__199 24 20)
            let imm7_6 : (BitVec 1) := (Sail.BitVec.extractLsb v__199 31 31)
            let imm7_5_0 : (BitVec 6) := (Sail.BitVec.extractLsb v__199 30 25)
            let imm5_4_1 : (BitVec 4) := (Sail.BitVec.extractLsb v__199 11 8)
            let imm5_0 : (BitVec 1) := (Sail.BitVec.extractLsb v__199 7 7)
            match ((encdec_reg_backwards mapping5_), (encdec_reg_backwards mapping6_), (← (encdec_bop_backwards
                mapping7_))) with
            | (rs2, rs1, op) =>
              (pure (some
                  (BTYPE
                    (((imm7_6 : (BitVec 1)) ++ ((imm5_0 : (BitVec 1)) ++ ((imm7_5_0 : (BitVec 6)) ++ ((imm5_4_1 : (BitVec 4)) ++ (0b0 : (BitVec 1)))))), rs2, rs1, op))))
          else (pure none)) with
        | .some result => (pure result)
        | none =>
          match (← do
            let v__197 := head_exp_
            if (Bool.and
                 (let mapping9_ : (BitVec 3) := (Sail.BitVec.extractLsb v__197 14 12)
                 let mapping8_ : (BitVec 5) := (Sail.BitVec.extractLsb v__197 19 15)
                 let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__197 11 7)
                 (Bool.and (encdec_reg_backwards_matches mapping8_)
                   (Bool.and (encdec_iop_backwards_matches mapping9_)
                     (encdec_reg_backwards_matches mapping10_))))
                 (BEq.beq (Sail.BitVec.extractLsb v__197 6 0) (0b0010011 : (BitVec 7))))
            then
              let imm : (BitVec 12) := (Sail.BitVec.extractLsb v__197 31 20)
              let mapping9_ : (BitVec 3) := (Sail.BitVec.extractLsb v__197 14 12)
              let mapping8_ : (BitVec 5) := (Sail.BitVec.extractLsb v__197 19 15)
              let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__197 11 7)
              let imm : (BitVec 12) := (Sail.BitVec.extractLsb v__197 31 20)
              match ((encdec_reg_backwards mapping8_), (← (encdec_iop_backwards mapping9_)), (encdec_reg_backwards
                mapping10_)) with
              | (rs1, op, rd) => (pure (some (ITYPE (imm, rs1, rd, op))))
            else (pure none)) with
          | .some result => (pure result)
          | none =>
            match (let v__193 := head_exp_
            if (Bool.and
                 (let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__193 11 7)
                 let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__193 19 15)
                 (Bool.and (encdec_reg_backwards_matches mapping11_)
                   (encdec_reg_backwards_matches mapping12_)))
                 (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__193 31 26) (0b000000 : (BitVec 6)))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__193 14 12) (0b001 : (BitVec 3)))
                     (BEq.beq (Sail.BitVec.extractLsb v__193 6 0) (0b0010011 : (BitVec 7))))))
            then
              let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__193 25 20)
              let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__193 11 7)
              let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__193 19 15)
              match ((encdec_reg_backwards mapping11_), (encdec_reg_backwards mapping12_)) with
              | (rs1, rd) =>
                if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                then (some (SHIFTIOP (shamt, rs1, rd, RISCV_SLLI)))
                else none
            else none) with
            | .some result => (pure result)
            | none =>
              match (let v__189 := head_exp_
              if (Bool.and
                   (let mapping14_ : (BitVec 5) := (Sail.BitVec.extractLsb v__189 11 7)
                   let mapping13_ : (BitVec 5) := (Sail.BitVec.extractLsb v__189 19 15)
                   (Bool.and (encdec_reg_backwards_matches mapping13_)
                     (encdec_reg_backwards_matches mapping14_)))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__189 31 26) (0b000000 : (BitVec 6)))
                     (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__189 14 12) (0b101 : (BitVec 3)))
                       (BEq.beq (Sail.BitVec.extractLsb v__189 6 0) (0b0010011 : (BitVec 7))))))
              then
                let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__189 25 20)
                let mapping14_ : (BitVec 5) := (Sail.BitVec.extractLsb v__189 11 7)
                let mapping13_ : (BitVec 5) := (Sail.BitVec.extractLsb v__189 19 15)
                match ((encdec_reg_backwards mapping13_), (encdec_reg_backwards mapping14_)) with
                | (rs1, rd) =>
                  if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                  then (some (SHIFTIOP (shamt, rs1, rd, RISCV_SRLI)))
                  else none
              else none) with
              | .some result => (pure result)
              | none =>
                match (let v__185 := head_exp_
                if (Bool.and
                     (let mapping16_ : (BitVec 5) := (Sail.BitVec.extractLsb v__185 11 7)
                     let mapping15_ : (BitVec 5) := (Sail.BitVec.extractLsb v__185 19 15)
                     (Bool.and (encdec_reg_backwards_matches mapping15_)
                       (encdec_reg_backwards_matches mapping16_)))
                     (Bool.and
                       (BEq.beq (Sail.BitVec.extractLsb v__185 31 26) (0b010000 : (BitVec 6)))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__185 14 12) (0b101 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__185 6 0) (0b0010011 : (BitVec 7))))))
                then
                  let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__185 25 20)
                  let mapping16_ : (BitVec 5) := (Sail.BitVec.extractLsb v__185 11 7)
                  let mapping15_ : (BitVec 5) := (Sail.BitVec.extractLsb v__185 19 15)
                  match ((encdec_reg_backwards mapping15_), (encdec_reg_backwards mapping16_)) with
                  | (rs1, rd) =>
                    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                    then (some (SHIFTIOP (shamt, rs1, rd, RISCV_SRAI)))
                    else none
                else none) with
                | .some result => (pure result)
                | none =>
                  match (let v__181 := head_exp_
                  if (Bool.and
                       (let mapping19_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 11 7)
                       let mapping18_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 19 15)
                       let mapping17_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 24 20)
                       (Bool.and (encdec_reg_backwards_matches mapping17_)
                         (Bool.and (encdec_reg_backwards_matches mapping18_)
                           (encdec_reg_backwards_matches mapping19_))))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__181 31 25) (0b0000000 : (BitVec 7)))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__181 14 12) (0b000 : (BitVec 3)))
                           (BEq.beq (Sail.BitVec.extractLsb v__181 6 0) (0b0110011 : (BitVec 7))))))
                  then
                    let mapping19_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 11 7)
                    let mapping18_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 19 15)
                    let mapping17_ : (BitVec 5) := (Sail.BitVec.extractLsb v__181 24 20)
                    match ((encdec_reg_backwards mapping17_), (encdec_reg_backwards mapping18_), (encdec_reg_backwards
                      mapping19_)) with
                    | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_ADD)))
                  else none) with
                  | .some result => (pure result)
                  | none =>
                    match (let v__177 := head_exp_
                    if (Bool.and
                         (let mapping22_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 11 7)
                         let mapping21_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 19 15)
                         let mapping20_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 24 20)
                         (Bool.and (encdec_reg_backwards_matches mapping20_)
                           (Bool.and (encdec_reg_backwards_matches mapping21_)
                             (encdec_reg_backwards_matches mapping22_))))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__177 31 25) (0b0000000 : (BitVec 7)))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__177 14 12) (0b010 : (BitVec 3)))
                             (BEq.beq (Sail.BitVec.extractLsb v__177 6 0) (0b0110011 : (BitVec 7))))))
                    then
                      let mapping22_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 11 7)
                      let mapping21_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 19 15)
                      let mapping20_ : (BitVec 5) := (Sail.BitVec.extractLsb v__177 24 20)
                      match ((encdec_reg_backwards mapping20_), (encdec_reg_backwards mapping21_), (encdec_reg_backwards
                        mapping22_)) with
                      | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SLT)))
                    else none) with
                    | .some result => (pure result)
                    | none =>
                      match (let v__173 := head_exp_
                      if (Bool.and
                           (let mapping25_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 11 7)
                           let mapping24_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 19 15)
                           let mapping23_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 24 20)
                           (Bool.and (encdec_reg_backwards_matches mapping23_)
                             (Bool.and (encdec_reg_backwards_matches mapping24_)
                               (encdec_reg_backwards_matches mapping25_))))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__173 31 25) (0b0000000 : (BitVec 7)))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__173 14 12) (0b011 : (BitVec 3)))
                               (BEq.beq (Sail.BitVec.extractLsb v__173 6 0) (0b0110011 : (BitVec 7))))))
                      then
                        let mapping25_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 11 7)
                        let mapping24_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 19 15)
                        let mapping23_ : (BitVec 5) := (Sail.BitVec.extractLsb v__173 24 20)
                        match ((encdec_reg_backwards mapping23_), (encdec_reg_backwards mapping24_), (encdec_reg_backwards
                          mapping25_)) with
                        | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SLTU)))
                      else none) with
                      | .some result => (pure result)
                      | none =>
                        match (let v__169 := head_exp_
                        if (Bool.and
                             (let mapping28_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 11 7)
                             let mapping27_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 19 15)
                             let mapping26_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 24 20)
                             (Bool.and (encdec_reg_backwards_matches mapping26_)
                               (Bool.and (encdec_reg_backwards_matches mapping27_)
                                 (encdec_reg_backwards_matches mapping28_))))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__169 31 25)
                                 (0b0000000 : (BitVec 7)))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__169 14 12) (0b111 : (BitVec 3)))
                                 (BEq.beq (Sail.BitVec.extractLsb v__169 6 0)
                                   (0b0110011 : (BitVec 7))))))
                        then
                          let mapping28_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 11 7)
                          let mapping27_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 19 15)
                          let mapping26_ : (BitVec 5) := (Sail.BitVec.extractLsb v__169 24 20)
                          match ((encdec_reg_backwards mapping26_), (encdec_reg_backwards mapping27_), (encdec_reg_backwards
                            mapping28_)) with
                          | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_AND)))
                        else none) with
                        | .some result => (pure result)
                        | none =>
                          match (let v__165 := head_exp_
                          if (Bool.and
                               (let mapping31_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 11 7)
                               let mapping30_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 19 15)
                               let mapping29_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 24 20)
                               (Bool.and (encdec_reg_backwards_matches mapping29_)
                                 (Bool.and (encdec_reg_backwards_matches mapping30_)
                                   (encdec_reg_backwards_matches mapping31_))))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__165 31 25)
                                   (0b0000000 : (BitVec 7)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__165 14 12)
                                     (0b110 : (BitVec 3)))
                                   (BEq.beq (Sail.BitVec.extractLsb v__165 6 0)
                                     (0b0110011 : (BitVec 7))))))
                          then
                            let mapping31_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 11 7)
                            let mapping30_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 19 15)
                            let mapping29_ : (BitVec 5) := (Sail.BitVec.extractLsb v__165 24 20)
                            match ((encdec_reg_backwards mapping29_), (encdec_reg_backwards
                              mapping30_), (encdec_reg_backwards mapping31_)) with
                            | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_OR)))
                          else none) with
                          | .some result => (pure result)
                          | none =>
                            match (let v__161 := head_exp_
                            if (Bool.and
                                 (let mapping34_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__161 11 7)
                                 let mapping33_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__161 19 15)
                                 let mapping32_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__161 24 20)
                                 (Bool.and (encdec_reg_backwards_matches mapping32_)
                                   (Bool.and (encdec_reg_backwards_matches mapping33_)
                                     (encdec_reg_backwards_matches mapping34_))))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__161 31 25)
                                     (0b0000000 : (BitVec 7)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__161 14 12)
                                       (0b100 : (BitVec 3)))
                                     (BEq.beq (Sail.BitVec.extractLsb v__161 6 0)
                                       (0b0110011 : (BitVec 7))))))
                            then
                              let mapping34_ : (BitVec 5) := (Sail.BitVec.extractLsb v__161 11 7)
                              let mapping33_ : (BitVec 5) := (Sail.BitVec.extractLsb v__161 19 15)
                              let mapping32_ : (BitVec 5) := (Sail.BitVec.extractLsb v__161 24 20)
                              match ((encdec_reg_backwards mapping32_), (encdec_reg_backwards
                                mapping33_), (encdec_reg_backwards mapping34_)) with
                              | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_XOR)))
                            else none) with
                            | .some result => (pure result)
                            | none =>
                              match (let v__157 := head_exp_
                              if (Bool.and
                                   (let mapping37_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__157 11 7)
                                   let mapping36_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__157 19 15)
                                   let mapping35_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__157 24 20)
                                   (Bool.and (encdec_reg_backwards_matches mapping35_)
                                     (Bool.and (encdec_reg_backwards_matches mapping36_)
                                       (encdec_reg_backwards_matches mapping37_))))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__157 31 25)
                                       (0b0000000 : (BitVec 7)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__157 14 12)
                                         (0b001 : (BitVec 3)))
                                       (BEq.beq (Sail.BitVec.extractLsb v__157 6 0)
                                         (0b0110011 : (BitVec 7))))))
                              then
                                let mapping37_ : (BitVec 5) := (Sail.BitVec.extractLsb v__157 11 7)
                                let mapping36_ : (BitVec 5) := (Sail.BitVec.extractLsb v__157 19 15)
                                let mapping35_ : (BitVec 5) := (Sail.BitVec.extractLsb v__157 24 20)
                                match ((encdec_reg_backwards mapping35_), (encdec_reg_backwards
                                  mapping36_), (encdec_reg_backwards mapping37_)) with
                                | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SLL)))
                              else none) with
                              | .some result => (pure result)
                              | none =>
                                match (let v__153 := head_exp_
                                if (Bool.and
                                     (let mapping40_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__153 11 7)
                                     let mapping39_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__153 19 15)
                                     let mapping38_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__153 24 20)
                                     (Bool.and (encdec_reg_backwards_matches mapping38_)
                                       (Bool.and (encdec_reg_backwards_matches mapping39_)
                                         (encdec_reg_backwards_matches mapping40_))))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__153 31 25)
                                         (0b0000000 : (BitVec 7)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__153 14 12)
                                           (0b101 : (BitVec 3)))
                                         (BEq.beq (Sail.BitVec.extractLsb v__153 6 0)
                                           (0b0110011 : (BitVec 7))))))
                                then
                                  let mapping40_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__153 11 7)
                                  let mapping39_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__153 19 15)
                                  let mapping38_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__153 24 20)
                                  match ((encdec_reg_backwards mapping38_), (encdec_reg_backwards
                                    mapping39_), (encdec_reg_backwards mapping40_)) with
                                  | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SRL)))
                                else none) with
                                | .some result => (pure result)
                                | none =>
                                  match (let v__149 := head_exp_
                                  if (Bool.and
                                       (let mapping43_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__149 11 7)
                                       let mapping42_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__149 19 15)
                                       let mapping41_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__149 24 20)
                                       (Bool.and (encdec_reg_backwards_matches mapping41_)
                                         (Bool.and (encdec_reg_backwards_matches mapping42_)
                                           (encdec_reg_backwards_matches mapping43_))))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__149 31 25)
                                           (0b0100000 : (BitVec 7)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__149 14 12)
                                             (0b000 : (BitVec 3)))
                                           (BEq.beq (Sail.BitVec.extractLsb v__149 6 0)
                                             (0b0110011 : (BitVec 7))))))
                                  then
                                    let mapping43_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__149 11 7)
                                    let mapping42_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__149 19 15)
                                    let mapping41_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__149 24 20)
                                    match ((encdec_reg_backwards mapping41_), (encdec_reg_backwards
                                      mapping42_), (encdec_reg_backwards mapping43_)) with
                                    | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SUB)))
                                  else none) with
                                  | .some result => (pure result)
                                  | none =>
                                    match (let v__145 := head_exp_
                                    if (Bool.and
                                         (let mapping46_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__145 11 7)
                                         let mapping45_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__145 19 15)
                                         let mapping44_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__145 24 20)
                                         (Bool.and (encdec_reg_backwards_matches mapping44_)
                                           (Bool.and (encdec_reg_backwards_matches mapping45_)
                                             (encdec_reg_backwards_matches mapping46_))))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__145 31 25)
                                             (0b0100000 : (BitVec 7)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__145 14 12)
                                               (0b101 : (BitVec 3)))
                                             (BEq.beq (Sail.BitVec.extractLsb v__145 6 0)
                                               (0b0110011 : (BitVec 7))))))
                                    then
                                      let mapping46_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__145 11 7)
                                      let mapping45_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__145 19 15)
                                      let mapping44_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__145 24 20)
                                      match ((encdec_reg_backwards mapping44_), (encdec_reg_backwards
                                        mapping45_), (encdec_reg_backwards mapping46_)) with
                                      | (rs2, rs1, rd) => (some (RTYPE (rs2, rs1, rd, RISCV_SRA)))
                                    else none) with
                                    | .some result => (pure result)
                                    | none =>
                                      match (let v__143 := head_exp_
                                      if (Bool.and
                                           (let mapping50_ : (BitVec 5) :=
                                             (Sail.BitVec.extractLsb v__143 11 7)
                                           let mapping49_ : (BitVec 2) :=
                                             (Sail.BitVec.extractLsb v__143 13 12)
                                           let mapping48_ : (BitVec 1) :=
                                             (Sail.BitVec.extractLsb v__143 14 14)
                                           let mapping47_ : (BitVec 5) :=
                                             (Sail.BitVec.extractLsb v__143 19 15)
                                           (Bool.and (encdec_reg_backwards_matches mapping47_)
                                             (Bool.and (bool_bits_backwards_matches mapping48_)
                                               (Bool.and (size_enc_backwards_matches mapping49_)
                                                 (encdec_reg_backwards_matches mapping50_)))))
                                           (BEq.beq (Sail.BitVec.extractLsb v__143 6 0)
                                             (0b0000011 : (BitVec 7))))
                                      then
                                        let imm : (BitVec 12) :=
                                          (Sail.BitVec.extractLsb v__143 31 20)
                                        let mapping50_ : (BitVec 5) :=
                                          (Sail.BitVec.extractLsb v__143 11 7)
                                        let mapping49_ : (BitVec 2) :=
                                          (Sail.BitVec.extractLsb v__143 13 12)
                                        let mapping48_ : (BitVec 1) :=
                                          (Sail.BitVec.extractLsb v__143 14 14)
                                        let mapping47_ : (BitVec 5) :=
                                          (Sail.BitVec.extractLsb v__143 19 15)
                                        let imm : (BitVec 12) :=
                                          (Sail.BitVec.extractLsb v__143 31 20)
                                        match ((encdec_reg_backwards mapping47_), (bool_bits_backwards
                                          mapping48_), (size_enc_backwards mapping49_), (encdec_reg_backwards
                                          mapping50_)) with
                                        | (rs1, is_unsigned, size, rd) =>
                                          if (Bool.or ((size_bytes_forwards size) <b xlen_bytes)
                                               (Bool.and (not is_unsigned)
                                                 (((size_bytes_forwards size) ≤b xlen_bytes) : Bool)))
                                          then
                                            (some
                                              (LOAD (imm, rs1, rd, is_unsigned, size, false, false)))
                                          else none
                                      else none) with
                                      | .some result => (pure result)
                                      | none =>
                                        match (let v__140 := head_exp_
                                        if (Bool.and
                                             (let mapping53_ : (BitVec 2) :=
                                               (Sail.BitVec.extractLsb v__140 13 12)
                                             let mapping52_ : (BitVec 5) :=
                                               (Sail.BitVec.extractLsb v__140 19 15)
                                             let mapping51_ : (BitVec 5) :=
                                               (Sail.BitVec.extractLsb v__140 24 20)
                                             (Bool.and (encdec_reg_backwards_matches mapping51_)
                                               (Bool.and (encdec_reg_backwards_matches mapping52_)
                                                 (size_enc_backwards_matches mapping53_))))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__140 14 14)
                                                 (0b0 : (BitVec 1)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__140 6 0)
                                                 (0b0100011 : (BitVec 7)))))
                                        then
                                          let imm7 : (BitVec 7) :=
                                            (Sail.BitVec.extractLsb v__140 31 25)
                                          let mapping53_ : (BitVec 2) :=
                                            (Sail.BitVec.extractLsb v__140 13 12)
                                          let mapping52_ : (BitVec 5) :=
                                            (Sail.BitVec.extractLsb v__140 19 15)
                                          let mapping51_ : (BitVec 5) :=
                                            (Sail.BitVec.extractLsb v__140 24 20)
                                          let imm7 : (BitVec 7) :=
                                            (Sail.BitVec.extractLsb v__140 31 25)
                                          let imm5 : (BitVec 5) :=
                                            (Sail.BitVec.extractLsb v__140 11 7)
                                          match ((encdec_reg_backwards mapping51_), (encdec_reg_backwards
                                            mapping52_), (size_enc_backwards mapping53_)) with
                                          | (rs2, rs1, size) =>
                                            if ((size_bytes_forwards size) ≤b xlen_bytes)
                                            then
                                              (some
                                                (STORE
                                                  (((imm7 : (BitVec 7)) ++ (imm5 : (BitVec 5))), rs2, rs1, size, false, false)))
                                            else none
                                        else none) with
                                        | .some result => (pure result)
                                        | none =>
                                          match (let v__137 := head_exp_
                                          if (Bool.and
                                               (let mapping55_ : (BitVec 5) :=
                                                 (Sail.BitVec.extractLsb v__137 11 7)
                                               let mapping54_ : (BitVec 5) :=
                                                 (Sail.BitVec.extractLsb v__137 19 15)
                                               (Bool.and (encdec_reg_backwards_matches mapping54_)
                                                 (encdec_reg_backwards_matches mapping55_)))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__137 14 12)
                                                   (0b000 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__137 6 0)
                                                   (0b0011011 : (BitVec 7)))))
                                          then
                                            let imm : (BitVec 12) :=
                                              (Sail.BitVec.extractLsb v__137 31 20)
                                            let mapping55_ : (BitVec 5) :=
                                              (Sail.BitVec.extractLsb v__137 11 7)
                                            let mapping54_ : (BitVec 5) :=
                                              (Sail.BitVec.extractLsb v__137 19 15)
                                            let imm : (BitVec 12) :=
                                              (Sail.BitVec.extractLsb v__137 31 20)
                                            match ((encdec_reg_backwards mapping54_), (encdec_reg_backwards
                                              mapping55_)) with
                                            | (rs1, rd) =>
                                              if (BEq.beq xlen 64)
                                              then (some (ADDIW (imm, rs1, rd)))
                                              else none
                                          else none) with
                                          | .some result => (pure result)
                                          | none =>
                                            match (let v__133 := head_exp_
                                            if (Bool.and
                                                 (let mapping58_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__133 11 7)
                                                 let mapping57_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__133 19 15)
                                                 let mapping56_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__133 24 20)
                                                 (Bool.and (encdec_reg_backwards_matches mapping56_)
                                                   (Bool.and
                                                     (encdec_reg_backwards_matches mapping57_)
                                                     (encdec_reg_backwards_matches mapping58_))))
                                                 (Bool.and
                                                   (BEq.beq (Sail.BitVec.extractLsb v__133 31 25)
                                                     (0b0000000 : (BitVec 7)))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__133 14 12)
                                                       (0b000 : (BitVec 3)))
                                                     (BEq.beq (Sail.BitVec.extractLsb v__133 6 0)
                                                       (0b0111011 : (BitVec 7))))))
                                            then
                                              let mapping58_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__133 11 7)
                                              let mapping57_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__133 19 15)
                                              let mapping56_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__133 24 20)
                                              match ((encdec_reg_backwards mapping56_), (encdec_reg_backwards
                                                mapping57_), (encdec_reg_backwards mapping58_)) with
                                              | (rs2, rs1, rd) =>
                                                if (BEq.beq xlen 64)
                                                then (some (RTYPEW (rs2, rs1, rd, RISCV_ADDW)))
                                                else none
                                            else none) with
                                            | .some result => (pure result)
                                            | none =>
                                              match (let v__129 := head_exp_
                                              if (Bool.and
                                                   (let mapping61_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__129 11 7)
                                                   let mapping60_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__129 19 15)
                                                   let mapping59_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__129 24 20)
                                                   (Bool.and
                                                     (encdec_reg_backwards_matches mapping59_)
                                                     (Bool.and
                                                       (encdec_reg_backwards_matches mapping60_)
                                                       (encdec_reg_backwards_matches mapping61_))))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__129 31 25)
                                                       (0b0100000 : (BitVec 7)))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__129 14 12)
                                                         (0b000 : (BitVec 3)))
                                                       (BEq.beq (Sail.BitVec.extractLsb v__129 6 0)
                                                         (0b0111011 : (BitVec 7))))))
                                              then
                                                let mapping61_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__129 11 7)
                                                let mapping60_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__129 19 15)
                                                let mapping59_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__129 24 20)
                                                match ((encdec_reg_backwards mapping59_), (encdec_reg_backwards
                                                  mapping60_), (encdec_reg_backwards mapping61_)) with
                                                | (rs2, rs1, rd) =>
                                                  if (BEq.beq xlen 64)
                                                  then (some (RTYPEW (rs2, rs1, rd, RISCV_SUBW)))
                                                  else none
                                              else none) with
                                              | .some result => (pure result)
                                              | none =>
                                                match (let v__125 := head_exp_
                                                if (Bool.and
                                                     (let mapping64_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__125 11 7)
                                                     let mapping63_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__125 19 15)
                                                     let mapping62_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__125 24 20)
                                                     (Bool.and
                                                       (encdec_reg_backwards_matches mapping62_)
                                                       (Bool.and
                                                         (encdec_reg_backwards_matches mapping63_)
                                                         (encdec_reg_backwards_matches mapping64_))))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__125 31 25)
                                                         (0b0000000 : (BitVec 7)))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__125 14 12)
                                                           (0b001 : (BitVec 3)))
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__125 6 0)
                                                           (0b0111011 : (BitVec 7))))))
                                                then
                                                  let mapping64_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__125 11 7)
                                                  let mapping63_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__125 19 15)
                                                  let mapping62_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__125 24 20)
                                                  match ((encdec_reg_backwards mapping62_), (encdec_reg_backwards
                                                    mapping63_), (encdec_reg_backwards mapping64_)) with
                                                  | (rs2, rs1, rd) =>
                                                    if (BEq.beq xlen 64)
                                                    then (some (RTYPEW (rs2, rs1, rd, RISCV_SLLW)))
                                                    else none
                                                else none) with
                                                | .some result => (pure result)
                                                | none =>
                                                  match (let v__121 := head_exp_
                                                  if (Bool.and
                                                       (let mapping67_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__121 11 7)
                                                       let mapping66_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__121 19 15)
                                                       let mapping65_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__121 24 20)
                                                       (Bool.and
                                                         (encdec_reg_backwards_matches mapping65_)
                                                         (Bool.and
                                                           (encdec_reg_backwards_matches mapping66_)
                                                           (encdec_reg_backwards_matches mapping67_))))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__121 31 25)
                                                           (0b0000000 : (BitVec 7)))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__121 14 12)
                                                             (0b101 : (BitVec 3)))
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__121 6 0)
                                                             (0b0111011 : (BitVec 7))))))
                                                  then
                                                    let mapping67_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__121 11 7)
                                                    let mapping66_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__121 19 15)
                                                    let mapping65_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__121 24 20)
                                                    match ((encdec_reg_backwards mapping65_), (encdec_reg_backwards
                                                      mapping66_), (encdec_reg_backwards mapping67_)) with
                                                    | (rs2, rs1, rd) =>
                                                      if (BEq.beq xlen 64)
                                                      then
                                                        (some (RTYPEW (rs2, rs1, rd, RISCV_SRLW)))
                                                      else none
                                                  else none) with
                                                  | .some result => (pure result)
                                                  | none =>
                                                    match (let v__117 := head_exp_
                                                    if (Bool.and
                                                         (let mapping70_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__117 11 7)
                                                         let mapping69_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__117 19 15)
                                                         let mapping68_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__117 24 20)
                                                         (Bool.and
                                                           (encdec_reg_backwards_matches mapping68_)
                                                           (Bool.and
                                                             (encdec_reg_backwards_matches
                                                               mapping69_)
                                                             (encdec_reg_backwards_matches
                                                               mapping70_))))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__117 31 25)
                                                             (0b0100000 : (BitVec 7)))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__117 14 12)
                                                               (0b101 : (BitVec 3)))
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__117 6 0)
                                                               (0b0111011 : (BitVec 7))))))
                                                    then
                                                      let mapping70_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__117 11 7)
                                                      let mapping69_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__117 19 15)
                                                      let mapping68_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__117 24 20)
                                                      match ((encdec_reg_backwards mapping68_), (encdec_reg_backwards
                                                        mapping69_), (encdec_reg_backwards
                                                        mapping70_)) with
                                                      | (rs2, rs1, rd) =>
                                                        if (BEq.beq xlen 64)
                                                        then
                                                          (some (RTYPEW (rs2, rs1, rd, RISCV_SRAW)))
                                                        else none
                                                    else none) with
                                                    | .some result => (pure result)
                                                    | none =>
                                                      match (let v__113 := head_exp_
                                                      if (Bool.and
                                                           (let mapping72_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__113 11 7)
                                                           let mapping71_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__113 19 15)
                                                           (Bool.and
                                                             (encdec_reg_backwards_matches
                                                               mapping71_)
                                                             (encdec_reg_backwards_matches
                                                               mapping72_)))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__113 31 25)
                                                               (0b0000000 : (BitVec 7)))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__113 14
                                                                   12) (0b001 : (BitVec 3)))
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__113 6 0)
                                                                 (0b0011011 : (BitVec 7))))))
                                                      then
                                                        let shamt : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__113 24 20)
                                                        let mapping72_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__113 11 7)
                                                        let mapping71_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__113 19 15)
                                                        match ((encdec_reg_backwards mapping71_), (encdec_reg_backwards
                                                          mapping72_)) with
                                                        | (rs1, rd) =>
                                                          if (BEq.beq xlen 64)
                                                          then
                                                            (some
                                                              (SHIFTIWOP
                                                                (shamt, rs1, rd, RISCV_SLLIW)))
                                                          else none
                                                      else none) with
                                                      | .some result => (pure result)
                                                      | none =>
                                                        match (let v__109 := head_exp_
                                                        if (Bool.and
                                                             (let mapping74_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__109 11 7)
                                                             let mapping73_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__109 19 15)
                                                             (Bool.and
                                                               (encdec_reg_backwards_matches
                                                                 mapping73_)
                                                               (encdec_reg_backwards_matches
                                                                 mapping74_)))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__109 31
                                                                   25) (0b0000000 : (BitVec 7)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__109 14
                                                                     12) (0b101 : (BitVec 3)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__109 6
                                                                     0) (0b0011011 : (BitVec 7))))))
                                                        then
                                                          let shamt : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__109 24 20)
                                                          let mapping74_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__109 11 7)
                                                          let mapping73_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__109 19 15)
                                                          match ((encdec_reg_backwards mapping73_), (encdec_reg_backwards
                                                            mapping74_)) with
                                                          | (rs1, rd) =>
                                                            if (BEq.beq xlen 64)
                                                            then
                                                              (some
                                                                (SHIFTIWOP
                                                                  (shamt, rs1, rd, RISCV_SRLIW)))
                                                            else none
                                                        else none) with
                                                        | .some result => (pure result)
                                                        | none =>
                                                          match (let v__105 := head_exp_
                                                          if (Bool.and
                                                               (let mapping76_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__105 11 7)
                                                               let mapping75_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__105 19
                                                                   15)
                                                               (Bool.and
                                                                 (encdec_reg_backwards_matches
                                                                   mapping75_)
                                                                 (encdec_reg_backwards_matches
                                                                   mapping76_)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__105 31
                                                                     25) (0b0100000 : (BitVec 7)))
                                                                 (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__105
                                                                       14 12) (0b101 : (BitVec 3)))
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__105
                                                                       6 0) (0b0011011 : (BitVec 7))))))
                                                          then
                                                            let shamt : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__105 24 20)
                                                            let mapping76_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__105 11 7)
                                                            let mapping75_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__105 19 15)
                                                            match ((encdec_reg_backwards mapping75_), (encdec_reg_backwards
                                                              mapping76_)) with
                                                            | (rs1, rd) =>
                                                              if (BEq.beq xlen 64)
                                                              then
                                                                (some
                                                                  (SHIFTIWOP
                                                                    (shamt, rs1, rd, RISCV_SRAIW)))
                                                              else none
                                                          else none) with
                                                          | .some result => (pure result)
                                                          | none =>
                                                            match (let v__56 := head_exp_
                                                            if (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__56 31
                                                                     28) (0x0 : (BitVec 4)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__56 19
                                                                     0) (0x0000F : (BitVec 20))))
                                                            then
                                                              let succ : (BitVec 4) :=
                                                                (Sail.BitVec.extractLsb v__56 23 20)
                                                              let pred : (BitVec 4) :=
                                                                (Sail.BitVec.extractLsb v__56 27 24)
                                                              (some (FENCE (pred, succ)))
                                                            else
                                                              if (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__56
                                                                       31 28) (0x8 : (BitVec 4)))
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__56
                                                                       19 0) (0x0000F : (BitVec 20))))
                                                              then
                                                                let succ : (BitVec 4) :=
                                                                  (Sail.BitVec.extractLsb v__56 23
                                                                    20)
                                                                let pred : (BitVec 4) :=
                                                                  (Sail.BitVec.extractLsb v__56 27
                                                                    24)
                                                                (some (FENCE_TSO (pred, succ)))
                                                              else
                                                                if (BEq.beq v__56
                                                                     (0x00000073 : (BitVec 32)))
                                                                then (some (ECALL ()))
                                                                else
                                                                  if (BEq.beq v__56
                                                                       (0x30200073 : (BitVec 32)))
                                                                  then (some (MRET ()))
                                                                  else
                                                                    if (BEq.beq v__56
                                                                         (0x10200073 : (BitVec 32)))
                                                                    then (some (SRET ()))
                                                                    else
                                                                      if (BEq.beq v__56
                                                                           (0x00100073 : (BitVec 32)))
                                                                      then (some (EBREAK ()))
                                                                      else
                                                                        if (BEq.beq v__56
                                                                             (0x10500073 : (BitVec 32)))
                                                                        then (some (WFI ()))
                                                                        else
                                                                          if (Bool.and
                                                                               (let mapping78_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__56 19 15)
                                                                               let mapping77_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__56 24 20)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping77_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping78_)))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__56 31 25)
                                                                                   (0b0001001 : (BitVec 7)))
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__56 14 0)
                                                                                   (0b000000001110011 : (BitVec 15)))))
                                                                          then
                                                                            let mapping78_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__56 19 15)
                                                                            let mapping77_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__56 24 20)
                                                                            match ((encdec_reg_backwards
                                                                              mapping77_), (encdec_reg_backwards
                                                                              mapping78_)) with
                                                                            | (rs2, rs1) =>
                                                                              (some
                                                                                (SFENCE_VMA
                                                                                  (rs1, rs2)))
                                                                          else none) with
                                                            | .some result => (pure result)
                                                            | none =>
                                                              match (← do
                                                                let v__45 := head_exp_
                                                                if (Bool.and
                                                                     (← (extensionEnabled
                                                                         Ext_Zifencei))
                                                                     (BEq.beq v__45
                                                                       (0x0000100F : (BitVec 32))))
                                                                then (pure (some (FENCEI ())))
                                                                else
                                                                  if (Bool.and
                                                                       (let mapping83_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__45 11 7)
                                                                       let mapping82_ : (BitVec 2) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__45 13 12)
                                                                       let mapping81_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__45 19 15)
                                                                       let mapping80_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__45 25 25)
                                                                       let mapping79_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__45 26 26)
                                                                       (Bool.and
                                                                         (bool_bits_backwards_matches
                                                                           mapping79_)
                                                                         (Bool.and
                                                                           (bool_bits_backwards_matches
                                                                             mapping80_)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping81_)
                                                                             (Bool.and
                                                                               (size_enc_backwards_matches
                                                                                 mapping82_)
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping83_))))))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__45 31 27)
                                                                           (0b00010 : (BitVec 5)))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__45 24 20)
                                                                             (0b00000 : (BitVec 5)))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__45 14 14)
                                                                               (0b0 : (BitVec 1)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__45 6 0)
                                                                               (0b0101111 : (BitVec 7)))))))
                                                                  then
                                                                    let mapping83_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__45
                                                                        11 7)
                                                                    let mapping82_ : (BitVec 2) :=
                                                                      (Sail.BitVec.extractLsb v__45
                                                                        13 12)
                                                                    let mapping81_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__45
                                                                        19 15)
                                                                    let mapping80_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__45
                                                                        25 25)
                                                                    let mapping79_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__45
                                                                        26 26)
                                                                    match ((bool_bits_backwards
                                                                      mapping79_), (bool_bits_backwards
                                                                      mapping80_), (encdec_reg_backwards
                                                                      mapping81_), (size_enc_backwards
                                                                      mapping82_), (encdec_reg_backwards
                                                                      mapping83_)) with
                                                                    | (aq, rl, rs1, size, rd) =>
                                                                      if (Bool.and
                                                                           (← (extensionEnabled
                                                                               Ext_Zalrsc))
                                                                           (lrsc_width_valid size))
                                                                      then
                                                                        (pure (some
                                                                            (LOADRES
                                                                              (aq, rl, rs1, size, rd))))
                                                                      else (pure none)
                                                                  else (pure none)) with
                                                              | .some result => (pure result)
                                                              | none =>
                                                                match (← do
                                                                  let v__41 := head_exp_
                                                                  if (Bool.and
                                                                       (let mapping89_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 11 7)
                                                                       let mapping88_ : (BitVec 2) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 13 12)
                                                                       let mapping87_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 19 15)
                                                                       let mapping86_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 24 20)
                                                                       let mapping85_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 25 25)
                                                                       let mapping84_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__41 26 26)
                                                                       (Bool.and
                                                                         (bool_bits_backwards_matches
                                                                           mapping84_)
                                                                         (Bool.and
                                                                           (bool_bits_backwards_matches
                                                                             mapping85_)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping86_)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping87_)
                                                                               (Bool.and
                                                                                 (size_enc_backwards_matches
                                                                                   mapping88_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping89_)))))))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__41 31 27)
                                                                           (0b00011 : (BitVec 5)))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__41 14 14)
                                                                             (0b0 : (BitVec 1)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__41 6 0)
                                                                             (0b0101111 : (BitVec 7))))))
                                                                  then
                                                                    let mapping89_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        11 7)
                                                                    let mapping88_ : (BitVec 2) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        13 12)
                                                                    let mapping87_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        19 15)
                                                                    let mapping86_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        24 20)
                                                                    let mapping85_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        25 25)
                                                                    let mapping84_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__41
                                                                        26 26)
                                                                    match ((bool_bits_backwards
                                                                      mapping84_), (bool_bits_backwards
                                                                      mapping85_), (encdec_reg_backwards
                                                                      mapping86_), (encdec_reg_backwards
                                                                      mapping87_), (size_enc_backwards
                                                                      mapping88_), (encdec_reg_backwards
                                                                      mapping89_)) with
                                                                    | (aq, rl, rs2, rs1, size, rd) =>
                                                                      if (Bool.and
                                                                           (← (extensionEnabled
                                                                               Ext_Zalrsc))
                                                                           (lrsc_width_valid size))
                                                                      then
                                                                        (pure (some
                                                                            (STORECON
                                                                              (aq, rl, rs2, rs1, size, rd))))
                                                                      else (pure none)
                                                                  else (pure none)) with
                                                                | .some result => (pure result)
                                                                | none =>
                                                                  match (← do
                                                                    let v__38 := head_exp_
                                                                    if (Bool.and
                                                                         (let mapping90_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 31 27)
                                                                         let mapping96_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 11 7)
                                                                         let mapping95_ : (BitVec 2) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 13 12)
                                                                         let mapping94_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 19 15)
                                                                         let mapping93_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 24 20)
                                                                         let mapping92_ : (BitVec 1) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 25 25)
                                                                         let mapping91_ : (BitVec 1) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 26 26)
                                                                         let mapping90_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__38 31 27)
                                                                         (Bool.and
                                                                           (encdec_amoop_backwards_matches
                                                                             mapping90_)
                                                                           (Bool.and
                                                                             (bool_bits_backwards_matches
                                                                               mapping91_)
                                                                             (Bool.and
                                                                               (bool_bits_backwards_matches
                                                                                 mapping92_)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping93_)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping94_)
                                                                                   (Bool.and
                                                                                     (size_enc_backwards_matches
                                                                                       mapping95_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping96_))))))))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__38 14 14)
                                                                             (0b0 : (BitVec 1)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__38 6 0)
                                                                             (0b0101111 : (BitVec 7)))))
                                                                    then
                                                                      let mapping90_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 31 27)
                                                                      let mapping96_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 11 7)
                                                                      let mapping95_ : (BitVec 2) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 13 12)
                                                                      let mapping94_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 19 15)
                                                                      let mapping93_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 24 20)
                                                                      let mapping92_ : (BitVec 1) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 25 25)
                                                                      let mapping91_ : (BitVec 1) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 26 26)
                                                                      let mapping90_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__38 31 27)
                                                                      match ((← (encdec_amoop_backwards
                                                                          mapping90_)), (bool_bits_backwards
                                                                        mapping91_), (bool_bits_backwards
                                                                        mapping92_), (encdec_reg_backwards
                                                                        mapping93_), (encdec_reg_backwards
                                                                        mapping94_), (size_enc_backwards
                                                                        mapping95_), (encdec_reg_backwards
                                                                        mapping96_)) with
                                                                      | (op, aq, rl, rs2, rs1, size, rd) =>
                                                                        if (Bool.and
                                                                             (← (extensionEnabled
                                                                                 Ext_Zaamo))
                                                                             (← (amo_width_valid
                                                                                 size)))
                                                                        then
                                                                          (pure (some
                                                                              (AMO
                                                                                (op, aq, rl, rs2, rs1, size, rd))))
                                                                        else (pure none)
                                                                    else (pure none)) with
                                                                  | .some result => (pure result)
                                                                  | none =>
                                                                    match (← do
                                                                      let v__35 := head_exp_
                                                                      if (Bool.and
                                                                           (let mapping99_ : (BitVec 3) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__35 14 12)
                                                                           let mapping98_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__35 19 15)
                                                                           let mapping97_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__35 24 20)
                                                                           let mapping100_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__35 11 7)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping97_)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping98_)
                                                                               (Bool.and
                                                                                 (encdec_mul_op_backwards_matches
                                                                                   mapping99_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping100_)))))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__35 31 25)
                                                                               (0b0000001 : (BitVec 7)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__35 6 0)
                                                                               (0b0110011 : (BitVec 7)))))
                                                                      then
                                                                        let mapping99_ : (BitVec 3) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__35 14 12)
                                                                        let mapping98_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__35 19 15)
                                                                        let mapping97_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__35 24 20)
                                                                        let mapping100_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__35 11 7)
                                                                        match ((encdec_reg_backwards
                                                                          mapping97_), (encdec_reg_backwards
                                                                          mapping98_), (← (encdec_mul_op_backwards
                                                                            mapping99_)), (encdec_reg_backwards
                                                                          mapping100_)) with
                                                                        | (rs2, rs1, mul_op, rd) =>
                                                                          if (Bool.or
                                                                               (← (extensionEnabled
                                                                                   Ext_M))
                                                                               (← (extensionEnabled
                                                                                   Ext_Zmmul)))
                                                                          then
                                                                            (pure (some
                                                                                (MUL
                                                                                  (rs2, rs1, rd, mul_op))))
                                                                          else (pure none)
                                                                      else (pure none)) with
                                                                    | .some result => (pure result)
                                                                    | none =>
                                                                      match (← do
                                                                        let v__31 := head_exp_
                                                                        if (Bool.and
                                                                             (let mapping104_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__31 11 7)
                                                                             let mapping103_ : (BitVec 1) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__31 12 12)
                                                                             let mapping102_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__31 19 15)
                                                                             let mapping101_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__31 24 20)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping101_)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping102_)
                                                                                 (Bool.and
                                                                                   (bool_not_bits_backwards_matches
                                                                                     mapping103_)
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping104_)))))
                                                                             (Bool.and
                                                                               (BEq.beq
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__31 31 25)
                                                                                 (0b0000001 : (BitVec 7)))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__31 14 13)
                                                                                   (0b10 : (BitVec 2)))
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__31 6 0)
                                                                                   (0b0110011 : (BitVec 7))))))
                                                                        then
                                                                          let mapping104_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__31 11 7)
                                                                          let mapping103_ : (BitVec 1) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__31 12 12)
                                                                          let mapping102_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__31 19 15)
                                                                          let mapping101_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__31 24 20)
                                                                          match ((encdec_reg_backwards
                                                                            mapping101_), (encdec_reg_backwards
                                                                            mapping102_), (bool_not_bits_backwards
                                                                            mapping103_), (encdec_reg_backwards
                                                                            mapping104_)) with
                                                                          | (rs2, rs1, s, rd) =>
                                                                            if (← (extensionEnabled
                                                                                   Ext_M))
                                                                            then
                                                                              (pure (some
                                                                                  (DIV
                                                                                    (rs2, rs1, rd, s))))
                                                                            else (pure none)
                                                                        else (pure none)) with
                                                                      | .some result =>
                                                                        (pure result)
                                                                      | none =>
                                                                        match (← do
                                                                          let v__27 := head_exp_
                                                                          if (Bool.and
                                                                               (let mapping108_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__27 11 7)
                                                                               let mapping107_ : (BitVec 1) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__27 12 12)
                                                                               let mapping106_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__27 19 15)
                                                                               let mapping105_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__27 24 20)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping105_)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping106_)
                                                                                   (Bool.and
                                                                                     (bool_not_bits_backwards_matches
                                                                                       mapping107_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping108_)))))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__27 31 25)
                                                                                   (0b0000001 : (BitVec 7)))
                                                                                 (Bool.and
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__27 14 13)
                                                                                     (0b11 : (BitVec 2)))
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__27 6 0)
                                                                                     (0b0110011 : (BitVec 7))))))
                                                                          then
                                                                            let mapping108_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__27 11 7)
                                                                            let mapping107_ : (BitVec 1) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__27 12 12)
                                                                            let mapping106_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__27 19 15)
                                                                            let mapping105_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__27 24 20)
                                                                            match ((encdec_reg_backwards
                                                                              mapping105_), (encdec_reg_backwards
                                                                              mapping106_), (bool_not_bits_backwards
                                                                              mapping107_), (encdec_reg_backwards
                                                                              mapping108_)) with
                                                                            | (rs2, rs1, s, rd) =>
                                                                              if (← (extensionEnabled
                                                                                     Ext_M))
                                                                              then
                                                                                (pure (some
                                                                                    (REM
                                                                                      (rs2, rs1, rd, s))))
                                                                              else (pure none)
                                                                          else (pure none)) with
                                                                        | .some result =>
                                                                          (pure result)
                                                                        | none =>
                                                                          match (← do
                                                                            let v__23 := head_exp_
                                                                            if (Bool.and
                                                                                 (let mapping111_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__23 11 7)
                                                                                 let mapping110_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__23 19 15)
                                                                                 let mapping109_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__23 24 20)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping109_)
                                                                                   (Bool.and
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping110_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping111_))))
                                                                                 (Bool.and
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__23 31 25)
                                                                                     (0b0000001 : (BitVec 7)))
                                                                                   (Bool.and
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__23 14 12)
                                                                                       (0b000 : (BitVec 3)))
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__23 6 0)
                                                                                       (0b0111011 : (BitVec 7))))))
                                                                            then
                                                                              let mapping111_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__23 11 7)
                                                                              let mapping110_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__23 19 15)
                                                                              let mapping109_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__23 24 20)
                                                                              match ((encdec_reg_backwards
                                                                                mapping109_), (encdec_reg_backwards
                                                                                mapping110_), (encdec_reg_backwards
                                                                                mapping111_)) with
                                                                              | (rs2, rs1, rd) =>
                                                                                if (Bool.and
                                                                                     (BEq.beq xlen
                                                                                       64)
                                                                                     (Bool.or
                                                                                       (← (extensionEnabled
                                                                                           Ext_M))
                                                                                       (← (extensionEnabled
                                                                                           Ext_Zmmul))))
                                                                                then
                                                                                  (pure (some
                                                                                      (MULW
                                                                                        (rs2, rs1, rd))))
                                                                                else (pure none)
                                                                            else (pure none)) with
                                                                          | .some result =>
                                                                            (pure result)
                                                                          | none =>
                                                                            match (← do
                                                                              let v__19 := head_exp_
                                                                              if (Bool.and
                                                                                   (let mapping115_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__19 11 7)
                                                                                   let mapping114_ : (BitVec 1) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__19 12 12)
                                                                                   let mapping113_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__19 19 15)
                                                                                   let mapping112_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__19 24 20)
                                                                                   (Bool.and
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping112_)
                                                                                     (Bool.and
                                                                                       (encdec_reg_backwards_matches
                                                                                         mapping113_)
                                                                                       (Bool.and
                                                                                         (bool_not_bits_backwards_matches
                                                                                           mapping114_)
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping115_)))))
                                                                                   (Bool.and
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__19 31 25)
                                                                                       (0b0000001 : (BitVec 7)))
                                                                                     (Bool.and
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__19 14
                                                                                           13)
                                                                                         (0b10 : (BitVec 2)))
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__19 6 0)
                                                                                         (0b0111011 : (BitVec 7))))))
                                                                              then
                                                                                let mapping115_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__19 11 7)
                                                                                let mapping114_ : (BitVec 1) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__19 12 12)
                                                                                let mapping113_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__19 19 15)
                                                                                let mapping112_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__19 24 20)
                                                                                match ((encdec_reg_backwards
                                                                                  mapping112_), (encdec_reg_backwards
                                                                                  mapping113_), (bool_not_bits_backwards
                                                                                  mapping114_), (encdec_reg_backwards
                                                                                  mapping115_)) with
                                                                                | (rs2, rs1, s, rd) =>
                                                                                  if (Bool.and
                                                                                       (BEq.beq xlen
                                                                                         64)
                                                                                       (← (extensionEnabled
                                                                                           Ext_M)))
                                                                                  then
                                                                                    (pure (some
                                                                                        (DIVW
                                                                                          (rs2, rs1, rd, s))))
                                                                                  else (pure none)
                                                                              else (pure none)) with
                                                                            | .some result =>
                                                                              (pure result)
                                                                            | none =>
                                                                              match (← do
                                                                                let v__15 :=
                                                                                  head_exp_
                                                                                if (Bool.and
                                                                                     (let mapping119_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__15 11 7)
                                                                                     let mapping118_ : (BitVec 1) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__15 12 12)
                                                                                     let mapping117_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__15 19 15)
                                                                                     let mapping116_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__15 24 20)
                                                                                     (Bool.and
                                                                                       (encdec_reg_backwards_matches
                                                                                         mapping116_)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping117_)
                                                                                         (Bool.and
                                                                                           (bool_not_bits_backwards_matches
                                                                                             mapping118_)
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping119_)))))
                                                                                     (Bool.and
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__15 31
                                                                                           25)
                                                                                         (0b0000001 : (BitVec 7)))
                                                                                       (Bool.and
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__15
                                                                                             14 13)
                                                                                           (0b11 : (BitVec 2)))
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__15 6
                                                                                             0)
                                                                                           (0b0111011 : (BitVec 7))))))
                                                                                then
                                                                                  let mapping119_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__15 11 7)
                                                                                  let mapping118_ : (BitVec 1) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__15 12 12)
                                                                                  let mapping117_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__15 19 15)
                                                                                  let mapping116_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__15 24 20)
                                                                                  match ((encdec_reg_backwards
                                                                                    mapping116_), (encdec_reg_backwards
                                                                                    mapping117_), (bool_not_bits_backwards
                                                                                    mapping118_), (encdec_reg_backwards
                                                                                    mapping119_)) with
                                                                                  | (rs2, rs1, s, rd) =>
                                                                                    if (Bool.and
                                                                                         (BEq.beq
                                                                                           xlen 64)
                                                                                         (← (extensionEnabled
                                                                                             Ext_M)))
                                                                                    then
                                                                                      (pure (some
                                                                                          (REMW
                                                                                            (rs2, rs1, rd, s))))
                                                                                    else (pure none)
                                                                                else (pure none)) with
                                                                              | .some result =>
                                                                                (pure result)
                                                                              | none =>
                                                                                match (← do
                                                                                  let v__13 :=
                                                                                    head_exp_
                                                                                  if (Bool.and
                                                                                       (let mapping123_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__13 11
                                                                                           7)
                                                                                       let mapping122_ : (BitVec 2) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__13 13
                                                                                           12)
                                                                                       let mapping121_ : (BitVec 1) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__13 14
                                                                                           14)
                                                                                       let mapping120_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__13 19
                                                                                           15)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping120_)
                                                                                         (Bool.and
                                                                                           (bool_bits_backwards_matches
                                                                                             mapping121_)
                                                                                           (Bool.and
                                                                                             (encdec_csrop_backwards_matches
                                                                                               mapping122_)
                                                                                             (encdec_reg_backwards_matches
                                                                                               mapping123_)))))
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__13 6 0)
                                                                                         (0b1110011 : (BitVec 7))))
                                                                                  then
                                                                                    let csr : (BitVec 12) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 31 20)
                                                                                    let mapping123_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 11 7)
                                                                                    let mapping122_ : (BitVec 2) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 13 12)
                                                                                    let mapping121_ : (BitVec 1) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 14 14)
                                                                                    let mapping120_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 19 15)
                                                                                    let csr : (BitVec 12) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__13 31 20)
                                                                                    match ((encdec_reg_backwards
                                                                                      mapping120_), (bool_bits_backwards
                                                                                      mapping121_), (← (encdec_csrop_backwards
                                                                                        mapping122_)), (encdec_reg_backwards
                                                                                      mapping123_)) with
                                                                                    | (rs1, is_imm, op, rd) =>
                                                                                      (pure (some
                                                                                          (CSR
                                                                                            (csr, rs1, rd, is_imm, op))))
                                                                                  else (pure none)) with
                                                                                | .some result =>
                                                                                  (pure result)
                                                                                | none =>
                                                                                  match (let v__10 :=
                                                                                    head_exp_
                                                                                  if (Bool.and
                                                                                       (let mapping125_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__10 11
                                                                                           7)
                                                                                       let mapping124_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__10 19
                                                                                           15)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping124_)
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping125_)))
                                                                                       (Bool.and
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__10
                                                                                             14 12)
                                                                                           (0b000 : (BitVec 3)))
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__10 6
                                                                                             0)
                                                                                           (0b0001111 : (BitVec 7)))))
                                                                                  then
                                                                                    let fm : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 31 28)
                                                                                    let succ : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 23 20)
                                                                                    let pred : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 27 24)
                                                                                    let mapping125_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 11 7)
                                                                                    let mapping124_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 19 15)
                                                                                    let fm : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__10 31 28)
                                                                                    match ((encdec_reg_backwards
                                                                                      mapping124_), (encdec_reg_backwards
                                                                                      mapping125_)) with
                                                                                    | (rs, rd) =>
                                                                                      if (Bool.or
                                                                                           (Bool.and
                                                                                             (bne fm
                                                                                               (0x0 : (BitVec 4)))
                                                                                             (bne fm
                                                                                               (0x8 : (BitVec 4))))
                                                                                           (Bool.or
                                                                                             (bne rs
                                                                                               zreg)
                                                                                             (bne rd
                                                                                               zreg)))
                                                                                      then
                                                                                        (some
                                                                                          (FENCE_RESERVED
                                                                                            (fm, pred, succ, rs, rd)))
                                                                                      else none
                                                                                  else none) with
                                                                                  | .some result =>
                                                                                    (pure result)
                                                                                  | none =>
                                                                                    match (let v__7 :=
                                                                                      head_exp_
                                                                                    if (Bool.and
                                                                                         (let mapping127_ : (BitVec 5) :=
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__7 11
                                                                                             7)
                                                                                         let mapping126_ : (BitVec 5) :=
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__7 19
                                                                                             15)
                                                                                         (Bool.and
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping126_)
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping127_)))
                                                                                         (Bool.and
                                                                                           (BEq.beq
                                                                                             (Sail.BitVec.extractLsb
                                                                                               v__7
                                                                                               14 12)
                                                                                             (0b001 : (BitVec 3)))
                                                                                           (BEq.beq
                                                                                             (Sail.BitVec.extractLsb
                                                                                               v__7
                                                                                               6 0)
                                                                                             (0b0001111 : (BitVec 7)))))
                                                                                    then
                                                                                      let imm : (BitVec 12) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__7 31 20)
                                                                                      let mapping127_ : (BitVec 5) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__7 11 7)
                                                                                      let mapping126_ : (BitVec 5) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__7 19 15)
                                                                                      let imm : (BitVec 12) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__7 31 20)
                                                                                      match ((encdec_reg_backwards
                                                                                        mapping126_), (encdec_reg_backwards
                                                                                        mapping127_)) with
                                                                                      | (rs, rd) =>
                                                                                        if (Bool.or
                                                                                             (bne
                                                                                               imm
                                                                                               (0x000 : (BitVec 12)))
                                                                                             (Bool.or
                                                                                               (bne
                                                                                                 rs
                                                                                                 zreg)
                                                                                               (bne
                                                                                                 rd
                                                                                                 zreg)))
                                                                                        then
                                                                                          (some
                                                                                            (FENCEI_RESERVED
                                                                                              (imm, rs, rd)))
                                                                                        else none
                                                                                    else none) with
                                                                                    | .some result =>
                                                                                      (pure result)
                                                                                    | none =>
                                                                                      match head_exp_ with
                                                                                      | s =>
                                                                                        (pure (ILLEGAL
                                                                                            s))

noncomputable def encdec_forwards_matches (arg_ : ast) : SailM Bool := do
  match arg_ with
  | .UTYPE (imm, rd, op) => (pure true)
  | .RISCV_JAL (v__207, rd) =>
    if (BEq.beq (Sail.BitVec.extractLsb v__207 0 0) (0b0 : (BitVec 1)))
    then (pure true)
    else (pure false)
  | .RISCV_JALR (imm, rs1, rd) => (pure true)
  | .BTYPE (v__209, rs2, rs1, op) =>
    if (BEq.beq (Sail.BitVec.extractLsb v__209 0 0) (0b0 : (BitVec 1)))
    then (pure true)
    else (pure false)
  | .ITYPE (imm, rs1, rd, op) => (pure true)
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SLLI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then (pure true)
    else (pure false)
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SRLI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then (pure true)
    else (pure false)
  | .SHIFTIOP (shamt, rs1, rd, RISCV_SRAI) =>
    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
    then (pure true)
    else (pure false)
  | .RTYPE (rs2, rs1, rd, RISCV_ADD) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SLT) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SLTU) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_AND) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_OR) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_XOR) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SLL) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SRL) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SUB) => (pure true)
  | .RTYPE (rs2, rs1, rd, RISCV_SRA) => (pure true)
  | .LOAD (imm, rs1, rd, is_unsigned, size, false, false) =>
    if (Bool.or ((size_bytes_forwards size) <b xlen_bytes)
         (Bool.and (not is_unsigned) (((size_bytes_forwards size) ≤b xlen_bytes) : Bool)))
    then (pure true)
    else (pure false)
  | .STORE (v__211, rs2, rs1, size, false, false) =>
    if ((size_bytes_forwards size) ≤b xlen_bytes)
    then (pure true)
    else (pure false)
  | .ADDIW (imm, rs1, rd) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .RTYPEW (rs2, rs1, rd, RISCV_ADDW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .RTYPEW (rs2, rs1, rd, RISCV_SUBW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .RTYPEW (rs2, rs1, rd, RISCV_SLLW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .RTYPEW (rs2, rs1, rd, RISCV_SRLW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .RTYPEW (rs2, rs1, rd, RISCV_SRAW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SLLIW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SRLIW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .SHIFTIWOP (shamt, rs1, rd, RISCV_SRAIW) =>
    if (BEq.beq xlen 64)
    then (pure true)
    else (pure false)
  | .FENCE (pred, succ) => (pure true)
  | .FENCE_TSO (pred, succ) => (pure true)
  | .ECALL () => (pure true)
  | .MRET () => (pure true)
  | .SRET () => (pure true)
  | .EBREAK () => (pure true)
  | .WFI () => (pure true)
  | .SFENCE_VMA (rs1, rs2) => (pure true)
  | .FENCEI () =>
    if (← (extensionEnabled Ext_Zifencei))
    then (pure true)
    else (pure false)
  | .LOADRES (aq, rl, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zalrsc)) (lrsc_width_valid size))
    then (pure true)
    else (pure false)
  | .STORECON (aq, rl, rs2, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zalrsc)) (lrsc_width_valid size))
    then (pure true)
    else (pure false)
  | .AMO (op, aq, rl, rs2, rs1, size, rd) =>
    if (Bool.and (← (extensionEnabled Ext_Zaamo)) (← (amo_width_valid size)))
    then (pure true)
    else (pure false)
  | .MUL (rs2, rs1, rd, mul_op) =>
    if (Bool.or (← (extensionEnabled Ext_M)) (← (extensionEnabled Ext_Zmmul)))
    then (pure true)
    else (pure false)
  | .DIV (rs2, rs1, rd, s) =>
    if (← (extensionEnabled Ext_M))
    then (pure true)
    else (pure false)
  | .REM (rs2, rs1, rd, s) =>
    if (← (extensionEnabled Ext_M))
    then (pure true)
    else (pure false)
  | .MULW (rs2, rs1, rd) =>
    if (Bool.and (BEq.beq xlen 64)
         (Bool.or (← (extensionEnabled Ext_M)) (← (extensionEnabled Ext_Zmmul))))
    then (pure true)
    else (pure false)
  | .DIVW (rs2, rs1, rd, s) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_M)))
    then (pure true)
    else (pure false)
  | .REMW (rs2, rs1, rd, s) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_M)))
    then (pure true)
    else (pure false)
  | .CSR (csr, rs1, rd, is_imm, op) => (pure true)
  | .FENCE_RESERVED (fm, pred, succ, rs, rd) =>
    if (Bool.or (Bool.and (bne fm (0x0 : (BitVec 4))) (bne fm (0x8 : (BitVec 4))))
         (Bool.or (bne rs zreg) (bne rd zreg)))
    then (pure true)
    else (pure false)
  | .FENCEI_RESERVED (imm, rs, rd) =>
    if (Bool.or (bne imm (0x000 : (BitVec 12))) (Bool.or (bne rs zreg) (bne rd zreg)))
    then (pure true)
    else (pure false)
  | .ILLEGAL s => (pure true)
  | _ => (pure false)

noncomputable def encdec_backwards_matches (arg_ : (BitVec 32)) : SailM Bool := do
  let head_exp_ := arg_
  match (← do
    let v__411 := head_exp_
    if (let mapping1_ : (BitVec 7) := (Sail.BitVec.extractLsb v__411 6 0)
       let mapping0_ : (BitVec 5) := (Sail.BitVec.extractLsb v__411 11 7)
       (Bool.and (encdec_reg_backwards_matches mapping0_) (encdec_uop_backwards_matches mapping1_)))
    then
      let mapping1_ : (BitVec 7) := (Sail.BitVec.extractLsb v__411 6 0)
      let mapping0_ : (BitVec 5) := (Sail.BitVec.extractLsb v__411 11 7)
      match ((encdec_reg_backwards mapping0_), (← (encdec_uop_backwards mapping1_))) with
      | (rd, op) => (pure (some true))
    else (pure none)) with
  | .some result => (pure result)
  | none =>
    match (let v__409 := head_exp_
    if (Bool.and
         (let mapping2_ : (BitVec 5) := (Sail.BitVec.extractLsb v__409 11 7)
         (encdec_reg_backwards_matches mapping2_))
         (BEq.beq (Sail.BitVec.extractLsb v__409 6 0) (0b1101111 : (BitVec 7))))
    then
      let mapping2_ : (BitVec 5) := (Sail.BitVec.extractLsb v__409 11 7)
      match (encdec_reg_backwards mapping2_) with
      | rd => (some true)
    else none) with
    | .some result => (pure result)
    | none =>
      match (let v__406 := head_exp_
      if (Bool.and
           (let mapping4_ : (BitVec 5) := (Sail.BitVec.extractLsb v__406 11 7)
           let mapping3_ : (BitVec 5) := (Sail.BitVec.extractLsb v__406 19 15)
           (Bool.and (encdec_reg_backwards_matches mapping3_)
             (encdec_reg_backwards_matches mapping4_)))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__406 14 12) (0b000 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__406 6 0) (0b1100111 : (BitVec 7)))))
      then
        let mapping4_ : (BitVec 5) := (Sail.BitVec.extractLsb v__406 11 7)
        let mapping3_ : (BitVec 5) := (Sail.BitVec.extractLsb v__406 19 15)
        match ((encdec_reg_backwards mapping3_), (encdec_reg_backwards mapping4_)) with
        | (rs1, rd) => (some true)
      else none) with
      | .some result => (pure result)
      | none =>
        match (← do
          let v__404 := head_exp_
          if (Bool.and
               (let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__404 14 12)
               let mapping6_ : (BitVec 5) := (Sail.BitVec.extractLsb v__404 19 15)
               let mapping5_ : (BitVec 5) := (Sail.BitVec.extractLsb v__404 24 20)
               (Bool.and (encdec_reg_backwards_matches mapping5_)
                 (Bool.and (encdec_reg_backwards_matches mapping6_)
                   (encdec_bop_backwards_matches mapping7_))))
               (BEq.beq (Sail.BitVec.extractLsb v__404 6 0) (0b1100011 : (BitVec 7))))
          then
            let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__404 14 12)
            let mapping6_ : (BitVec 5) := (Sail.BitVec.extractLsb v__404 19 15)
            let mapping5_ : (BitVec 5) := (Sail.BitVec.extractLsb v__404 24 20)
            match ((encdec_reg_backwards mapping5_), (encdec_reg_backwards mapping6_), (← (encdec_bop_backwards
                mapping7_))) with
            | (rs2, rs1, op) => (pure (some true))
          else (pure none)) with
        | .some result => (pure result)
        | none =>
          match (← do
            let v__402 := head_exp_
            if (Bool.and
                 (let mapping9_ : (BitVec 3) := (Sail.BitVec.extractLsb v__402 14 12)
                 let mapping8_ : (BitVec 5) := (Sail.BitVec.extractLsb v__402 19 15)
                 let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__402 11 7)
                 (Bool.and (encdec_reg_backwards_matches mapping8_)
                   (Bool.and (encdec_iop_backwards_matches mapping9_)
                     (encdec_reg_backwards_matches mapping10_))))
                 (BEq.beq (Sail.BitVec.extractLsb v__402 6 0) (0b0010011 : (BitVec 7))))
            then
              let mapping9_ : (BitVec 3) := (Sail.BitVec.extractLsb v__402 14 12)
              let mapping8_ : (BitVec 5) := (Sail.BitVec.extractLsb v__402 19 15)
              let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__402 11 7)
              match ((encdec_reg_backwards mapping8_), (← (encdec_iop_backwards mapping9_)), (encdec_reg_backwards
                mapping10_)) with
              | (rs1, op, rd) => (pure (some true))
            else (pure none)) with
          | .some result => (pure result)
          | none =>
            match (let v__398 := head_exp_
            if (Bool.and
                 (let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__398 11 7)
                 let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__398 19 15)
                 (Bool.and (encdec_reg_backwards_matches mapping11_)
                   (encdec_reg_backwards_matches mapping12_)))
                 (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__398 31 26) (0b000000 : (BitVec 6)))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__398 14 12) (0b001 : (BitVec 3)))
                     (BEq.beq (Sail.BitVec.extractLsb v__398 6 0) (0b0010011 : (BitVec 7))))))
            then
              let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__398 25 20)
              let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__398 11 7)
              let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__398 19 15)
              match ((encdec_reg_backwards mapping11_), (encdec_reg_backwards mapping12_)) with
              | (rs1, rd) =>
                if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                then (some true)
                else none
            else none) with
            | .some result => (pure result)
            | none =>
              match (let v__394 := head_exp_
              if (Bool.and
                   (let mapping14_ : (BitVec 5) := (Sail.BitVec.extractLsb v__394 11 7)
                   let mapping13_ : (BitVec 5) := (Sail.BitVec.extractLsb v__394 19 15)
                   (Bool.and (encdec_reg_backwards_matches mapping13_)
                     (encdec_reg_backwards_matches mapping14_)))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__394 31 26) (0b000000 : (BitVec 6)))
                     (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__394 14 12) (0b101 : (BitVec 3)))
                       (BEq.beq (Sail.BitVec.extractLsb v__394 6 0) (0b0010011 : (BitVec 7))))))
              then
                let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__394 25 20)
                let mapping14_ : (BitVec 5) := (Sail.BitVec.extractLsb v__394 11 7)
                let mapping13_ : (BitVec 5) := (Sail.BitVec.extractLsb v__394 19 15)
                match ((encdec_reg_backwards mapping13_), (encdec_reg_backwards mapping14_)) with
                | (rs1, rd) =>
                  if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                  then (some true)
                  else none
              else none) with
              | .some result => (pure result)
              | none =>
                match (let v__390 := head_exp_
                if (Bool.and
                     (let mapping16_ : (BitVec 5) := (Sail.BitVec.extractLsb v__390 11 7)
                     let mapping15_ : (BitVec 5) := (Sail.BitVec.extractLsb v__390 19 15)
                     (Bool.and (encdec_reg_backwards_matches mapping15_)
                       (encdec_reg_backwards_matches mapping16_)))
                     (Bool.and
                       (BEq.beq (Sail.BitVec.extractLsb v__390 31 26) (0b010000 : (BitVec 6)))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__390 14 12) (0b101 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__390 6 0) (0b0010011 : (BitVec 7))))))
                then
                  let shamt : (BitVec 6) := (Sail.BitVec.extractLsb v__390 25 20)
                  let mapping16_ : (BitVec 5) := (Sail.BitVec.extractLsb v__390 11 7)
                  let mapping15_ : (BitVec 5) := (Sail.BitVec.extractLsb v__390 19 15)
                  match ((encdec_reg_backwards mapping15_), (encdec_reg_backwards mapping16_)) with
                  | (rs1, rd) =>
                    if (Bool.or (BEq.beq xlen 64) (BEq.beq (BitVec.access shamt 5) 0#1))
                    then (some true)
                    else none
                else none) with
                | .some result => (pure result)
                | none =>
                  match (let v__386 := head_exp_
                  if (Bool.and
                       (let mapping19_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 11 7)
                       let mapping18_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 19 15)
                       let mapping17_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 24 20)
                       (Bool.and (encdec_reg_backwards_matches mapping17_)
                         (Bool.and (encdec_reg_backwards_matches mapping18_)
                           (encdec_reg_backwards_matches mapping19_))))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__386 31 25) (0b0000000 : (BitVec 7)))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__386 14 12) (0b000 : (BitVec 3)))
                           (BEq.beq (Sail.BitVec.extractLsb v__386 6 0) (0b0110011 : (BitVec 7))))))
                  then
                    let mapping19_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 11 7)
                    let mapping18_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 19 15)
                    let mapping17_ : (BitVec 5) := (Sail.BitVec.extractLsb v__386 24 20)
                    match ((encdec_reg_backwards mapping17_), (encdec_reg_backwards mapping18_), (encdec_reg_backwards
                      mapping19_)) with
                    | (rs2, rs1, rd) => (some true)
                  else none) with
                  | .some result => (pure result)
                  | none =>
                    match (let v__382 := head_exp_
                    if (Bool.and
                         (let mapping22_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 11 7)
                         let mapping21_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 19 15)
                         let mapping20_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 24 20)
                         (Bool.and (encdec_reg_backwards_matches mapping20_)
                           (Bool.and (encdec_reg_backwards_matches mapping21_)
                             (encdec_reg_backwards_matches mapping22_))))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__382 31 25) (0b0000000 : (BitVec 7)))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__382 14 12) (0b010 : (BitVec 3)))
                             (BEq.beq (Sail.BitVec.extractLsb v__382 6 0) (0b0110011 : (BitVec 7))))))
                    then
                      let mapping22_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 11 7)
                      let mapping21_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 19 15)
                      let mapping20_ : (BitVec 5) := (Sail.BitVec.extractLsb v__382 24 20)
                      match ((encdec_reg_backwards mapping20_), (encdec_reg_backwards mapping21_), (encdec_reg_backwards
                        mapping22_)) with
                      | (rs2, rs1, rd) => (some true)
                    else none) with
                    | .some result => (pure result)
                    | none =>
                      match (let v__378 := head_exp_
                      if (Bool.and
                           (let mapping25_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 11 7)
                           let mapping24_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 19 15)
                           let mapping23_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 24 20)
                           (Bool.and (encdec_reg_backwards_matches mapping23_)
                             (Bool.and (encdec_reg_backwards_matches mapping24_)
                               (encdec_reg_backwards_matches mapping25_))))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__378 31 25) (0b0000000 : (BitVec 7)))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__378 14 12) (0b011 : (BitVec 3)))
                               (BEq.beq (Sail.BitVec.extractLsb v__378 6 0) (0b0110011 : (BitVec 7))))))
                      then
                        let mapping25_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 11 7)
                        let mapping24_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 19 15)
                        let mapping23_ : (BitVec 5) := (Sail.BitVec.extractLsb v__378 24 20)
                        match ((encdec_reg_backwards mapping23_), (encdec_reg_backwards mapping24_), (encdec_reg_backwards
                          mapping25_)) with
                        | (rs2, rs1, rd) => (some true)
                      else none) with
                      | .some result => (pure result)
                      | none =>
                        match (let v__374 := head_exp_
                        if (Bool.and
                             (let mapping28_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 11 7)
                             let mapping27_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 19 15)
                             let mapping26_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 24 20)
                             (Bool.and (encdec_reg_backwards_matches mapping26_)
                               (Bool.and (encdec_reg_backwards_matches mapping27_)
                                 (encdec_reg_backwards_matches mapping28_))))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__374 31 25)
                                 (0b0000000 : (BitVec 7)))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__374 14 12) (0b111 : (BitVec 3)))
                                 (BEq.beq (Sail.BitVec.extractLsb v__374 6 0)
                                   (0b0110011 : (BitVec 7))))))
                        then
                          let mapping28_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 11 7)
                          let mapping27_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 19 15)
                          let mapping26_ : (BitVec 5) := (Sail.BitVec.extractLsb v__374 24 20)
                          match ((encdec_reg_backwards mapping26_), (encdec_reg_backwards mapping27_), (encdec_reg_backwards
                            mapping28_)) with
                          | (rs2, rs1, rd) => (some true)
                        else none) with
                        | .some result => (pure result)
                        | none =>
                          match (let v__370 := head_exp_
                          if (Bool.and
                               (let mapping31_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 11 7)
                               let mapping30_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 19 15)
                               let mapping29_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 24 20)
                               (Bool.and (encdec_reg_backwards_matches mapping29_)
                                 (Bool.and (encdec_reg_backwards_matches mapping30_)
                                   (encdec_reg_backwards_matches mapping31_))))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__370 31 25)
                                   (0b0000000 : (BitVec 7)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__370 14 12)
                                     (0b110 : (BitVec 3)))
                                   (BEq.beq (Sail.BitVec.extractLsb v__370 6 0)
                                     (0b0110011 : (BitVec 7))))))
                          then
                            let mapping31_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 11 7)
                            let mapping30_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 19 15)
                            let mapping29_ : (BitVec 5) := (Sail.BitVec.extractLsb v__370 24 20)
                            match ((encdec_reg_backwards mapping29_), (encdec_reg_backwards
                              mapping30_), (encdec_reg_backwards mapping31_)) with
                            | (rs2, rs1, rd) => (some true)
                          else none) with
                          | .some result => (pure result)
                          | none =>
                            match (let v__366 := head_exp_
                            if (Bool.and
                                 (let mapping34_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__366 11 7)
                                 let mapping33_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__366 19 15)
                                 let mapping32_ : (BitVec 5) :=
                                   (Sail.BitVec.extractLsb v__366 24 20)
                                 (Bool.and (encdec_reg_backwards_matches mapping32_)
                                   (Bool.and (encdec_reg_backwards_matches mapping33_)
                                     (encdec_reg_backwards_matches mapping34_))))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__366 31 25)
                                     (0b0000000 : (BitVec 7)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__366 14 12)
                                       (0b100 : (BitVec 3)))
                                     (BEq.beq (Sail.BitVec.extractLsb v__366 6 0)
                                       (0b0110011 : (BitVec 7))))))
                            then
                              let mapping34_ : (BitVec 5) := (Sail.BitVec.extractLsb v__366 11 7)
                              let mapping33_ : (BitVec 5) := (Sail.BitVec.extractLsb v__366 19 15)
                              let mapping32_ : (BitVec 5) := (Sail.BitVec.extractLsb v__366 24 20)
                              match ((encdec_reg_backwards mapping32_), (encdec_reg_backwards
                                mapping33_), (encdec_reg_backwards mapping34_)) with
                              | (rs2, rs1, rd) => (some true)
                            else none) with
                            | .some result => (pure result)
                            | none =>
                              match (let v__362 := head_exp_
                              if (Bool.and
                                   (let mapping37_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__362 11 7)
                                   let mapping36_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__362 19 15)
                                   let mapping35_ : (BitVec 5) :=
                                     (Sail.BitVec.extractLsb v__362 24 20)
                                   (Bool.and (encdec_reg_backwards_matches mapping35_)
                                     (Bool.and (encdec_reg_backwards_matches mapping36_)
                                       (encdec_reg_backwards_matches mapping37_))))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__362 31 25)
                                       (0b0000000 : (BitVec 7)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__362 14 12)
                                         (0b001 : (BitVec 3)))
                                       (BEq.beq (Sail.BitVec.extractLsb v__362 6 0)
                                         (0b0110011 : (BitVec 7))))))
                              then
                                let mapping37_ : (BitVec 5) := (Sail.BitVec.extractLsb v__362 11 7)
                                let mapping36_ : (BitVec 5) := (Sail.BitVec.extractLsb v__362 19 15)
                                let mapping35_ : (BitVec 5) := (Sail.BitVec.extractLsb v__362 24 20)
                                match ((encdec_reg_backwards mapping35_), (encdec_reg_backwards
                                  mapping36_), (encdec_reg_backwards mapping37_)) with
                                | (rs2, rs1, rd) => (some true)
                              else none) with
                              | .some result => (pure result)
                              | none =>
                                match (let v__358 := head_exp_
                                if (Bool.and
                                     (let mapping40_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__358 11 7)
                                     let mapping39_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__358 19 15)
                                     let mapping38_ : (BitVec 5) :=
                                       (Sail.BitVec.extractLsb v__358 24 20)
                                     (Bool.and (encdec_reg_backwards_matches mapping38_)
                                       (Bool.and (encdec_reg_backwards_matches mapping39_)
                                         (encdec_reg_backwards_matches mapping40_))))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__358 31 25)
                                         (0b0000000 : (BitVec 7)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__358 14 12)
                                           (0b101 : (BitVec 3)))
                                         (BEq.beq (Sail.BitVec.extractLsb v__358 6 0)
                                           (0b0110011 : (BitVec 7))))))
                                then
                                  let mapping40_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__358 11 7)
                                  let mapping39_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__358 19 15)
                                  let mapping38_ : (BitVec 5) :=
                                    (Sail.BitVec.extractLsb v__358 24 20)
                                  match ((encdec_reg_backwards mapping38_), (encdec_reg_backwards
                                    mapping39_), (encdec_reg_backwards mapping40_)) with
                                  | (rs2, rs1, rd) => (some true)
                                else none) with
                                | .some result => (pure result)
                                | none =>
                                  match (let v__354 := head_exp_
                                  if (Bool.and
                                       (let mapping43_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__354 11 7)
                                       let mapping42_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__354 19 15)
                                       let mapping41_ : (BitVec 5) :=
                                         (Sail.BitVec.extractLsb v__354 24 20)
                                       (Bool.and (encdec_reg_backwards_matches mapping41_)
                                         (Bool.and (encdec_reg_backwards_matches mapping42_)
                                           (encdec_reg_backwards_matches mapping43_))))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__354 31 25)
                                           (0b0100000 : (BitVec 7)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__354 14 12)
                                             (0b000 : (BitVec 3)))
                                           (BEq.beq (Sail.BitVec.extractLsb v__354 6 0)
                                             (0b0110011 : (BitVec 7))))))
                                  then
                                    let mapping43_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__354 11 7)
                                    let mapping42_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__354 19 15)
                                    let mapping41_ : (BitVec 5) :=
                                      (Sail.BitVec.extractLsb v__354 24 20)
                                    match ((encdec_reg_backwards mapping41_), (encdec_reg_backwards
                                      mapping42_), (encdec_reg_backwards mapping43_)) with
                                    | (rs2, rs1, rd) => (some true)
                                  else none) with
                                  | .some result => (pure result)
                                  | none =>
                                    match (let v__350 := head_exp_
                                    if (Bool.and
                                         (let mapping46_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__350 11 7)
                                         let mapping45_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__350 19 15)
                                         let mapping44_ : (BitVec 5) :=
                                           (Sail.BitVec.extractLsb v__350 24 20)
                                         (Bool.and (encdec_reg_backwards_matches mapping44_)
                                           (Bool.and (encdec_reg_backwards_matches mapping45_)
                                             (encdec_reg_backwards_matches mapping46_))))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__350 31 25)
                                             (0b0100000 : (BitVec 7)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__350 14 12)
                                               (0b101 : (BitVec 3)))
                                             (BEq.beq (Sail.BitVec.extractLsb v__350 6 0)
                                               (0b0110011 : (BitVec 7))))))
                                    then
                                      let mapping46_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__350 11 7)
                                      let mapping45_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__350 19 15)
                                      let mapping44_ : (BitVec 5) :=
                                        (Sail.BitVec.extractLsb v__350 24 20)
                                      match ((encdec_reg_backwards mapping44_), (encdec_reg_backwards
                                        mapping45_), (encdec_reg_backwards mapping46_)) with
                                      | (rs2, rs1, rd) => (some true)
                                    else none) with
                                    | .some result => (pure result)
                                    | none =>
                                      match (let v__348 := head_exp_
                                      if (Bool.and
                                           (let mapping50_ : (BitVec 5) :=
                                             (Sail.BitVec.extractLsb v__348 11 7)
                                           let mapping49_ : (BitVec 2) :=
                                             (Sail.BitVec.extractLsb v__348 13 12)
                                           let mapping48_ : (BitVec 1) :=
                                             (Sail.BitVec.extractLsb v__348 14 14)
                                           let mapping47_ : (BitVec 5) :=
                                             (Sail.BitVec.extractLsb v__348 19 15)
                                           (Bool.and (encdec_reg_backwards_matches mapping47_)
                                             (Bool.and (bool_bits_backwards_matches mapping48_)
                                               (Bool.and (size_enc_backwards_matches mapping49_)
                                                 (encdec_reg_backwards_matches mapping50_)))))
                                           (BEq.beq (Sail.BitVec.extractLsb v__348 6 0)
                                             (0b0000011 : (BitVec 7))))
                                      then
                                        let mapping50_ : (BitVec 5) :=
                                          (Sail.BitVec.extractLsb v__348 11 7)
                                        let mapping49_ : (BitVec 2) :=
                                          (Sail.BitVec.extractLsb v__348 13 12)
                                        let mapping48_ : (BitVec 1) :=
                                          (Sail.BitVec.extractLsb v__348 14 14)
                                        let mapping47_ : (BitVec 5) :=
                                          (Sail.BitVec.extractLsb v__348 19 15)
                                        match ((encdec_reg_backwards mapping47_), (bool_bits_backwards
                                          mapping48_), (size_enc_backwards mapping49_), (encdec_reg_backwards
                                          mapping50_)) with
                                        | (rs1, is_unsigned, size, rd) =>
                                          if (Bool.or ((size_bytes_forwards size) <b xlen_bytes)
                                               (Bool.and (not is_unsigned)
                                                 (((size_bytes_forwards size) ≤b xlen_bytes) : Bool)))
                                          then (some true)
                                          else none
                                      else none) with
                                      | .some result => (pure result)
                                      | none =>
                                        match (let v__345 := head_exp_
                                        if (Bool.and
                                             (let mapping53_ : (BitVec 2) :=
                                               (Sail.BitVec.extractLsb v__345 13 12)
                                             let mapping52_ : (BitVec 5) :=
                                               (Sail.BitVec.extractLsb v__345 19 15)
                                             let mapping51_ : (BitVec 5) :=
                                               (Sail.BitVec.extractLsb v__345 24 20)
                                             (Bool.and (encdec_reg_backwards_matches mapping51_)
                                               (Bool.and (encdec_reg_backwards_matches mapping52_)
                                                 (size_enc_backwards_matches mapping53_))))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__345 14 14)
                                                 (0b0 : (BitVec 1)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__345 6 0)
                                                 (0b0100011 : (BitVec 7)))))
                                        then
                                          let mapping53_ : (BitVec 2) :=
                                            (Sail.BitVec.extractLsb v__345 13 12)
                                          let mapping52_ : (BitVec 5) :=
                                            (Sail.BitVec.extractLsb v__345 19 15)
                                          let mapping51_ : (BitVec 5) :=
                                            (Sail.BitVec.extractLsb v__345 24 20)
                                          match ((encdec_reg_backwards mapping51_), (encdec_reg_backwards
                                            mapping52_), (size_enc_backwards mapping53_)) with
                                          | (rs2, rs1, size) =>
                                            if ((size_bytes_forwards size) ≤b xlen_bytes)
                                            then (some true)
                                            else none
                                        else none) with
                                        | .some result => (pure result)
                                        | none =>
                                          match (let v__342 := head_exp_
                                          if (Bool.and
                                               (let mapping55_ : (BitVec 5) :=
                                                 (Sail.BitVec.extractLsb v__342 11 7)
                                               let mapping54_ : (BitVec 5) :=
                                                 (Sail.BitVec.extractLsb v__342 19 15)
                                               (Bool.and (encdec_reg_backwards_matches mapping54_)
                                                 (encdec_reg_backwards_matches mapping55_)))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__342 14 12)
                                                   (0b000 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__342 6 0)
                                                   (0b0011011 : (BitVec 7)))))
                                          then
                                            let mapping55_ : (BitVec 5) :=
                                              (Sail.BitVec.extractLsb v__342 11 7)
                                            let mapping54_ : (BitVec 5) :=
                                              (Sail.BitVec.extractLsb v__342 19 15)
                                            match ((encdec_reg_backwards mapping54_), (encdec_reg_backwards
                                              mapping55_)) with
                                            | (rs1, rd) =>
                                              if (BEq.beq xlen 64)
                                              then (some true)
                                              else none
                                          else none) with
                                          | .some result => (pure result)
                                          | none =>
                                            match (let v__338 := head_exp_
                                            if (Bool.and
                                                 (let mapping58_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__338 11 7)
                                                 let mapping57_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__338 19 15)
                                                 let mapping56_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__338 24 20)
                                                 (Bool.and (encdec_reg_backwards_matches mapping56_)
                                                   (Bool.and
                                                     (encdec_reg_backwards_matches mapping57_)
                                                     (encdec_reg_backwards_matches mapping58_))))
                                                 (Bool.and
                                                   (BEq.beq (Sail.BitVec.extractLsb v__338 31 25)
                                                     (0b0000000 : (BitVec 7)))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__338 14 12)
                                                       (0b000 : (BitVec 3)))
                                                     (BEq.beq (Sail.BitVec.extractLsb v__338 6 0)
                                                       (0b0111011 : (BitVec 7))))))
                                            then
                                              let mapping58_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__338 11 7)
                                              let mapping57_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__338 19 15)
                                              let mapping56_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__338 24 20)
                                              match ((encdec_reg_backwards mapping56_), (encdec_reg_backwards
                                                mapping57_), (encdec_reg_backwards mapping58_)) with
                                              | (rs2, rs1, rd) =>
                                                if (BEq.beq xlen 64)
                                                then (some true)
                                                else none
                                            else none) with
                                            | .some result => (pure result)
                                            | none =>
                                              match (let v__334 := head_exp_
                                              if (Bool.and
                                                   (let mapping61_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__334 11 7)
                                                   let mapping60_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__334 19 15)
                                                   let mapping59_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__334 24 20)
                                                   (Bool.and
                                                     (encdec_reg_backwards_matches mapping59_)
                                                     (Bool.and
                                                       (encdec_reg_backwards_matches mapping60_)
                                                       (encdec_reg_backwards_matches mapping61_))))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__334 31 25)
                                                       (0b0100000 : (BitVec 7)))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__334 14 12)
                                                         (0b000 : (BitVec 3)))
                                                       (BEq.beq (Sail.BitVec.extractLsb v__334 6 0)
                                                         (0b0111011 : (BitVec 7))))))
                                              then
                                                let mapping61_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__334 11 7)
                                                let mapping60_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__334 19 15)
                                                let mapping59_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__334 24 20)
                                                match ((encdec_reg_backwards mapping59_), (encdec_reg_backwards
                                                  mapping60_), (encdec_reg_backwards mapping61_)) with
                                                | (rs2, rs1, rd) =>
                                                  if (BEq.beq xlen 64)
                                                  then (some true)
                                                  else none
                                              else none) with
                                              | .some result => (pure result)
                                              | none =>
                                                match (let v__330 := head_exp_
                                                if (Bool.and
                                                     (let mapping64_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__330 11 7)
                                                     let mapping63_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__330 19 15)
                                                     let mapping62_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__330 24 20)
                                                     (Bool.and
                                                       (encdec_reg_backwards_matches mapping62_)
                                                       (Bool.and
                                                         (encdec_reg_backwards_matches mapping63_)
                                                         (encdec_reg_backwards_matches mapping64_))))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__330 31 25)
                                                         (0b0000000 : (BitVec 7)))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__330 14 12)
                                                           (0b001 : (BitVec 3)))
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__330 6 0)
                                                           (0b0111011 : (BitVec 7))))))
                                                then
                                                  let mapping64_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__330 11 7)
                                                  let mapping63_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__330 19 15)
                                                  let mapping62_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__330 24 20)
                                                  match ((encdec_reg_backwards mapping62_), (encdec_reg_backwards
                                                    mapping63_), (encdec_reg_backwards mapping64_)) with
                                                  | (rs2, rs1, rd) =>
                                                    if (BEq.beq xlen 64)
                                                    then (some true)
                                                    else none
                                                else none) with
                                                | .some result => (pure result)
                                                | none =>
                                                  match (let v__326 := head_exp_
                                                  if (Bool.and
                                                       (let mapping67_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__326 11 7)
                                                       let mapping66_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__326 19 15)
                                                       let mapping65_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__326 24 20)
                                                       (Bool.and
                                                         (encdec_reg_backwards_matches mapping65_)
                                                         (Bool.and
                                                           (encdec_reg_backwards_matches mapping66_)
                                                           (encdec_reg_backwards_matches mapping67_))))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__326 31 25)
                                                           (0b0000000 : (BitVec 7)))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__326 14 12)
                                                             (0b101 : (BitVec 3)))
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__326 6 0)
                                                             (0b0111011 : (BitVec 7))))))
                                                  then
                                                    let mapping67_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__326 11 7)
                                                    let mapping66_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__326 19 15)
                                                    let mapping65_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__326 24 20)
                                                    match ((encdec_reg_backwards mapping65_), (encdec_reg_backwards
                                                      mapping66_), (encdec_reg_backwards mapping67_)) with
                                                    | (rs2, rs1, rd) =>
                                                      if (BEq.beq xlen 64)
                                                      then (some true)
                                                      else none
                                                  else none) with
                                                  | .some result => (pure result)
                                                  | none =>
                                                    match (let v__322 := head_exp_
                                                    if (Bool.and
                                                         (let mapping70_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__322 11 7)
                                                         let mapping69_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__322 19 15)
                                                         let mapping68_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__322 24 20)
                                                         (Bool.and
                                                           (encdec_reg_backwards_matches mapping68_)
                                                           (Bool.and
                                                             (encdec_reg_backwards_matches
                                                               mapping69_)
                                                             (encdec_reg_backwards_matches
                                                               mapping70_))))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__322 31 25)
                                                             (0b0100000 : (BitVec 7)))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__322 14 12)
                                                               (0b101 : (BitVec 3)))
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__322 6 0)
                                                               (0b0111011 : (BitVec 7))))))
                                                    then
                                                      let mapping70_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__322 11 7)
                                                      let mapping69_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__322 19 15)
                                                      let mapping68_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__322 24 20)
                                                      match ((encdec_reg_backwards mapping68_), (encdec_reg_backwards
                                                        mapping69_), (encdec_reg_backwards
                                                        mapping70_)) with
                                                      | (rs2, rs1, rd) =>
                                                        if (BEq.beq xlen 64)
                                                        then (some true)
                                                        else none
                                                    else none) with
                                                    | .some result => (pure result)
                                                    | none =>
                                                      match (let v__318 := head_exp_
                                                      if (Bool.and
                                                           (let mapping72_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__318 11 7)
                                                           let mapping71_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__318 19 15)
                                                           (Bool.and
                                                             (encdec_reg_backwards_matches
                                                               mapping71_)
                                                             (encdec_reg_backwards_matches
                                                               mapping72_)))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__318 31 25)
                                                               (0b0000000 : (BitVec 7)))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__318 14
                                                                   12) (0b001 : (BitVec 3)))
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__318 6 0)
                                                                 (0b0011011 : (BitVec 7))))))
                                                      then
                                                        let mapping72_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__318 11 7)
                                                        let mapping71_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__318 19 15)
                                                        match ((encdec_reg_backwards mapping71_), (encdec_reg_backwards
                                                          mapping72_)) with
                                                        | (rs1, rd) =>
                                                          if (BEq.beq xlen 64)
                                                          then (some true)
                                                          else none
                                                      else none) with
                                                      | .some result => (pure result)
                                                      | none =>
                                                        match (let v__314 := head_exp_
                                                        if (Bool.and
                                                             (let mapping74_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__314 11 7)
                                                             let mapping73_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__314 19 15)
                                                             (Bool.and
                                                               (encdec_reg_backwards_matches
                                                                 mapping73_)
                                                               (encdec_reg_backwards_matches
                                                                 mapping74_)))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__314 31
                                                                   25) (0b0000000 : (BitVec 7)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__314 14
                                                                     12) (0b101 : (BitVec 3)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__314 6
                                                                     0) (0b0011011 : (BitVec 7))))))
                                                        then
                                                          let mapping74_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__314 11 7)
                                                          let mapping73_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__314 19 15)
                                                          match ((encdec_reg_backwards mapping73_), (encdec_reg_backwards
                                                            mapping74_)) with
                                                          | (rs1, rd) =>
                                                            if (BEq.beq xlen 64)
                                                            then (some true)
                                                            else none
                                                        else none) with
                                                        | .some result => (pure result)
                                                        | none =>
                                                          match (let v__310 := head_exp_
                                                          if (Bool.and
                                                               (let mapping76_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__310 11 7)
                                                               let mapping75_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__310 19
                                                                   15)
                                                               (Bool.and
                                                                 (encdec_reg_backwards_matches
                                                                   mapping75_)
                                                                 (encdec_reg_backwards_matches
                                                                   mapping76_)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__310 31
                                                                     25) (0b0100000 : (BitVec 7)))
                                                                 (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__310
                                                                       14 12) (0b101 : (BitVec 3)))
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__310
                                                                       6 0) (0b0011011 : (BitVec 7))))))
                                                          then
                                                            let mapping76_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__310 11 7)
                                                            let mapping75_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__310 19 15)
                                                            match ((encdec_reg_backwards mapping75_), (encdec_reg_backwards
                                                              mapping76_)) with
                                                            | (rs1, rd) =>
                                                              if (BEq.beq xlen 64)
                                                              then (some true)
                                                              else none
                                                          else none) with
                                                          | .some result => (pure result)
                                                          | none =>
                                                            match (let v__261 := head_exp_
                                                            if (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__261 31
                                                                     28) (0x0 : (BitVec 4)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__261 19
                                                                     0) (0x0000F : (BitVec 20))))
                                                            then (some true)
                                                            else
                                                              if (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__261
                                                                       31 28) (0x8 : (BitVec 4)))
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__261
                                                                       19 0) (0x0000F : (BitVec 20))))
                                                              then (some true)
                                                              else
                                                                if (BEq.beq v__261
                                                                     (0x00000073 : (BitVec 32)))
                                                                then (some true)
                                                                else
                                                                  if (BEq.beq v__261
                                                                       (0x30200073 : (BitVec 32)))
                                                                  then (some true)
                                                                  else
                                                                    if (BEq.beq v__261
                                                                         (0x10200073 : (BitVec 32)))
                                                                    then (some true)
                                                                    else
                                                                      if (BEq.beq v__261
                                                                           (0x00100073 : (BitVec 32)))
                                                                      then (some true)
                                                                      else
                                                                        if (BEq.beq v__261
                                                                             (0x10500073 : (BitVec 32)))
                                                                        then (some true)
                                                                        else
                                                                          if (Bool.and
                                                                               (let mapping78_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__261 19 15)
                                                                               let mapping77_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__261 24 20)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping77_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping78_)))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__261 31 25)
                                                                                   (0b0001001 : (BitVec 7)))
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__261 14 0)
                                                                                   (0b000000001110011 : (BitVec 15)))))
                                                                          then
                                                                            let mapping78_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__261 19 15)
                                                                            let mapping77_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__261 24 20)
                                                                            match ((encdec_reg_backwards
                                                                              mapping77_), (encdec_reg_backwards
                                                                              mapping78_)) with
                                                                            | (rs2, rs1) =>
                                                                              (some true)
                                                                          else none) with
                                                            | .some result => (pure result)
                                                            | none =>
                                                              match (← do
                                                                let v__250 := head_exp_
                                                                if (Bool.and
                                                                     (← (extensionEnabled
                                                                         Ext_Zifencei))
                                                                     (BEq.beq v__250
                                                                       (0x0000100F : (BitVec 32))))
                                                                then (pure (some true))
                                                                else
                                                                  if (Bool.and
                                                                       (let mapping83_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__250 11 7)
                                                                       let mapping82_ : (BitVec 2) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__250 13 12)
                                                                       let mapping81_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__250 19 15)
                                                                       let mapping80_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__250 25 25)
                                                                       let mapping79_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__250 26 26)
                                                                       (Bool.and
                                                                         (bool_bits_backwards_matches
                                                                           mapping79_)
                                                                         (Bool.and
                                                                           (bool_bits_backwards_matches
                                                                             mapping80_)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping81_)
                                                                             (Bool.and
                                                                               (size_enc_backwards_matches
                                                                                 mapping82_)
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping83_))))))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__250 31 27)
                                                                           (0b00010 : (BitVec 5)))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__250 24 20)
                                                                             (0b00000 : (BitVec 5)))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__250 14 14)
                                                                               (0b0 : (BitVec 1)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__250 6 0)
                                                                               (0b0101111 : (BitVec 7)))))))
                                                                  then
                                                                    let mapping83_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__250
                                                                        11 7)
                                                                    let mapping82_ : (BitVec 2) :=
                                                                      (Sail.BitVec.extractLsb v__250
                                                                        13 12)
                                                                    let mapping81_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__250
                                                                        19 15)
                                                                    let mapping80_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__250
                                                                        25 25)
                                                                    let mapping79_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__250
                                                                        26 26)
                                                                    match ((bool_bits_backwards
                                                                      mapping79_), (bool_bits_backwards
                                                                      mapping80_), (encdec_reg_backwards
                                                                      mapping81_), (size_enc_backwards
                                                                      mapping82_), (encdec_reg_backwards
                                                                      mapping83_)) with
                                                                    | (aq, rl, rs1, size, rd) =>
                                                                      if (Bool.and
                                                                           (← (extensionEnabled
                                                                               Ext_Zalrsc))
                                                                           (lrsc_width_valid size))
                                                                      then (pure (some true))
                                                                      else (pure none)
                                                                  else (pure none)) with
                                                              | .some result => (pure result)
                                                              | none =>
                                                                match (← do
                                                                  let v__246 := head_exp_
                                                                  if (Bool.and
                                                                       (let mapping89_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 11 7)
                                                                       let mapping88_ : (BitVec 2) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 13 12)
                                                                       let mapping87_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 19 15)
                                                                       let mapping86_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 24 20)
                                                                       let mapping85_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 25 25)
                                                                       let mapping84_ : (BitVec 1) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__246 26 26)
                                                                       (Bool.and
                                                                         (bool_bits_backwards_matches
                                                                           mapping84_)
                                                                         (Bool.and
                                                                           (bool_bits_backwards_matches
                                                                             mapping85_)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping86_)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping87_)
                                                                               (Bool.and
                                                                                 (size_enc_backwards_matches
                                                                                   mapping88_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping89_)))))))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__246 31 27)
                                                                           (0b00011 : (BitVec 5)))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__246 14 14)
                                                                             (0b0 : (BitVec 1)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__246 6 0)
                                                                             (0b0101111 : (BitVec 7))))))
                                                                  then
                                                                    let mapping89_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        11 7)
                                                                    let mapping88_ : (BitVec 2) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        13 12)
                                                                    let mapping87_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        19 15)
                                                                    let mapping86_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        24 20)
                                                                    let mapping85_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        25 25)
                                                                    let mapping84_ : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__246
                                                                        26 26)
                                                                    match ((bool_bits_backwards
                                                                      mapping84_), (bool_bits_backwards
                                                                      mapping85_), (encdec_reg_backwards
                                                                      mapping86_), (encdec_reg_backwards
                                                                      mapping87_), (size_enc_backwards
                                                                      mapping88_), (encdec_reg_backwards
                                                                      mapping89_)) with
                                                                    | (aq, rl, rs2, rs1, size, rd) =>
                                                                      if (Bool.and
                                                                           (← (extensionEnabled
                                                                               Ext_Zalrsc))
                                                                           (lrsc_width_valid size))
                                                                      then (pure (some true))
                                                                      else (pure none)
                                                                  else (pure none)) with
                                                                | .some result => (pure result)
                                                                | none =>
                                                                  match (← do
                                                                    let v__243 := head_exp_
                                                                    if (Bool.and
                                                                         (let mapping90_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 31 27)
                                                                         let mapping96_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 11 7)
                                                                         let mapping95_ : (BitVec 2) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 13 12)
                                                                         let mapping94_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 19 15)
                                                                         let mapping93_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 24 20)
                                                                         let mapping92_ : (BitVec 1) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 25 25)
                                                                         let mapping91_ : (BitVec 1) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 26 26)
                                                                         let mapping90_ : (BitVec 5) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__243 31 27)
                                                                         (Bool.and
                                                                           (encdec_amoop_backwards_matches
                                                                             mapping90_)
                                                                           (Bool.and
                                                                             (bool_bits_backwards_matches
                                                                               mapping91_)
                                                                             (Bool.and
                                                                               (bool_bits_backwards_matches
                                                                                 mapping92_)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping93_)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping94_)
                                                                                   (Bool.and
                                                                                     (size_enc_backwards_matches
                                                                                       mapping95_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping96_))))))))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__243 14 14)
                                                                             (0b0 : (BitVec 1)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__243 6 0)
                                                                             (0b0101111 : (BitVec 7)))))
                                                                    then
                                                                      let mapping90_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 31 27)
                                                                      let mapping96_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 11 7)
                                                                      let mapping95_ : (BitVec 2) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 13 12)
                                                                      let mapping94_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 19 15)
                                                                      let mapping93_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 24 20)
                                                                      let mapping92_ : (BitVec 1) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 25 25)
                                                                      let mapping91_ : (BitVec 1) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 26 26)
                                                                      let mapping90_ : (BitVec 5) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__243 31 27)
                                                                      match ((← (encdec_amoop_backwards
                                                                          mapping90_)), (bool_bits_backwards
                                                                        mapping91_), (bool_bits_backwards
                                                                        mapping92_), (encdec_reg_backwards
                                                                        mapping93_), (encdec_reg_backwards
                                                                        mapping94_), (size_enc_backwards
                                                                        mapping95_), (encdec_reg_backwards
                                                                        mapping96_)) with
                                                                      | (op, aq, rl, rs2, rs1, size, rd) =>
                                                                        if (Bool.and
                                                                             (← (extensionEnabled
                                                                                 Ext_Zaamo))
                                                                             (← (amo_width_valid
                                                                                 size)))
                                                                        then (pure (some true))
                                                                        else (pure none)
                                                                    else (pure none)) with
                                                                  | .some result => (pure result)
                                                                  | none =>
                                                                    match (← do
                                                                      let v__240 := head_exp_
                                                                      if (Bool.and
                                                                           (let mapping99_ : (BitVec 3) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__240 14 12)
                                                                           let mapping98_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__240 19 15)
                                                                           let mapping97_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__240 24 20)
                                                                           let mapping100_ : (BitVec 5) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__240 11 7)
                                                                           (Bool.and
                                                                             (encdec_reg_backwards_matches
                                                                               mapping97_)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping98_)
                                                                               (Bool.and
                                                                                 (encdec_mul_op_backwards_matches
                                                                                   mapping99_)
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping100_)))))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__240 31 25)
                                                                               (0b0000001 : (BitVec 7)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__240 6 0)
                                                                               (0b0110011 : (BitVec 7)))))
                                                                      then
                                                                        let mapping99_ : (BitVec 3) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__240 14 12)
                                                                        let mapping98_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__240 19 15)
                                                                        let mapping97_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__240 24 20)
                                                                        let mapping100_ : (BitVec 5) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__240 11 7)
                                                                        match ((encdec_reg_backwards
                                                                          mapping97_), (encdec_reg_backwards
                                                                          mapping98_), (← (encdec_mul_op_backwards
                                                                            mapping99_)), (encdec_reg_backwards
                                                                          mapping100_)) with
                                                                        | (rs2, rs1, mul_op, rd) =>
                                                                          if (Bool.or
                                                                               (← (extensionEnabled
                                                                                   Ext_M))
                                                                               (← (extensionEnabled
                                                                                   Ext_Zmmul)))
                                                                          then (pure (some true))
                                                                          else (pure none)
                                                                      else (pure none)) with
                                                                    | .some result => (pure result)
                                                                    | none =>
                                                                      match (← do
                                                                        let v__236 := head_exp_
                                                                        if (Bool.and
                                                                             (let mapping104_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__236 11 7)
                                                                             let mapping103_ : (BitVec 1) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__236 12 12)
                                                                             let mapping102_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__236 19 15)
                                                                             let mapping101_ : (BitVec 5) :=
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__236 24 20)
                                                                             (Bool.and
                                                                               (encdec_reg_backwards_matches
                                                                                 mapping101_)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping102_)
                                                                                 (Bool.and
                                                                                   (bool_not_bits_backwards_matches
                                                                                     mapping103_)
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping104_)))))
                                                                             (Bool.and
                                                                               (BEq.beq
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__236 31 25)
                                                                                 (0b0000001 : (BitVec 7)))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__236 14 13)
                                                                                   (0b10 : (BitVec 2)))
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__236 6 0)
                                                                                   (0b0110011 : (BitVec 7))))))
                                                                        then
                                                                          let mapping104_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__236 11 7)
                                                                          let mapping103_ : (BitVec 1) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__236 12 12)
                                                                          let mapping102_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__236 19 15)
                                                                          let mapping101_ : (BitVec 5) :=
                                                                            (Sail.BitVec.extractLsb
                                                                              v__236 24 20)
                                                                          match ((encdec_reg_backwards
                                                                            mapping101_), (encdec_reg_backwards
                                                                            mapping102_), (bool_not_bits_backwards
                                                                            mapping103_), (encdec_reg_backwards
                                                                            mapping104_)) with
                                                                          | (rs2, rs1, s, rd) =>
                                                                            if (← (extensionEnabled
                                                                                   Ext_M))
                                                                            then (pure (some true))
                                                                            else (pure none)
                                                                        else (pure none)) with
                                                                      | .some result =>
                                                                        (pure result)
                                                                      | none =>
                                                                        match (← do
                                                                          let v__232 := head_exp_
                                                                          if (Bool.and
                                                                               (let mapping108_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__232 11 7)
                                                                               let mapping107_ : (BitVec 1) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__232 12 12)
                                                                               let mapping106_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__232 19 15)
                                                                               let mapping105_ : (BitVec 5) :=
                                                                                 (Sail.BitVec.extractLsb
                                                                                   v__232 24 20)
                                                                               (Bool.and
                                                                                 (encdec_reg_backwards_matches
                                                                                   mapping105_)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping106_)
                                                                                   (Bool.and
                                                                                     (bool_not_bits_backwards_matches
                                                                                       mapping107_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping108_)))))
                                                                               (Bool.and
                                                                                 (BEq.beq
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__232 31 25)
                                                                                   (0b0000001 : (BitVec 7)))
                                                                                 (Bool.and
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__232 14 13)
                                                                                     (0b11 : (BitVec 2)))
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__232 6 0)
                                                                                     (0b0110011 : (BitVec 7))))))
                                                                          then
                                                                            let mapping108_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__232 11 7)
                                                                            let mapping107_ : (BitVec 1) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__232 12 12)
                                                                            let mapping106_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__232 19 15)
                                                                            let mapping105_ : (BitVec 5) :=
                                                                              (Sail.BitVec.extractLsb
                                                                                v__232 24 20)
                                                                            match ((encdec_reg_backwards
                                                                              mapping105_), (encdec_reg_backwards
                                                                              mapping106_), (bool_not_bits_backwards
                                                                              mapping107_), (encdec_reg_backwards
                                                                              mapping108_)) with
                                                                            | (rs2, rs1, s, rd) =>
                                                                              if (← (extensionEnabled
                                                                                     Ext_M))
                                                                              then
                                                                                (pure (some true))
                                                                              else (pure none)
                                                                          else (pure none)) with
                                                                        | .some result =>
                                                                          (pure result)
                                                                        | none =>
                                                                          match (← do
                                                                            let v__228 := head_exp_
                                                                            if (Bool.and
                                                                                 (let mapping111_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__228 11 7)
                                                                                 let mapping110_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__228 19 15)
                                                                                 let mapping109_ : (BitVec 5) :=
                                                                                   (Sail.BitVec.extractLsb
                                                                                     v__228 24 20)
                                                                                 (Bool.and
                                                                                   (encdec_reg_backwards_matches
                                                                                     mapping109_)
                                                                                   (Bool.and
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping110_)
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping111_))))
                                                                                 (Bool.and
                                                                                   (BEq.beq
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__228 31 25)
                                                                                     (0b0000001 : (BitVec 7)))
                                                                                   (Bool.and
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__228 14
                                                                                         12)
                                                                                       (0b000 : (BitVec 3)))
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__228 6 0)
                                                                                       (0b0111011 : (BitVec 7))))))
                                                                            then
                                                                              let mapping111_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__228 11 7)
                                                                              let mapping110_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__228 19 15)
                                                                              let mapping109_ : (BitVec 5) :=
                                                                                (Sail.BitVec.extractLsb
                                                                                  v__228 24 20)
                                                                              match ((encdec_reg_backwards
                                                                                mapping109_), (encdec_reg_backwards
                                                                                mapping110_), (encdec_reg_backwards
                                                                                mapping111_)) with
                                                                              | (rs2, rs1, rd) =>
                                                                                if (Bool.and
                                                                                     (BEq.beq xlen
                                                                                       64)
                                                                                     (Bool.or
                                                                                       (← (extensionEnabled
                                                                                           Ext_M))
                                                                                       (← (extensionEnabled
                                                                                           Ext_Zmmul))))
                                                                                then
                                                                                  (pure (some true))
                                                                                else (pure none)
                                                                            else (pure none)) with
                                                                          | .some result =>
                                                                            (pure result)
                                                                          | none =>
                                                                            match (← do
                                                                              let v__224 :=
                                                                                head_exp_
                                                                              if (Bool.and
                                                                                   (let mapping115_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__224 11 7)
                                                                                   let mapping114_ : (BitVec 1) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__224 12 12)
                                                                                   let mapping113_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__224 19 15)
                                                                                   let mapping112_ : (BitVec 5) :=
                                                                                     (Sail.BitVec.extractLsb
                                                                                       v__224 24 20)
                                                                                   (Bool.and
                                                                                     (encdec_reg_backwards_matches
                                                                                       mapping112_)
                                                                                     (Bool.and
                                                                                       (encdec_reg_backwards_matches
                                                                                         mapping113_)
                                                                                       (Bool.and
                                                                                         (bool_not_bits_backwards_matches
                                                                                           mapping114_)
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping115_)))))
                                                                                   (Bool.and
                                                                                     (BEq.beq
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__224 31
                                                                                         25)
                                                                                       (0b0000001 : (BitVec 7)))
                                                                                     (Bool.and
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__224 14
                                                                                           13)
                                                                                         (0b10 : (BitVec 2)))
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__224 6
                                                                                           0)
                                                                                         (0b0111011 : (BitVec 7))))))
                                                                              then
                                                                                let mapping115_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__224 11 7)
                                                                                let mapping114_ : (BitVec 1) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__224 12 12)
                                                                                let mapping113_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__224 19 15)
                                                                                let mapping112_ : (BitVec 5) :=
                                                                                  (Sail.BitVec.extractLsb
                                                                                    v__224 24 20)
                                                                                match ((encdec_reg_backwards
                                                                                  mapping112_), (encdec_reg_backwards
                                                                                  mapping113_), (bool_not_bits_backwards
                                                                                  mapping114_), (encdec_reg_backwards
                                                                                  mapping115_)) with
                                                                                | (rs2, rs1, s, rd) =>
                                                                                  if (Bool.and
                                                                                       (BEq.beq xlen
                                                                                         64)
                                                                                       (← (extensionEnabled
                                                                                           Ext_M)))
                                                                                  then
                                                                                    (pure (some true))
                                                                                  else (pure none)
                                                                              else (pure none)) with
                                                                            | .some result =>
                                                                              (pure result)
                                                                            | none =>
                                                                              match (← do
                                                                                let v__220 :=
                                                                                  head_exp_
                                                                                if (Bool.and
                                                                                     (let mapping119_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__220 11 7)
                                                                                     let mapping118_ : (BitVec 1) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__220 12
                                                                                         12)
                                                                                     let mapping117_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__220 19
                                                                                         15)
                                                                                     let mapping116_ : (BitVec 5) :=
                                                                                       (Sail.BitVec.extractLsb
                                                                                         v__220 24
                                                                                         20)
                                                                                     (Bool.and
                                                                                       (encdec_reg_backwards_matches
                                                                                         mapping116_)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping117_)
                                                                                         (Bool.and
                                                                                           (bool_not_bits_backwards_matches
                                                                                             mapping118_)
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping119_)))))
                                                                                     (Bool.and
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__220 31
                                                                                           25)
                                                                                         (0b0000001 : (BitVec 7)))
                                                                                       (Bool.and
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__220
                                                                                             14 13)
                                                                                           (0b11 : (BitVec 2)))
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__220
                                                                                             6 0)
                                                                                           (0b0111011 : (BitVec 7))))))
                                                                                then
                                                                                  let mapping119_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__220 11 7)
                                                                                  let mapping118_ : (BitVec 1) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__220 12 12)
                                                                                  let mapping117_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__220 19 15)
                                                                                  let mapping116_ : (BitVec 5) :=
                                                                                    (Sail.BitVec.extractLsb
                                                                                      v__220 24 20)
                                                                                  match ((encdec_reg_backwards
                                                                                    mapping116_), (encdec_reg_backwards
                                                                                    mapping117_), (bool_not_bits_backwards
                                                                                    mapping118_), (encdec_reg_backwards
                                                                                    mapping119_)) with
                                                                                  | (rs2, rs1, s, rd) =>
                                                                                    if (Bool.and
                                                                                         (BEq.beq
                                                                                           xlen 64)
                                                                                         (← (extensionEnabled
                                                                                             Ext_M)))
                                                                                    then
                                                                                      (pure (some
                                                                                          true))
                                                                                    else (pure none)
                                                                                else (pure none)) with
                                                                              | .some result =>
                                                                                (pure result)
                                                                              | none =>
                                                                                match (← do
                                                                                  let v__218 :=
                                                                                    head_exp_
                                                                                  if (Bool.and
                                                                                       (let mapping123_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__218 11
                                                                                           7)
                                                                                       let mapping122_ : (BitVec 2) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__218 13
                                                                                           12)
                                                                                       let mapping121_ : (BitVec 1) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__218 14
                                                                                           14)
                                                                                       let mapping120_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__218 19
                                                                                           15)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping120_)
                                                                                         (Bool.and
                                                                                           (bool_bits_backwards_matches
                                                                                             mapping121_)
                                                                                           (Bool.and
                                                                                             (encdec_csrop_backwards_matches
                                                                                               mapping122_)
                                                                                             (encdec_reg_backwards_matches
                                                                                               mapping123_)))))
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__218 6
                                                                                           0)
                                                                                         (0b1110011 : (BitVec 7))))
                                                                                  then
                                                                                    let mapping123_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__218 11 7)
                                                                                    let mapping122_ : (BitVec 2) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__218 13 12)
                                                                                    let mapping121_ : (BitVec 1) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__218 14 14)
                                                                                    let mapping120_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__218 19 15)
                                                                                    match ((encdec_reg_backwards
                                                                                      mapping120_), (bool_bits_backwards
                                                                                      mapping121_), (← (encdec_csrop_backwards
                                                                                        mapping122_)), (encdec_reg_backwards
                                                                                      mapping123_)) with
                                                                                    | (rs1, is_imm, op, rd) =>
                                                                                      (pure (some
                                                                                          true))
                                                                                  else (pure none)) with
                                                                                | .some result =>
                                                                                  (pure result)
                                                                                | none =>
                                                                                  match (let v__215 :=
                                                                                    head_exp_
                                                                                  if (Bool.and
                                                                                       (let mapping125_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__215 11
                                                                                           7)
                                                                                       let mapping124_ : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           v__215 19
                                                                                           15)
                                                                                       (Bool.and
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping124_)
                                                                                         (encdec_reg_backwards_matches
                                                                                           mapping125_)))
                                                                                       (Bool.and
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__215
                                                                                             14 12)
                                                                                           (0b000 : (BitVec 3)))
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__215
                                                                                             6 0)
                                                                                           (0b0001111 : (BitVec 7)))))
                                                                                  then
                                                                                    let fm : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__215 31 28)
                                                                                    let mapping125_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__215 11 7)
                                                                                    let mapping124_ : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__215 19 15)
                                                                                    let fm : (BitVec 4) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        v__215 31 28)
                                                                                    match ((encdec_reg_backwards
                                                                                      mapping124_), (encdec_reg_backwards
                                                                                      mapping125_)) with
                                                                                    | (rs, rd) =>
                                                                                      if (Bool.or
                                                                                           (Bool.and
                                                                                             (bne fm
                                                                                               (0x0 : (BitVec 4)))
                                                                                             (bne fm
                                                                                               (0x8 : (BitVec 4))))
                                                                                           (Bool.or
                                                                                             (bne rs
                                                                                               zreg)
                                                                                             (bne rd
                                                                                               zreg)))
                                                                                      then
                                                                                        (some true)
                                                                                      else none
                                                                                  else none) with
                                                                                  | .some result =>
                                                                                    (pure result)
                                                                                  | none =>
                                                                                    match (let v__212 :=
                                                                                      head_exp_
                                                                                    if (Bool.and
                                                                                         (let mapping127_ : (BitVec 5) :=
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__212
                                                                                             11 7)
                                                                                         let mapping126_ : (BitVec 5) :=
                                                                                           (Sail.BitVec.extractLsb
                                                                                             v__212
                                                                                             19 15)
                                                                                         (Bool.and
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping126_)
                                                                                           (encdec_reg_backwards_matches
                                                                                             mapping127_)))
                                                                                         (Bool.and
                                                                                           (BEq.beq
                                                                                             (Sail.BitVec.extractLsb
                                                                                               v__212
                                                                                               14 12)
                                                                                             (0b001 : (BitVec 3)))
                                                                                           (BEq.beq
                                                                                             (Sail.BitVec.extractLsb
                                                                                               v__212
                                                                                               6 0)
                                                                                             (0b0001111 : (BitVec 7)))))
                                                                                    then
                                                                                      let imm : (BitVec 12) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__212 31
                                                                                          20)
                                                                                      let mapping127_ : (BitVec 5) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__212 11
                                                                                          7)
                                                                                      let mapping126_ : (BitVec 5) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__212 19
                                                                                          15)
                                                                                      let imm : (BitVec 12) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          v__212 31
                                                                                          20)
                                                                                      match ((encdec_reg_backwards
                                                                                        mapping126_), (encdec_reg_backwards
                                                                                        mapping127_)) with
                                                                                      | (rs, rd) =>
                                                                                        if (Bool.or
                                                                                             (bne
                                                                                               imm
                                                                                               (0x000 : (BitVec 12)))
                                                                                             (Bool.or
                                                                                               (bne
                                                                                                 rs
                                                                                                 zreg)
                                                                                               (bne
                                                                                                 rd
                                                                                                 zreg)))
                                                                                        then
                                                                                          (some true)
                                                                                        else none
                                                                                    else none) with
                                                                                    | .some result =>
                                                                                      (pure result)
                                                                                    | none =>
                                                                                      match head_exp_ with
                                                                                      | s =>
                                                                                        (pure true)

noncomputable def encdec_compressed_forwards (arg_ : ast) : SailM (BitVec 16) := do
  match arg_ with
  | .C_NOP () =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b000 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((0b00000 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI4SPN (rd, v__412) =>
    if (← do
         let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__412 7 4)
         let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__412 7 4)
         let nz54 : (BitVec 2) := (Sail.BitVec.extractLsb v__412 3 2)
         let nz3 : (BitVec 1) := (Sail.BitVec.extractLsb v__412 1 1)
         let nz2 : (BitVec 1) := (Sail.BitVec.extractLsb v__412 0 0)
         (pure (Bool.and (bne (nz96 ++ (nz54 ++ (nz3 ++ nz2))) (0x00 : (BitVec 8)))
             (← (extensionEnabled Ext_Zca)))))
    then
      let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__412 7 4)
      let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__412 7 4)
      let nz54 : (BitVec 2) := (Sail.BitVec.extractLsb v__412 3 2)
      let nz3 : (BitVec 1) := (Sail.BitVec.extractLsb v__412 1 1)
      let nz2 : (BitVec 1) := (Sail.BitVec.extractLsb v__412 0 0)
      (pure ((0b000 : (BitVec 3)) ++ ((nz54 : (BitVec 2)) ++ ((nz96 : (BitVec 4)) ++ ((nz2 : (BitVec 1)) ++ ((nz3 : (BitVec 1)) ++ ((encdec_creg_forwards
                      rd) ++ (0b00 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LW (v__413, rs1, rd) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__413 4 4)
      let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__413 4 4)
      let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__413 3 1)
      let ui2 : (BitVec 1) := (Sail.BitVec.extractLsb v__413 0 0)
      (pure ((0b010 : (BitVec 3)) ++ ((ui53 : (BitVec 3)) ++ ((encdec_creg_forwards rs1) ++ ((ui2 : (BitVec 1)) ++ ((ui6 : (BitVec 1)) ++ ((encdec_creg_forwards
                      rd) ++ (0b00 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LD (v__414, rs1, rd) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__414 4 3)
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__414 4 3)
      let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__414 2 0)
      (pure ((0b011 : (BitVec 3)) ++ ((ui53 : (BitVec 3)) ++ ((encdec_creg_forwards rs1) ++ ((ui76 : (BitVec 2)) ++ ((encdec_creg_forwards
                    rd) ++ (0b00 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SW (v__415, rs1, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__415 4 4)
      let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__415 4 4)
      let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__415 3 1)
      let ui2 : (BitVec 1) := (Sail.BitVec.extractLsb v__415 0 0)
      (pure ((0b110 : (BitVec 3)) ++ ((ui53 : (BitVec 3)) ++ ((encdec_creg_forwards rs1) ++ ((ui2 : (BitVec 1)) ++ ((ui6 : (BitVec 1)) ++ ((encdec_creg_forwards
                      rs2) ++ (0b00 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SD (v__416, rs1, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__416 4 3)
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__416 4 3)
      let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__416 2 0)
      (pure ((0b111 : (BitVec 3)) ++ ((ui53 : (BitVec 3)) ++ ((encdec_creg_forwards rs1) ++ ((ui76 : (BitVec 2)) ++ ((encdec_creg_forwards
                    rs2) ++ (0b00 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI (v__417, rsd) =>
    if (← do
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__417 5 5)
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__417 5 5)
         let nzi40 : (BitVec 5) := (Sail.BitVec.extractLsb v__417 4 0)
         (pure (Bool.and (bne (nzi5 ++ nzi40) (0b000000 : (BitVec 6)))
             (Bool.and (bne rsd zreg) (← (extensionEnabled Ext_Zca))))))
    then
      let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__417 5 5)
      let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__417 5 5)
      let nzi40 : (BitVec 5) := (Sail.BitVec.extractLsb v__417 4 0)
      (pure ((0b000 : (BitVec 3)) ++ ((nzi5 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((nzi40 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JAL v__418 =>
    if (Bool.and (BEq.beq xlen 32) (← (extensionEnabled Ext_Zca)))
    then
      let i11 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 10 10)
      let i98 : (BitVec 2) := (Sail.BitVec.extractLsb v__418 8 7)
      let i7 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 6 6)
      let i6 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 5 5)
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 4 4)
      let i4 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 3 3)
      let i31 : (BitVec 3) := (Sail.BitVec.extractLsb v__418 2 0)
      let i11 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 10 10)
      let i10 : (BitVec 1) := (Sail.BitVec.extractLsb v__418 9 9)
      (pure ((0b001 : (BitVec 3)) ++ ((i11 : (BitVec 1)) ++ ((i4 : (BitVec 1)) ++ ((i98 : (BitVec 2)) ++ ((i10 : (BitVec 1)) ++ ((i6 : (BitVec 1)) ++ ((i7 : (BitVec 1)) ++ ((i31 : (BitVec 3)) ++ ((i5 : (BitVec 1)) ++ (0b01 : (BitVec 2))))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDIW (v__419, rsd) =>
    if (Bool.and (bne rsd zreg) (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
    then
      let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__419 5 5)
      let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__419 5 5)
      let imm40 : (BitVec 5) := (Sail.BitVec.extractLsb v__419 4 0)
      (pure ((0b001 : (BitVec 3)) ++ ((imm5 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((imm40 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LI (v__420, rd) =>
    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
    then
      let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__420 5 5)
      let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__420 5 5)
      let imm40 : (BitVec 5) := (Sail.BitVec.extractLsb v__420 4 0)
      (pure ((0b010 : (BitVec 3)) ++ ((imm5 : (BitVec 1)) ++ ((encdec_reg_forwards rd) ++ ((imm40 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI16SP v__421 =>
    if (← do
         let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 5 5)
         let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 5 5)
         let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__421 4 3)
         let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 2 2)
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 1 1)
         let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 0 0)
         (pure (Bool.and (bne (nzi9 ++ (nzi87 ++ (nzi6 ++ (nzi5 ++ nzi4)))) (0b000000 : (BitVec 6)))
             (← (extensionEnabled Ext_Zca)))))
    then
      let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 5 5)
      let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 5 5)
      let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__421 4 3)
      let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 2 2)
      let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 1 1)
      let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__421 0 0)
      (pure ((0b011 : (BitVec 3)) ++ ((nzi9 : (BitVec 1)) ++ ((0b00010 : (BitVec 5)) ++ ((nzi4 : (BitVec 1)) ++ ((nzi6 : (BitVec 1)) ++ ((nzi87 : (BitVec 2)) ++ ((nzi5 : (BitVec 1)) ++ (0b01 : (BitVec 2))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LUI (v__422, rd) =>
    if (← do
         let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__422 5 5)
         let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__422 5 5)
         let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__422 4 0)
         (pure (Bool.and (bne rd zreg)
             (Bool.and (bne rd sp)
               (Bool.and (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6)))
                 (← (extensionEnabled Ext_Zca)))))))
    then
      let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__422 5 5)
      let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__422 5 5)
      let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__422 4 0)
      (pure ((0b011 : (BitVec 3)) ++ ((imm17 : (BitVec 1)) ++ ((encdec_reg_forwards rd) ++ ((imm1612 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRLI (v__423, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__423 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__423 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__423 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
               (← (extensionEnabled Ext_Zca))))))
    then
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__423 5 5)
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__423 5 5)
      let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__423 4 0)
      (pure ((0b100 : (BitVec 3)) ++ ((nzui5 : (BitVec 1)) ++ ((0b00 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((nzui40 : (BitVec 5)) ++ (0b01 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRAI (v__424, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__424 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__424 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__424 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
               (← (extensionEnabled Ext_Zca))))))
    then
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__424 5 5)
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__424 5 5)
      let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__424 4 0)
      (pure ((0b100 : (BitVec 3)) ++ ((nzui5 : (BitVec 1)) ++ ((0b01 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((nzui40 : (BitVec 5)) ++ (0b01 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ANDI (v__425, rsd) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__425 5 5)
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__425 5 5)
      let i40 : (BitVec 5) := (Sail.BitVec.extractLsb v__425 4 0)
      (pure ((0b100 : (BitVec 3)) ++ ((i5 : (BitVec 1)) ++ ((0b10 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((i40 : (BitVec 5)) ++ (0b01 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SUB (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b00 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_XOR (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b01 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_OR (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b10 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_AND (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SUBW (rsd, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b00 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDW (rsd, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((0b11 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rsd) ++ ((0b01 : (BitVec 2)) ++ ((encdec_creg_forwards rs2) ++ (0b01 : (BitVec 2)))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_J v__426 =>
    if (← (extensionEnabled Ext_Zca))
    then
      let i11 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 10 10)
      let i98 : (BitVec 2) := (Sail.BitVec.extractLsb v__426 8 7)
      let i7 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 6 6)
      let i6 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 5 5)
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 4 4)
      let i4 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 3 3)
      let i31 : (BitVec 3) := (Sail.BitVec.extractLsb v__426 2 0)
      let i11 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 10 10)
      let i10 : (BitVec 1) := (Sail.BitVec.extractLsb v__426 9 9)
      (pure ((0b101 : (BitVec 3)) ++ ((i11 : (BitVec 1)) ++ ((i4 : (BitVec 1)) ++ ((i98 : (BitVec 2)) ++ ((i10 : (BitVec 1)) ++ ((i6 : (BitVec 1)) ++ ((i7 : (BitVec 1)) ++ ((i31 : (BitVec 3)) ++ ((i5 : (BitVec 1)) ++ (0b01 : (BitVec 2))))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_BEQZ (v__427, rs) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let i8 : (BitVec 1) := (Sail.BitVec.extractLsb v__427 7 7)
      let i8 : (BitVec 1) := (Sail.BitVec.extractLsb v__427 7 7)
      let i76 : (BitVec 2) := (Sail.BitVec.extractLsb v__427 6 5)
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__427 4 4)
      let i43 : (BitVec 2) := (Sail.BitVec.extractLsb v__427 3 2)
      let i21 : (BitVec 2) := (Sail.BitVec.extractLsb v__427 1 0)
      (pure ((0b110 : (BitVec 3)) ++ ((i8 : (BitVec 1)) ++ ((i43 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rs) ++ ((i76 : (BitVec 2)) ++ ((i21 : (BitVec 2)) ++ ((i5 : (BitVec 1)) ++ (0b01 : (BitVec 2))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_BNEZ (v__428, rs) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let i8 : (BitVec 1) := (Sail.BitVec.extractLsb v__428 7 7)
      let i8 : (BitVec 1) := (Sail.BitVec.extractLsb v__428 7 7)
      let i76 : (BitVec 2) := (Sail.BitVec.extractLsb v__428 6 5)
      let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__428 4 4)
      let i43 : (BitVec 2) := (Sail.BitVec.extractLsb v__428 3 2)
      let i21 : (BitVec 2) := (Sail.BitVec.extractLsb v__428 1 0)
      (pure ((0b111 : (BitVec 3)) ++ ((i8 : (BitVec 1)) ++ ((i43 : (BitVec 2)) ++ ((encdec_creg_forwards
                  rs) ++ ((i76 : (BitVec 2)) ++ ((i21 : (BitVec 2)) ++ ((i5 : (BitVec 1)) ++ (0b01 : (BitVec 2))))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SLLI (v__429, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__429 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__429 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__429 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (bne rsd zreg)
               (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                 (← (extensionEnabled Ext_Zca)))))))
    then
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__429 5 5)
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__429 5 5)
      let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__429 4 0)
      (pure ((0b000 : (BitVec 3)) ++ ((nzui5 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((nzui40 : (BitVec 5)) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LWSP (v__430, rd) =>
    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
    then
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__430 5 4)
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__430 5 4)
      let ui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__430 3 3)
      let ui42 : (BitVec 3) := (Sail.BitVec.extractLsb v__430 2 0)
      (pure ((0b010 : (BitVec 3)) ++ ((ui5 : (BitVec 1)) ++ ((encdec_reg_forwards rd) ++ ((ui42 : (BitVec 3)) ++ ((ui76 : (BitVec 2)) ++ (0b10 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LDSP (v__431, rd) =>
    if (Bool.and (bne rd zreg) (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
    then
      let ui86 : (BitVec 3) := (Sail.BitVec.extractLsb v__431 5 3)
      let ui86 : (BitVec 3) := (Sail.BitVec.extractLsb v__431 5 3)
      let ui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__431 2 2)
      let ui43 : (BitVec 2) := (Sail.BitVec.extractLsb v__431 1 0)
      (pure ((0b011 : (BitVec 3)) ++ ((ui5 : (BitVec 1)) ++ ((encdec_reg_forwards rd) ++ ((ui43 : (BitVec 2)) ++ ((ui86 : (BitVec 3)) ++ (0b10 : (BitVec 2))))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SWSP (v__432, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__432 5 4)
      let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__432 5 4)
      let ui52 : (BitVec 4) := (Sail.BitVec.extractLsb v__432 3 0)
      (pure ((0b110 : (BitVec 3)) ++ ((ui52 : (BitVec 4)) ++ ((ui76 : (BitVec 2)) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SDSP (v__433, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then
      let ui86 : (BitVec 3) := (Sail.BitVec.extractLsb v__433 5 3)
      let ui86 : (BitVec 3) := (Sail.BitVec.extractLsb v__433 5 3)
      let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__433 2 0)
      (pure ((0b111 : (BitVec 3)) ++ ((ui53 : (BitVec 3)) ++ ((ui86 : (BitVec 3)) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JR rs1 =>
    if (Bool.and (bne rs1 zreg) (← (extensionEnabled Ext_Zca)))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((encdec_reg_forwards rs1) ++ ((0b00000 : (BitVec 5)) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_JALR rs1 =>
    if (Bool.and (bne rs1 zreg) (← (extensionEnabled Ext_Zca)))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((encdec_reg_forwards rs1) ++ ((0b00000 : (BitVec 5)) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_MV (rd, rs2) =>
    if (Bool.and (bne rd zreg) (Bool.and (bne rs2 zreg) (← (extensionEnabled Ext_Zca))))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((encdec_reg_forwards rd) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_EBREAK () =>
    if (← (extensionEnabled Ext_Zca))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((0b00000 : (BitVec 5)) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADD (rsd, rs2) =>
    if (Bool.and (bne rsd zreg) (Bool.and (bne rs2 zreg) (← (extensionEnabled Ext_Zca))))
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_NOP_HINT v__434 =>
    if (let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__434 5 5)
       let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__434 5 5)
       let im40 : (BitVec 5) := (Sail.BitVec.extractLsb v__434 4 0)
       (bne (im5 ++ im40) (0b000000 : (BitVec 6))))
    then
      let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__434 5 5)
      let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__434 5 5)
      let im40 : (BitVec 5) := (Sail.BitVec.extractLsb v__434 4 0)
      (pure ((0b000 : (BitVec 3)) ++ ((im5 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((im40 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADDI_HINT rsd =>
    if (bne rsd zreg)
    then
      (pure ((0b000 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((0b00000 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_LI_HINT v__435 =>
    let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__435 5 5)
    let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__435 5 5)
    let imm40 : (BitVec 5) := (Sail.BitVec.extractLsb v__435 4 0)
    (pure ((0b010 : (BitVec 3)) ++ ((imm5 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((imm40 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
  | .C_LUI_HINT v__436 =>
    if (let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__436 5 5)
       let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__436 5 5)
       let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__436 4 0)
       (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6))))
    then
      let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__436 5 5)
      let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__436 5 5)
      let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__436 4 0)
      (pure ((0b011 : (BitVec 3)) ++ ((imm17 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((imm1612 : (BitVec 5)) ++ (0b01 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_MV_HINT rs2 =>
    if (bne rs2 zreg)
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_ADD_HINT rs2 =>
    if (bne rs2 zreg)
    then
      (pure ((0b100 : (BitVec 3)) ++ ((0b1 : (BitVec 1)) ++ ((0b00000 : (BitVec 5)) ++ ((encdec_reg_forwards
                  rs2) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SLLI_HINT (v__437, rsd) =>
    if (let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__437 5 5)
       let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__437 5 5)
       let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__437 4 0)
       (Bool.and (Bool.or (BEq.beq (nzui5 ++ nzui40) (0b000000 : (BitVec 6))) (BEq.beq rsd zreg))
         (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))))
    then
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__437 5 5)
      let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__437 5 5)
      let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__437 4 0)
      (pure ((0b000 : (BitVec 3)) ++ ((nzui5 : (BitVec 1)) ++ ((encdec_reg_forwards rsd) ++ ((nzui40 : (BitVec 5)) ++ (0b10 : (BitVec 2)))))))
    else
      assert false "Pattern match failure at unknown location"
      throw Error.Exit
  | .C_SRLI_HINT rsd =>
    (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b00 : (BitVec 2)) ++ ((encdec_creg_forwards
                rsd) ++ ((0b00000 : (BitVec 5)) ++ (0b01 : (BitVec 2))))))))
  | .C_SRAI_HINT rsd =>
    (pure ((0b100 : (BitVec 3)) ++ ((0b0 : (BitVec 1)) ++ ((0b01 : (BitVec 2)) ++ ((encdec_creg_forwards
                rsd) ++ ((0b00000 : (BitVec 5)) ++ (0b01 : (BitVec 2))))))))
  | .C_ILLEGAL s => (pure s)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

noncomputable def encdec_compressed_backwards (arg_ : (BitVec 16)) : SailM ast := do
  let head_exp_ := arg_
  match (← do
    let v__607 := head_exp_
    if (Bool.and (← (extensionEnabled Ext_Zca)) (BEq.beq v__607 (0x0001 : (BitVec 16))))
    then (pure (some (C_NOP ())))
    else
      if (Bool.and
           (let mapping0_ : (BitVec 3) := (Sail.BitVec.extractLsb v__607 4 2)
           (encdec_creg_backwards_matches mapping0_))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__607 15 13) (0b000 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__607 1 0) (0b00 : (BitVec 2)))))
      then
        let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__607 10 7)
        let nz54 : (BitVec 2) := (Sail.BitVec.extractLsb v__607 12 11)
        let nz3 : (BitVec 1) := (Sail.BitVec.extractLsb v__607 5 5)
        let nz2 : (BitVec 1) := (Sail.BitVec.extractLsb v__607 6 6)
        let mapping0_ : (BitVec 3) := (Sail.BitVec.extractLsb v__607 4 2)
        let rd := (encdec_creg_backwards mapping0_)
        if (Bool.and (bne (nz96 ++ (nz54 ++ (nz3 ++ nz2))) (0x00 : (BitVec 8)))
             (← (extensionEnabled Ext_Zca)))
        then
          (pure (some
              (C_ADDI4SPN
                (rd, ((nz96 : (BitVec 4)) ++ ((nz54 : (BitVec 2)) ++ ((nz3 : (BitVec 1)) ++ (nz2 : (BitVec 1)))))))))
        else (pure none)
      else (pure none)) with
  | .some result => (pure result)
  | none =>
    match (← do
      let v__604 := head_exp_
      if (Bool.and
           (let mapping2_ : (BitVec 3) := (Sail.BitVec.extractLsb v__604 4 2)
           let mapping1_ : (BitVec 3) := (Sail.BitVec.extractLsb v__604 9 7)
           (Bool.and (encdec_creg_backwards_matches mapping1_)
             (encdec_creg_backwards_matches mapping2_)))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__604 15 13) (0b010 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__604 1 0) (0b00 : (BitVec 2)))))
      then
        let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__604 5 5)
        let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__604 12 10)
        let ui2 : (BitVec 1) := (Sail.BitVec.extractLsb v__604 6 6)
        let mapping2_ : (BitVec 3) := (Sail.BitVec.extractLsb v__604 4 2)
        let mapping1_ : (BitVec 3) := (Sail.BitVec.extractLsb v__604 9 7)
        match ((encdec_creg_backwards mapping1_), (encdec_creg_backwards mapping2_)) with
        | (rs1, rd) =>
          if (← (extensionEnabled Ext_Zca))
          then
            (pure (some
                (C_LW (((ui6 : (BitVec 1)) ++ ((ui53 : (BitVec 3)) ++ (ui2 : (BitVec 1)))), rs1, rd))))
          else (pure none)
      else (pure none)) with
    | .some result => (pure result)
    | none =>
      match (← do
        let v__601 := head_exp_
        if (Bool.and
             (let mapping4_ : (BitVec 3) := (Sail.BitVec.extractLsb v__601 4 2)
             let mapping3_ : (BitVec 3) := (Sail.BitVec.extractLsb v__601 9 7)
             (Bool.and (encdec_creg_backwards_matches mapping3_)
               (encdec_creg_backwards_matches mapping4_)))
             (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__601 15 13) (0b011 : (BitVec 3)))
               (BEq.beq (Sail.BitVec.extractLsb v__601 1 0) (0b00 : (BitVec 2)))))
        then
          let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__601 6 5)
          let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__601 12 10)
          let mapping4_ : (BitVec 3) := (Sail.BitVec.extractLsb v__601 4 2)
          let mapping3_ : (BitVec 3) := (Sail.BitVec.extractLsb v__601 9 7)
          match ((encdec_creg_backwards mapping3_), (encdec_creg_backwards mapping4_)) with
          | (rs1, rd) =>
            if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
            then (pure (some (C_LD (((ui76 : (BitVec 2)) ++ (ui53 : (BitVec 3))), rs1, rd))))
            else (pure none)
        else (pure none)) with
      | .some result => (pure result)
      | none =>
        match (← do
          let v__598 := head_exp_
          if (Bool.and
               (let mapping6_ : (BitVec 3) := (Sail.BitVec.extractLsb v__598 4 2)
               let mapping5_ : (BitVec 3) := (Sail.BitVec.extractLsb v__598 9 7)
               (Bool.and (encdec_creg_backwards_matches mapping5_)
                 (encdec_creg_backwards_matches mapping6_)))
               (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__598 15 13) (0b110 : (BitVec 3)))
                 (BEq.beq (Sail.BitVec.extractLsb v__598 1 0) (0b00 : (BitVec 2)))))
          then
            let ui6 : (BitVec 1) := (Sail.BitVec.extractLsb v__598 5 5)
            let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__598 12 10)
            let ui2 : (BitVec 1) := (Sail.BitVec.extractLsb v__598 6 6)
            let mapping6_ : (BitVec 3) := (Sail.BitVec.extractLsb v__598 4 2)
            let mapping5_ : (BitVec 3) := (Sail.BitVec.extractLsb v__598 9 7)
            match ((encdec_creg_backwards mapping5_), (encdec_creg_backwards mapping6_)) with
            | (rs1, rs2) =>
              if (← (extensionEnabled Ext_Zca))
              then
                (pure (some
                    (C_SW
                      (((ui6 : (BitVec 1)) ++ ((ui53 : (BitVec 3)) ++ (ui2 : (BitVec 1)))), rs1, rs2))))
              else (pure none)
          else (pure none)) with
        | .some result => (pure result)
        | none =>
          match (← do
            let v__595 := head_exp_
            if (Bool.and
                 (let mapping8_ : (BitVec 3) := (Sail.BitVec.extractLsb v__595 4 2)
                 let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__595 9 7)
                 (Bool.and (encdec_creg_backwards_matches mapping7_)
                   (encdec_creg_backwards_matches mapping8_)))
                 (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__595 15 13) (0b111 : (BitVec 3)))
                   (BEq.beq (Sail.BitVec.extractLsb v__595 1 0) (0b00 : (BitVec 2)))))
            then
              let ui76 : (BitVec 2) := (Sail.BitVec.extractLsb v__595 6 5)
              let ui53 : (BitVec 3) := (Sail.BitVec.extractLsb v__595 12 10)
              let mapping8_ : (BitVec 3) := (Sail.BitVec.extractLsb v__595 4 2)
              let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__595 9 7)
              match ((encdec_creg_backwards mapping7_), (encdec_creg_backwards mapping8_)) with
              | (rs1, rs2) =>
                if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
                then (pure (some (C_SD (((ui76 : (BitVec 2)) ++ (ui53 : (BitVec 3))), rs1, rs2))))
                else (pure none)
            else (pure none)) with
          | .some result => (pure result)
          | none =>
            match (← do
              let v__592 := head_exp_
              if (Bool.and
                   (let mapping9_ : (BitVec 5) := (Sail.BitVec.extractLsb v__592 11 7)
                   (encdec_reg_backwards_matches mapping9_))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__592 15 13) (0b000 : (BitVec 3)))
                     (BEq.beq (Sail.BitVec.extractLsb v__592 1 0) (0b01 : (BitVec 2)))))
              then
                let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__592 12 12)
                let nzi40 : (BitVec 5) := (Sail.BitVec.extractLsb v__592 6 2)
                let mapping9_ : (BitVec 5) := (Sail.BitVec.extractLsb v__592 11 7)
                let rsd := (encdec_reg_backwards mapping9_)
                if (Bool.and (bne (nzi5 ++ nzi40) (0b000000 : (BitVec 6)))
                     (Bool.and (bne rsd zreg) (← (extensionEnabled Ext_Zca))))
                then (pure (some (C_ADDI (((nzi5 : (BitVec 1)) ++ (nzi40 : (BitVec 5))), rsd))))
                else (pure none)
              else (pure none)) with
            | .some result => (pure result)
            | none =>
              match (← do
                let v__586 := head_exp_
                if (Bool.and (Bool.and (BEq.beq xlen 32) (← (extensionEnabled Ext_Zca)))
                     (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__586 15 13) (0b001 : (BitVec 3)))
                       (BEq.beq (Sail.BitVec.extractLsb v__586 1 0) (0b01 : (BitVec 2)))))
                then
                  let i98 : (BitVec 2) := (Sail.BitVec.extractLsb v__586 10 9)
                  let i7 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 6 6)
                  let i6 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 7 7)
                  let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 2 2)
                  let i4 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 11 11)
                  let i31 : (BitVec 3) := (Sail.BitVec.extractLsb v__586 5 3)
                  let i11 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 12 12)
                  let i10 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 8 8)
                  (pure (some
                      (C_JAL
                        ((i11 : (BitVec 1)) ++ ((i10 : (BitVec 1)) ++ ((i98 : (BitVec 2)) ++ ((i7 : (BitVec 1)) ++ ((i6 : (BitVec 1)) ++ ((i5 : (BitVec 1)) ++ ((i4 : (BitVec 1)) ++ (i31 : (BitVec 3))))))))))))
                else
                  if (Bool.and
                       (let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__586 11 7)
                       (encdec_reg_backwards_matches mapping10_))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__586 15 13) (0b001 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__586 1 0) (0b01 : (BitVec 2)))))
                  then
                    let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__586 11 7)
                    let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__586 12 12)
                    let imm40 : (BitVec 5) := (Sail.BitVec.extractLsb v__586 6 2)
                    let rsd := (encdec_reg_backwards mapping10_)
                    if (Bool.and (bne rsd zreg)
                         (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
                    then
                      (pure (some (C_ADDIW (((imm5 : (BitVec 1)) ++ (imm40 : (BitVec 5))), rsd))))
                    else (pure none)
                  else (pure none)) with
              | .some result => (pure result)
              | none =>
                match (← do
                  let v__583 := head_exp_
                  if (Bool.and
                       (let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__583 11 7)
                       (encdec_reg_backwards_matches mapping11_))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__583 15 13) (0b010 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__583 1 0) (0b01 : (BitVec 2)))))
                  then
                    let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__583 11 7)
                    let imm5 : (BitVec 1) := (Sail.BitVec.extractLsb v__583 12 12)
                    let imm40 : (BitVec 5) := (Sail.BitVec.extractLsb v__583 6 2)
                    let rd := (encdec_reg_backwards mapping11_)
                    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
                    then (pure (some (C_LI (((imm5 : (BitVec 1)) ++ (imm40 : (BitVec 5))), rd))))
                    else (pure none)
                  else (pure none)) with
                | .some result => (pure result)
                | none =>
                  match (← do
                    let v__576 := head_exp_
                    if (Bool.and
                         (← do
                           let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 12 12)
                           let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__576 4 3)
                           let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 5 5)
                           let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 2 2)
                           let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 6 6)
                           (pure (Bool.and
                               (bne (nzi9 ++ (nzi87 ++ (nzi6 ++ (nzi5 ++ nzi4))))
                                 (0b000000 : (BitVec 6))) (← (extensionEnabled Ext_Zca)))))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__576 15 13) (0b011 : (BitVec 3)))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__576 11 7) (0b00010 : (BitVec 5)))
                             (BEq.beq (Sail.BitVec.extractLsb v__576 1 0) (0b01 : (BitVec 2))))))
                    then
                      let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 12 12)
                      let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__576 4 3)
                      let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 5 5)
                      let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 2 2)
                      let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 6 6)
                      (pure (some
                          (C_ADDI16SP
                            ((nzi9 : (BitVec 1)) ++ ((nzi87 : (BitVec 2)) ++ ((nzi6 : (BitVec 1)) ++ ((nzi5 : (BitVec 1)) ++ (nzi4 : (BitVec 1)))))))))
                    else
                      if (Bool.and
                           (let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__576 11 7)
                           (encdec_reg_backwards_matches mapping12_))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__576 15 13) (0b011 : (BitVec 3)))
                             (BEq.beq (Sail.BitVec.extractLsb v__576 1 0) (0b01 : (BitVec 2)))))
                      then
                        let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__576 11 7)
                        let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__576 12 12)
                        let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__576 6 2)
                        let rd := (encdec_reg_backwards mapping12_)
                        if (Bool.and (bne rd zreg)
                             (Bool.and (bne rd sp)
                               (Bool.and (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6)))
                                 (← (extensionEnabled Ext_Zca)))))
                        then
                          (pure (some (C_LUI (((imm17 : (BitVec 1)) ++ (imm1612 : (BitVec 5))), rd))))
                        else (pure none)
                      else (pure none)) with
                  | .some result => (pure result)
                  | none =>
                    match (← do
                      let v__572 := head_exp_
                      if (Bool.and
                           (let mapping13_ : (BitVec 3) := (Sail.BitVec.extractLsb v__572 9 7)
                           (encdec_creg_backwards_matches mapping13_))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__572 15 13) (0b100 : (BitVec 3)))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__572 11 10) (0b00 : (BitVec 2)))
                               (BEq.beq (Sail.BitVec.extractLsb v__572 1 0) (0b01 : (BitVec 2))))))
                      then
                        let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__572 12 12)
                        let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__572 6 2)
                        let mapping13_ : (BitVec 3) := (Sail.BitVec.extractLsb v__572 9 7)
                        let rsd := (encdec_creg_backwards mapping13_)
                        if (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                             (Bool.and
                               (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                               (← (extensionEnabled Ext_Zca))))
                        then
                          (pure (some
                              (C_SRLI (((nzui5 : (BitVec 1)) ++ (nzui40 : (BitVec 5))), rsd))))
                        else (pure none)
                      else (pure none)) with
                    | .some result => (pure result)
                    | none =>
                      match (← do
                        let v__568 := head_exp_
                        if (Bool.and
                             (let mapping14_ : (BitVec 3) := (Sail.BitVec.extractLsb v__568 9 7)
                             (encdec_creg_backwards_matches mapping14_))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__568 15 13) (0b100 : (BitVec 3)))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__568 11 10) (0b01 : (BitVec 2)))
                                 (BEq.beq (Sail.BitVec.extractLsb v__568 1 0) (0b01 : (BitVec 2))))))
                        then
                          let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__568 12 12)
                          let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__568 6 2)
                          let mapping14_ : (BitVec 3) := (Sail.BitVec.extractLsb v__568 9 7)
                          let rsd := (encdec_creg_backwards mapping14_)
                          if (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                               (Bool.and
                                 (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                                 (← (extensionEnabled Ext_Zca))))
                          then
                            (pure (some
                                (C_SRAI (((nzui5 : (BitVec 1)) ++ (nzui40 : (BitVec 5))), rsd))))
                          else (pure none)
                        else (pure none)) with
                      | .some result => (pure result)
                      | none =>
                        match (← do
                          let v__564 := head_exp_
                          if (Bool.and
                               (let mapping15_ : (BitVec 3) := (Sail.BitVec.extractLsb v__564 9 7)
                               (encdec_creg_backwards_matches mapping15_))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__564 15 13) (0b100 : (BitVec 3)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__564 11 10)
                                     (0b10 : (BitVec 2)))
                                   (BEq.beq (Sail.BitVec.extractLsb v__564 1 0) (0b01 : (BitVec 2))))))
                          then
                            let mapping15_ : (BitVec 3) := (Sail.BitVec.extractLsb v__564 9 7)
                            let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__564 12 12)
                            let i40 : (BitVec 5) := (Sail.BitVec.extractLsb v__564 6 2)
                            let rsd := (encdec_creg_backwards mapping15_)
                            if (← (extensionEnabled Ext_Zca))
                            then
                              (pure (some (C_ANDI (((i5 : (BitVec 1)) ++ (i40 : (BitVec 5))), rsd))))
                            else (pure none)
                          else (pure none)) with
                        | .some result => (pure result)
                        | none =>
                          match (← do
                            let v__558 := head_exp_
                            if (Bool.and
                                 (let mapping17_ : (BitVec 3) := (Sail.BitVec.extractLsb v__558 4 2)
                                 let mapping16_ : (BitVec 3) := (Sail.BitVec.extractLsb v__558 9 7)
                                 (Bool.and (encdec_creg_backwards_matches mapping16_)
                                   (encdec_creg_backwards_matches mapping17_)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__558 15 10)
                                     (0b100011 : (BitVec 6)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__558 6 5)
                                       (0b00 : (BitVec 2)))
                                     (BEq.beq (Sail.BitVec.extractLsb v__558 1 0)
                                       (0b01 : (BitVec 2))))))
                            then
                              let mapping17_ : (BitVec 3) := (Sail.BitVec.extractLsb v__558 4 2)
                              let mapping16_ : (BitVec 3) := (Sail.BitVec.extractLsb v__558 9 7)
                              match ((encdec_creg_backwards mapping16_), (encdec_creg_backwards
                                mapping17_)) with
                              | (rsd, rs2) =>
                                if (← (extensionEnabled Ext_Zca))
                                then (pure (some (C_SUB (rsd, rs2))))
                                else (pure none)
                            else (pure none)) with
                          | .some result => (pure result)
                          | none =>
                            match (← do
                              let v__552 := head_exp_
                              if (Bool.and
                                   (let mapping19_ : (BitVec 3) :=
                                     (Sail.BitVec.extractLsb v__552 4 2)
                                   let mapping18_ : (BitVec 3) :=
                                     (Sail.BitVec.extractLsb v__552 9 7)
                                   (Bool.and (encdec_creg_backwards_matches mapping18_)
                                     (encdec_creg_backwards_matches mapping19_)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__552 15 10)
                                       (0b100011 : (BitVec 6)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__552 6 5)
                                         (0b01 : (BitVec 2)))
                                       (BEq.beq (Sail.BitVec.extractLsb v__552 1 0)
                                         (0b01 : (BitVec 2))))))
                              then
                                let mapping19_ : (BitVec 3) := (Sail.BitVec.extractLsb v__552 4 2)
                                let mapping18_ : (BitVec 3) := (Sail.BitVec.extractLsb v__552 9 7)
                                match ((encdec_creg_backwards mapping18_), (encdec_creg_backwards
                                  mapping19_)) with
                                | (rsd, rs2) =>
                                  if (← (extensionEnabled Ext_Zca))
                                  then (pure (some (C_XOR (rsd, rs2))))
                                  else (pure none)
                              else (pure none)) with
                            | .some result => (pure result)
                            | none =>
                              match (← do
                                let v__546 := head_exp_
                                if (Bool.and
                                     (let mapping21_ : (BitVec 3) :=
                                       (Sail.BitVec.extractLsb v__546 4 2)
                                     let mapping20_ : (BitVec 3) :=
                                       (Sail.BitVec.extractLsb v__546 9 7)
                                     (Bool.and (encdec_creg_backwards_matches mapping20_)
                                       (encdec_creg_backwards_matches mapping21_)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__546 15 10)
                                         (0b100011 : (BitVec 6)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__546 6 5)
                                           (0b10 : (BitVec 2)))
                                         (BEq.beq (Sail.BitVec.extractLsb v__546 1 0)
                                           (0b01 : (BitVec 2))))))
                                then
                                  let mapping21_ : (BitVec 3) := (Sail.BitVec.extractLsb v__546 4 2)
                                  let mapping20_ : (BitVec 3) := (Sail.BitVec.extractLsb v__546 9 7)
                                  match ((encdec_creg_backwards mapping20_), (encdec_creg_backwards
                                    mapping21_)) with
                                  | (rsd, rs2) =>
                                    if (← (extensionEnabled Ext_Zca))
                                    then (pure (some (C_OR (rsd, rs2))))
                                    else (pure none)
                                else (pure none)) with
                              | .some result => (pure result)
                              | none =>
                                match (← do
                                  let v__540 := head_exp_
                                  if (Bool.and
                                       (let mapping23_ : (BitVec 3) :=
                                         (Sail.BitVec.extractLsb v__540 4 2)
                                       let mapping22_ : (BitVec 3) :=
                                         (Sail.BitVec.extractLsb v__540 9 7)
                                       (Bool.and (encdec_creg_backwards_matches mapping22_)
                                         (encdec_creg_backwards_matches mapping23_)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__540 15 10)
                                           (0b100011 : (BitVec 6)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__540 6 5)
                                             (0b11 : (BitVec 2)))
                                           (BEq.beq (Sail.BitVec.extractLsb v__540 1 0)
                                             (0b01 : (BitVec 2))))))
                                  then
                                    let mapping23_ : (BitVec 3) :=
                                      (Sail.BitVec.extractLsb v__540 4 2)
                                    let mapping22_ : (BitVec 3) :=
                                      (Sail.BitVec.extractLsb v__540 9 7)
                                    match ((encdec_creg_backwards mapping22_), (encdec_creg_backwards
                                      mapping23_)) with
                                    | (rsd, rs2) =>
                                      if (← (extensionEnabled Ext_Zca))
                                      then (pure (some (C_AND (rsd, rs2))))
                                      else (pure none)
                                  else (pure none)) with
                                | .some result => (pure result)
                                | none =>
                                  match (← do
                                    let v__534 := head_exp_
                                    if (Bool.and
                                         (let mapping25_ : (BitVec 3) :=
                                           (Sail.BitVec.extractLsb v__534 4 2)
                                         let mapping24_ : (BitVec 3) :=
                                           (Sail.BitVec.extractLsb v__534 9 7)
                                         (Bool.and (encdec_creg_backwards_matches mapping24_)
                                           (encdec_creg_backwards_matches mapping25_)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__534 15 10)
                                             (0b100111 : (BitVec 6)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__534 6 5)
                                               (0b00 : (BitVec 2)))
                                             (BEq.beq (Sail.BitVec.extractLsb v__534 1 0)
                                               (0b01 : (BitVec 2))))))
                                    then
                                      let mapping25_ : (BitVec 3) :=
                                        (Sail.BitVec.extractLsb v__534 4 2)
                                      let mapping24_ : (BitVec 3) :=
                                        (Sail.BitVec.extractLsb v__534 9 7)
                                      match ((encdec_creg_backwards mapping24_), (encdec_creg_backwards
                                        mapping25_)) with
                                      | (rsd, rs2) =>
                                        if (Bool.and (BEq.beq xlen 64)
                                             (← (extensionEnabled Ext_Zca)))
                                        then (pure (some (C_SUBW (rsd, rs2))))
                                        else (pure none)
                                    else (pure none)) with
                                  | .some result => (pure result)
                                  | none =>
                                    match (← do
                                      let v__528 := head_exp_
                                      if (Bool.and
                                           (let mapping27_ : (BitVec 3) :=
                                             (Sail.BitVec.extractLsb v__528 4 2)
                                           let mapping26_ : (BitVec 3) :=
                                             (Sail.BitVec.extractLsb v__528 9 7)
                                           (Bool.and (encdec_creg_backwards_matches mapping26_)
                                             (encdec_creg_backwards_matches mapping27_)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__528 15 10)
                                               (0b100111 : (BitVec 6)))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__528 6 5)
                                                 (0b01 : (BitVec 2)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__528 1 0)
                                                 (0b01 : (BitVec 2))))))
                                      then
                                        let mapping27_ : (BitVec 3) :=
                                          (Sail.BitVec.extractLsb v__528 4 2)
                                        let mapping26_ : (BitVec 3) :=
                                          (Sail.BitVec.extractLsb v__528 9 7)
                                        match ((encdec_creg_backwards mapping26_), (encdec_creg_backwards
                                          mapping27_)) with
                                        | (rsd, rs2) =>
                                          if (Bool.and (BEq.beq xlen 64)
                                               (← (extensionEnabled Ext_Zca)))
                                          then (pure (some (C_ADDW (rsd, rs2))))
                                          else (pure none)
                                      else (pure none)) with
                                    | .some result => (pure result)
                                    | none =>
                                      match (← do
                                        let v__522 := head_exp_
                                        if (Bool.and (← (extensionEnabled Ext_Zca))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__522 15 13)
                                                 (0b101 : (BitVec 3)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__522 1 0)
                                                 (0b01 : (BitVec 2)))))
                                        then
                                          let i98 : (BitVec 2) :=
                                            (Sail.BitVec.extractLsb v__522 10 9)
                                          let i7 : (BitVec 1) := (Sail.BitVec.extractLsb v__522 6 6)
                                          let i6 : (BitVec 1) := (Sail.BitVec.extractLsb v__522 7 7)
                                          let i5 : (BitVec 1) := (Sail.BitVec.extractLsb v__522 2 2)
                                          let i4 : (BitVec 1) :=
                                            (Sail.BitVec.extractLsb v__522 11 11)
                                          let i31 : (BitVec 3) :=
                                            (Sail.BitVec.extractLsb v__522 5 3)
                                          let i11 : (BitVec 1) :=
                                            (Sail.BitVec.extractLsb v__522 12 12)
                                          let i10 : (BitVec 1) :=
                                            (Sail.BitVec.extractLsb v__522 8 8)
                                          (pure (some
                                              (C_J
                                                ((i11 : (BitVec 1)) ++ ((i10 : (BitVec 1)) ++ ((i98 : (BitVec 2)) ++ ((i7 : (BitVec 1)) ++ ((i6 : (BitVec 1)) ++ ((i5 : (BitVec 1)) ++ ((i4 : (BitVec 1)) ++ (i31 : (BitVec 3))))))))))))
                                        else
                                          if (Bool.and
                                               (let mapping28_ : (BitVec 3) :=
                                                 (Sail.BitVec.extractLsb v__522 9 7)
                                               (encdec_creg_backwards_matches mapping28_))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__522 15 13)
                                                   (0b110 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__522 1 0)
                                                   (0b01 : (BitVec 2)))))
                                          then
                                            let mapping28_ : (BitVec 3) :=
                                              (Sail.BitVec.extractLsb v__522 9 7)
                                            let i8 : (BitVec 1) :=
                                              (Sail.BitVec.extractLsb v__522 12 12)
                                            let i76 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__522 6 5)
                                            let i5 : (BitVec 1) :=
                                              (Sail.BitVec.extractLsb v__522 2 2)
                                            let i43 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__522 11 10)
                                            let i21 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__522 4 3)
                                            let rs := (encdec_creg_backwards mapping28_)
                                            if (← (extensionEnabled Ext_Zca))
                                            then
                                              (pure (some
                                                  (C_BEQZ
                                                    (((i8 : (BitVec 1)) ++ ((i76 : (BitVec 2)) ++ ((i5 : (BitVec 1)) ++ ((i43 : (BitVec 2)) ++ (i21 : (BitVec 2)))))), rs))))
                                            else (pure none)
                                          else (pure none)) with
                                      | .some result => (pure result)
                                      | none =>
                                        match (← do
                                          let v__519 := head_exp_
                                          if (Bool.and
                                               (let mapping29_ : (BitVec 3) :=
                                                 (Sail.BitVec.extractLsb v__519 9 7)
                                               (encdec_creg_backwards_matches mapping29_))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__519 15 13)
                                                   (0b111 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__519 1 0)
                                                   (0b01 : (BitVec 2)))))
                                          then
                                            let mapping29_ : (BitVec 3) :=
                                              (Sail.BitVec.extractLsb v__519 9 7)
                                            let i8 : (BitVec 1) :=
                                              (Sail.BitVec.extractLsb v__519 12 12)
                                            let i76 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__519 6 5)
                                            let i5 : (BitVec 1) :=
                                              (Sail.BitVec.extractLsb v__519 2 2)
                                            let i43 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__519 11 10)
                                            let i21 : (BitVec 2) :=
                                              (Sail.BitVec.extractLsb v__519 4 3)
                                            let rs := (encdec_creg_backwards mapping29_)
                                            if (← (extensionEnabled Ext_Zca))
                                            then
                                              (pure (some
                                                  (C_BNEZ
                                                    (((i8 : (BitVec 1)) ++ ((i76 : (BitVec 2)) ++ ((i5 : (BitVec 1)) ++ ((i43 : (BitVec 2)) ++ (i21 : (BitVec 2)))))), rs))))
                                            else (pure none)
                                          else (pure none)) with
                                        | .some result => (pure result)
                                        | none =>
                                          match (← do
                                            let v__516 := head_exp_
                                            if (Bool.and
                                                 (let mapping30_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__516 11 7)
                                                 (encdec_reg_backwards_matches mapping30_))
                                                 (Bool.and
                                                   (BEq.beq (Sail.BitVec.extractLsb v__516 15 13)
                                                     (0b000 : (BitVec 3)))
                                                   (BEq.beq (Sail.BitVec.extractLsb v__516 1 0)
                                                     (0b10 : (BitVec 2)))))
                                            then
                                              let nzui5 : (BitVec 1) :=
                                                (Sail.BitVec.extractLsb v__516 12 12)
                                              let nzui40 : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__516 6 2)
                                              let mapping30_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__516 11 7)
                                              let rsd := (encdec_reg_backwards mapping30_)
                                              if (Bool.and
                                                   (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                                                   (Bool.and (bne rsd zreg)
                                                     (Bool.and
                                                       (Bool.or (BEq.beq xlen 64)
                                                         (BEq.beq nzui5 (0b0 : (BitVec 1))))
                                                       (← (extensionEnabled Ext_Zca)))))
                                              then
                                                (pure (some
                                                    (C_SLLI
                                                      (((nzui5 : (BitVec 1)) ++ (nzui40 : (BitVec 5))), rsd))))
                                              else (pure none)
                                            else (pure none)) with
                                          | .some result => (pure result)
                                          | none =>
                                            match (← do
                                              let v__513 := head_exp_
                                              if (Bool.and
                                                   (let mapping31_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__513 11 7)
                                                   (encdec_reg_backwards_matches mapping31_))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__513 15 13)
                                                       (0b010 : (BitVec 3)))
                                                     (BEq.beq (Sail.BitVec.extractLsb v__513 1 0)
                                                       (0b10 : (BitVec 2)))))
                                              then
                                                let ui76 : (BitVec 2) :=
                                                  (Sail.BitVec.extractLsb v__513 3 2)
                                                let ui5 : (BitVec 1) :=
                                                  (Sail.BitVec.extractLsb v__513 12 12)
                                                let ui42 : (BitVec 3) :=
                                                  (Sail.BitVec.extractLsb v__513 6 4)
                                                let mapping31_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__513 11 7)
                                                let rd := (encdec_reg_backwards mapping31_)
                                                if (Bool.and (bne rd zreg)
                                                     (← (extensionEnabled Ext_Zca)))
                                                then
                                                  (pure (some
                                                      (C_LWSP
                                                        (((ui76 : (BitVec 2)) ++ ((ui5 : (BitVec 1)) ++ (ui42 : (BitVec 3)))), rd))))
                                                else (pure none)
                                              else (pure none)) with
                                            | .some result => (pure result)
                                            | none =>
                                              match (← do
                                                let v__510 := head_exp_
                                                if (Bool.and
                                                     (let mapping32_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__510 11 7)
                                                     (encdec_reg_backwards_matches mapping32_))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__510 15 13)
                                                         (0b011 : (BitVec 3)))
                                                       (BEq.beq (Sail.BitVec.extractLsb v__510 1 0)
                                                         (0b10 : (BitVec 2)))))
                                                then
                                                  let ui86 : (BitVec 3) :=
                                                    (Sail.BitVec.extractLsb v__510 4 2)
                                                  let ui5 : (BitVec 1) :=
                                                    (Sail.BitVec.extractLsb v__510 12 12)
                                                  let ui43 : (BitVec 2) :=
                                                    (Sail.BitVec.extractLsb v__510 6 5)
                                                  let mapping32_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__510 11 7)
                                                  let rd := (encdec_reg_backwards mapping32_)
                                                  if (Bool.and (bne rd zreg)
                                                       (Bool.and (BEq.beq xlen 64)
                                                         (← (extensionEnabled Ext_Zca))))
                                                  then
                                                    (pure (some
                                                        (C_LDSP
                                                          (((ui86 : (BitVec 3)) ++ ((ui5 : (BitVec 1)) ++ (ui43 : (BitVec 2)))), rd))))
                                                  else (pure none)
                                                else (pure none)) with
                                              | .some result => (pure result)
                                              | none =>
                                                match (← do
                                                  let v__507 := head_exp_
                                                  if (Bool.and
                                                       (let mapping33_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__507 6 2)
                                                       (encdec_reg_backwards_matches mapping33_))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__507 15 13)
                                                           (0b110 : (BitVec 3)))
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__507 1 0)
                                                           (0b10 : (BitVec 2)))))
                                                  then
                                                    let ui76 : (BitVec 2) :=
                                                      (Sail.BitVec.extractLsb v__507 8 7)
                                                    let ui52 : (BitVec 4) :=
                                                      (Sail.BitVec.extractLsb v__507 12 9)
                                                    let mapping33_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__507 6 2)
                                                    let rs2 := (encdec_reg_backwards mapping33_)
                                                    if (← (extensionEnabled Ext_Zca))
                                                    then
                                                      (pure (some
                                                          (C_SWSP
                                                            (((ui76 : (BitVec 2)) ++ (ui52 : (BitVec 4))), rs2))))
                                                    else (pure none)
                                                  else (pure none)) with
                                                | .some result => (pure result)
                                                | none =>
                                                  match (← do
                                                    let v__504 := head_exp_
                                                    if (Bool.and
                                                         (let mapping34_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__504 6 2)
                                                         (encdec_reg_backwards_matches mapping34_))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__504 15 13)
                                                             (0b111 : (BitVec 3)))
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__504 1 0)
                                                             (0b10 : (BitVec 2)))))
                                                    then
                                                      let ui86 : (BitVec 3) :=
                                                        (Sail.BitVec.extractLsb v__504 9 7)
                                                      let ui53 : (BitVec 3) :=
                                                        (Sail.BitVec.extractLsb v__504 12 10)
                                                      let mapping34_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__504 6 2)
                                                      let rs2 := (encdec_reg_backwards mapping34_)
                                                      if (Bool.and (BEq.beq xlen 64)
                                                           (← (extensionEnabled Ext_Zca)))
                                                      then
                                                        (pure (some
                                                            (C_SDSP
                                                              (((ui86 : (BitVec 3)) ++ (ui53 : (BitVec 3))), rs2))))
                                                      else (pure none)
                                                    else (pure none)) with
                                                  | .some result => (pure result)
                                                  | none =>
                                                    match (← do
                                                      let v__499 := head_exp_
                                                      if (Bool.and
                                                           (let mapping35_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__499 11 7)
                                                           (encdec_reg_backwards_matches mapping35_))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__499 15 12)
                                                               (0x8 : (BitVec 4)))
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__499 6 0)
                                                               (0b0000010 : (BitVec 7)))))
                                                      then
                                                        let mapping35_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__499 11 7)
                                                        let rs1 := (encdec_reg_backwards mapping35_)
                                                        if (Bool.and (bne rs1 zreg)
                                                             (← (extensionEnabled Ext_Zca)))
                                                        then (pure (some (C_JR rs1)))
                                                        else (pure none)
                                                      else (pure none)) with
                                                    | .some result => (pure result)
                                                    | none =>
                                                      match (← do
                                                        let v__494 := head_exp_
                                                        if (Bool.and
                                                             (let mapping36_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__494 11 7)
                                                             (encdec_reg_backwards_matches
                                                               mapping36_))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__494 15
                                                                   12) (0x9 : (BitVec 4)))
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__494 6 0)
                                                                 (0b0000010 : (BitVec 7)))))
                                                        then
                                                          let mapping36_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__494 11 7)
                                                          let rs1 :=
                                                            (encdec_reg_backwards mapping36_)
                                                          if (Bool.and (bne rs1 zreg)
                                                               (← (extensionEnabled Ext_Zca)))
                                                          then (pure (some (C_JALR rs1)))
                                                          else (pure none)
                                                        else (pure none)) with
                                                      | .some result => (pure result)
                                                      | none =>
                                                        match (← do
                                                          let v__490 := head_exp_
                                                          if (Bool.and
                                                               (let mapping38_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__490 6 2)
                                                               let mapping37_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__490 11 7)
                                                               (Bool.and
                                                                 (encdec_reg_backwards_matches
                                                                   mapping37_)
                                                                 (encdec_reg_backwards_matches
                                                                   mapping38_)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__490 15
                                                                     12) (0x8 : (BitVec 4)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__490 1
                                                                     0) (0b10 : (BitVec 2)))))
                                                          then
                                                            let mapping38_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__490 6 2)
                                                            let mapping37_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__490 11 7)
                                                            match ((encdec_reg_backwards mapping37_), (encdec_reg_backwards
                                                              mapping38_)) with
                                                            | (rd, rs2) =>
                                                              if (Bool.and (bne rd zreg)
                                                                   (Bool.and (bne rs2 zreg)
                                                                     (← (extensionEnabled Ext_Zca))))
                                                              then (pure (some (C_MV (rd, rs2))))
                                                              else (pure none)
                                                          else (pure none)) with
                                                        | .some result => (pure result)
                                                        | none =>
                                                          match (← do
                                                            let v__480 := head_exp_
                                                            if (Bool.and
                                                                 (← (extensionEnabled Ext_Zca))
                                                                 (BEq.beq v__480
                                                                   (0x9002 : (BitVec 16))))
                                                            then (pure (some (C_EBREAK ())))
                                                            else
                                                              if (Bool.and
                                                                   (let mapping40_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__480
                                                                       6 2)
                                                                   let mapping39_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__480
                                                                       11 7)
                                                                   (Bool.and
                                                                     (encdec_reg_backwards_matches
                                                                       mapping39_)
                                                                     (encdec_reg_backwards_matches
                                                                       mapping40_)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__480 15 12)
                                                                       (0x9 : (BitVec 4)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__480 1 0)
                                                                       (0b10 : (BitVec 2)))))
                                                              then
                                                                let mapping40_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__480 6 2)
                                                                let mapping39_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__480 11
                                                                    7)
                                                                match ((encdec_reg_backwards
                                                                  mapping39_), (encdec_reg_backwards
                                                                  mapping40_)) with
                                                                | (rsd, rs2) =>
                                                                  if (Bool.and (bne rsd zreg)
                                                                       (Bool.and (bne rs2 zreg)
                                                                         (← (extensionEnabled
                                                                             Ext_Zca))))
                                                                  then
                                                                    (pure (some (C_ADD (rsd, rs2))))
                                                                  else (pure none)
                                                              else (pure none)) with
                                                          | .some result => (pure result)
                                                          | none =>
                                                            match (let v__471 := head_exp_
                                                            if (Bool.and
                                                                 (let im5 : (BitVec 1) :=
                                                                   (Sail.BitVec.extractLsb v__471 12
                                                                     12)
                                                                 let im40 : (BitVec 5) :=
                                                                   (Sail.BitVec.extractLsb v__471 6
                                                                     2)
                                                                 (bne (im5 ++ im40)
                                                                   (0b000000 : (BitVec 6))))
                                                                 (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__471
                                                                       15 13) (0b000 : (BitVec 3)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__471 11 7)
                                                                       (0b00000 : (BitVec 5)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__471 1 0)
                                                                       (0b01 : (BitVec 2))))))
                                                            then
                                                              let im5 : (BitVec 1) :=
                                                                (Sail.BitVec.extractLsb v__471 12 12)
                                                              let im40 : (BitVec 5) :=
                                                                (Sail.BitVec.extractLsb v__471 6 2)
                                                              (some
                                                                (C_NOP_HINT
                                                                  ((im5 : (BitVec 1)) ++ (im40 : (BitVec 5)))))
                                                            else
                                                              if (Bool.and
                                                                   (let mapping41_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__471
                                                                       11 7)
                                                                   (encdec_reg_backwards_matches
                                                                     mapping41_))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__471 15 12)
                                                                       (0x0 : (BitVec 4)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__471 6 0)
                                                                       (0b0000001 : (BitVec 7)))))
                                                              then
                                                                let mapping41_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__471 11
                                                                    7)
                                                                let rsd :=
                                                                  (encdec_reg_backwards mapping41_)
                                                                if (bne rsd zreg)
                                                                then (some (C_ADDI_HINT rsd))
                                                                else none
                                                              else none) with
                                                            | .some result => (pure result)
                                                            | none =>
                                                              match (let v__458 := head_exp_
                                                              if (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__458
                                                                       15 13) (0b010 : (BitVec 3)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__458 11 7)
                                                                       (0b00000 : (BitVec 5)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__458 1 0)
                                                                       (0b01 : (BitVec 2)))))
                                                              then
                                                                let imm5 : (BitVec 1) :=
                                                                  (Sail.BitVec.extractLsb v__458 12
                                                                    12)
                                                                let imm40 : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__458 6 2)
                                                                (some
                                                                  (C_LI_HINT
                                                                    ((imm5 : (BitVec 1)) ++ (imm40 : (BitVec 5)))))
                                                              else
                                                                if (Bool.and
                                                                     (let imm17 : (BitVec 1) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__458 12 12)
                                                                     let imm1612 : (BitVec 5) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__458 6 2)
                                                                     (bne (imm17 ++ imm1612)
                                                                       (0b000000 : (BitVec 6))))
                                                                     (Bool.and
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__458 15 13)
                                                                         (0b011 : (BitVec 3)))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__458 11 7)
                                                                           (0b00000 : (BitVec 5)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__458 1 0)
                                                                           (0b01 : (BitVec 2))))))
                                                                then
                                                                  let imm17 : (BitVec 1) :=
                                                                    (Sail.BitVec.extractLsb v__458
                                                                      12 12)
                                                                  let imm1612 : (BitVec 5) :=
                                                                    (Sail.BitVec.extractLsb v__458 6
                                                                      2)
                                                                  (some
                                                                    (C_LUI_HINT
                                                                      ((imm17 : (BitVec 1)) ++ (imm1612 : (BitVec 5)))))
                                                                else
                                                                  if (Bool.and
                                                                       (let mapping42_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__458 6 2)
                                                                       (encdec_reg_backwards_matches
                                                                         mapping42_))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__458 15 7)
                                                                           (0b100000000 : (BitVec 9)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__458 1 0)
                                                                           (0b10 : (BitVec 2)))))
                                                                  then
                                                                    let mapping42_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__458
                                                                        6 2)
                                                                    let rs2 :=
                                                                      (encdec_reg_backwards
                                                                        mapping42_)
                                                                    if (bne rs2 zreg)
                                                                    then (some (C_MV_HINT rs2))
                                                                    else none
                                                                  else none) with
                                                              | .some result => (pure result)
                                                              | none =>
                                                                match (let v__453 := head_exp_
                                                                if (Bool.and
                                                                     (let mapping43_ : (BitVec 5) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__453 6 2)
                                                                     (encdec_reg_backwards_matches
                                                                       mapping43_))
                                                                     (Bool.and
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__453 15 7)
                                                                         (0b100100000 : (BitVec 9)))
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__453 1 0)
                                                                         (0b10 : (BitVec 2)))))
                                                                then
                                                                  let mapping43_ : (BitVec 5) :=
                                                                    (Sail.BitVec.extractLsb v__453 6
                                                                      2)
                                                                  let rs2 :=
                                                                    (encdec_reg_backwards mapping43_)
                                                                  if (bne rs2 zreg)
                                                                  then (some (C_ADD_HINT rs2))
                                                                  else none
                                                                else none) with
                                                                | .some result => (pure result)
                                                                | none =>
                                                                  match (let v__450 := head_exp_
                                                                  if (Bool.and
                                                                       (let mapping44_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__450 11 7)
                                                                       (encdec_reg_backwards_matches
                                                                         mapping44_))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__450 15 13)
                                                                           (0b000 : (BitVec 3)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__450 1 0)
                                                                           (0b10 : (BitVec 2)))))
                                                                  then
                                                                    let nzui5 : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__450
                                                                        12 12)
                                                                    let nzui40 : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__450
                                                                        6 2)
                                                                    let mapping44_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__450
                                                                        11 7)
                                                                    let rsd :=
                                                                      (encdec_reg_backwards
                                                                        mapping44_)
                                                                    if (Bool.and
                                                                         (Bool.or
                                                                           (BEq.beq
                                                                             (nzui5 ++ nzui40)
                                                                             (0b000000 : (BitVec 6)))
                                                                           (BEq.beq rsd zreg))
                                                                         (Bool.or (BEq.beq xlen 64)
                                                                           (BEq.beq nzui5
                                                                             (0b0 : (BitVec 1)))))
                                                                    then
                                                                      (some
                                                                        (C_SLLI_HINT
                                                                          (((nzui5 : (BitVec 1)) ++ (nzui40 : (BitVec 5))), rsd)))
                                                                    else none
                                                                  else none) with
                                                                  | .some result => (pure result)
                                                                  | none =>
                                                                    match (let v__444 := head_exp_
                                                                    if (Bool.and
                                                                         (let mapping45_ : (BitVec 3) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__444 9 7)
                                                                         (encdec_creg_backwards_matches
                                                                           mapping45_))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__444 15 10)
                                                                             (0b100000 : (BitVec 6)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__444 6 0)
                                                                             (0b0000001 : (BitVec 7)))))
                                                                    then
                                                                      let mapping45_ : (BitVec 3) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__444 9 7)
                                                                      match (encdec_creg_backwards
                                                                        mapping45_) with
                                                                      | rsd =>
                                                                        (some (C_SRLI_HINT rsd))
                                                                    else none) with
                                                                    | .some result => (pure result)
                                                                    | none =>
                                                                      match (let v__438 := head_exp_
                                                                      if (Bool.and
                                                                           (let mapping46_ : (BitVec 3) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__438 9 7)
                                                                           (encdec_creg_backwards_matches
                                                                             mapping46_))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__438 15 10)
                                                                               (0b100001 : (BitVec 6)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__438 6 0)
                                                                               (0b0000001 : (BitVec 7)))))
                                                                      then
                                                                        let mapping46_ : (BitVec 3) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__438 9 7)
                                                                        match (encdec_creg_backwards
                                                                          mapping46_) with
                                                                        | rsd =>
                                                                          (some (C_SRAI_HINT rsd))
                                                                      else none) with
                                                                      | .some result =>
                                                                        (pure result)
                                                                      | none =>
                                                                        match head_exp_ with
                                                                        | s => (pure (C_ILLEGAL s))

noncomputable def encdec_compressed_forwards_matches (arg_ : ast) : SailM Bool := do
  match arg_ with
  | .C_NOP () =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_ADDI4SPN (rd, v__616) =>
    if (← do
         let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__616 7 4)
         let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__616 7 4)
         let nz54 : (BitVec 2) := (Sail.BitVec.extractLsb v__616 3 2)
         let nz3 : (BitVec 1) := (Sail.BitVec.extractLsb v__616 1 1)
         let nz2 : (BitVec 1) := (Sail.BitVec.extractLsb v__616 0 0)
         (pure (Bool.and (bne (nz96 ++ (nz54 ++ (nz3 ++ nz2))) (0x00 : (BitVec 8)))
             (← (extensionEnabled Ext_Zca)))))
    then (pure true)
    else (pure false)
  | .C_LW (v__617, rs1, rd) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_LD (v__618, rs1, rd) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_SW (v__619, rs1, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_SD (v__620, rs1, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_ADDI (v__621, rsd) =>
    if (← do
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__621 5 5)
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__621 5 5)
         let nzi40 : (BitVec 5) := (Sail.BitVec.extractLsb v__621 4 0)
         (pure (Bool.and (bne (nzi5 ++ nzi40) (0b000000 : (BitVec 6)))
             (Bool.and (bne rsd zreg) (← (extensionEnabled Ext_Zca))))))
    then (pure true)
    else (pure false)
  | .C_JAL v__622 =>
    if (Bool.and (BEq.beq xlen 32) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_ADDIW (v__623, rsd) =>
    if (Bool.and (bne rsd zreg) (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
    then (pure true)
    else (pure false)
  | .C_LI (v__624, rd) =>
    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_ADDI16SP v__625 =>
    if (← do
         let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__625 5 5)
         let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__625 5 5)
         let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__625 4 3)
         let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__625 2 2)
         let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__625 1 1)
         let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__625 0 0)
         (pure (Bool.and (bne (nzi9 ++ (nzi87 ++ (nzi6 ++ (nzi5 ++ nzi4)))) (0b000000 : (BitVec 6)))
             (← (extensionEnabled Ext_Zca)))))
    then (pure true)
    else (pure false)
  | .C_LUI (v__626, rd) =>
    if (← do
         let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__626 5 5)
         let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__626 5 5)
         let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__626 4 0)
         (pure (Bool.and (bne rd zreg)
             (Bool.and (bne rd sp)
               (Bool.and (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6)))
                 (← (extensionEnabled Ext_Zca)))))))
    then (pure true)
    else (pure false)
  | .C_SRLI (v__627, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__627 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__627 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__627 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
               (← (extensionEnabled Ext_Zca))))))
    then (pure true)
    else (pure false)
  | .C_SRAI (v__628, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__628 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__628 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__628 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
               (← (extensionEnabled Ext_Zca))))))
    then (pure true)
    else (pure false)
  | .C_ANDI (v__629, rsd) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_SUB (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_XOR (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_OR (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_AND (rsd, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_SUBW (rsd, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_ADDW (rsd, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_J v__630 =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_BEQZ (v__631, rs) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_BNEZ (v__632, rs) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_SLLI (v__633, rsd) =>
    if (← do
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__633 5 5)
         let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__633 5 5)
         let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__633 4 0)
         (pure (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
             (Bool.and (bne rsd zreg)
               (Bool.and (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                 (← (extensionEnabled Ext_Zca)))))))
    then (pure true)
    else (pure false)
  | .C_LWSP (v__634, rd) =>
    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_LDSP (v__635, rd) =>
    if (Bool.and (bne rd zreg) (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
    then (pure true)
    else (pure false)
  | .C_SWSP (v__636, rs2) =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_SDSP (v__637, rs2) =>
    if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_JR rs1 =>
    if (Bool.and (bne rs1 zreg) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_JALR rs1 =>
    if (Bool.and (bne rs1 zreg) (← (extensionEnabled Ext_Zca)))
    then (pure true)
    else (pure false)
  | .C_MV (rd, rs2) =>
    if (Bool.and (bne rd zreg) (Bool.and (bne rs2 zreg) (← (extensionEnabled Ext_Zca))))
    then (pure true)
    else (pure false)
  | .C_EBREAK () =>
    if (← (extensionEnabled Ext_Zca))
    then (pure true)
    else (pure false)
  | .C_ADD (rsd, rs2) =>
    if (Bool.and (bne rsd zreg) (Bool.and (bne rs2 zreg) (← (extensionEnabled Ext_Zca))))
    then (pure true)
    else (pure false)
  | .C_NOP_HINT v__638 =>
    if (let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__638 5 5)
       let im5 : (BitVec 1) := (Sail.BitVec.extractLsb v__638 5 5)
       let im40 : (BitVec 5) := (Sail.BitVec.extractLsb v__638 4 0)
       (bne (im5 ++ im40) (0b000000 : (BitVec 6))))
    then (pure true)
    else (pure false)
  | .C_ADDI_HINT rsd =>
    if (bne rsd zreg)
    then (pure true)
    else (pure false)
  | .C_LI_HINT v__639 => (pure true)
  | .C_LUI_HINT v__640 =>
    if (let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__640 5 5)
       let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__640 5 5)
       let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__640 4 0)
       (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6))))
    then (pure true)
    else (pure false)
  | .C_MV_HINT rs2 =>
    if (bne rs2 zreg)
    then (pure true)
    else (pure false)
  | .C_ADD_HINT rs2 =>
    if (bne rs2 zreg)
    then (pure true)
    else (pure false)
  | .C_SLLI_HINT (v__641, rsd) =>
    if (let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__641 5 5)
       let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__641 5 5)
       let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__641 4 0)
       (Bool.and (Bool.or (BEq.beq (nzui5 ++ nzui40) (0b000000 : (BitVec 6))) (BEq.beq rsd zreg))
         (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))))
    then (pure true)
    else (pure false)
  | .C_SRLI_HINT rsd => (pure true)
  | .C_SRAI_HINT rsd => (pure true)
  | .C_ILLEGAL s => (pure true)
  | _ => (pure false)

noncomputable def encdec_compressed_backwards_matches (arg_ : (BitVec 16)) : SailM Bool := do
  let head_exp_ := arg_
  match (← do
    let v__811 := head_exp_
    if (Bool.and (← (extensionEnabled Ext_Zca)) (BEq.beq v__811 (0x0001 : (BitVec 16))))
    then (pure (some true))
    else
      if (Bool.and
           (let mapping0_ : (BitVec 3) := (Sail.BitVec.extractLsb v__811 4 2)
           (encdec_creg_backwards_matches mapping0_))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__811 15 13) (0b000 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__811 1 0) (0b00 : (BitVec 2)))))
      then
        let nz96 : (BitVec 4) := (Sail.BitVec.extractLsb v__811 10 7)
        let nz54 : (BitVec 2) := (Sail.BitVec.extractLsb v__811 12 11)
        let nz3 : (BitVec 1) := (Sail.BitVec.extractLsb v__811 5 5)
        let nz2 : (BitVec 1) := (Sail.BitVec.extractLsb v__811 6 6)
        let mapping0_ : (BitVec 3) := (Sail.BitVec.extractLsb v__811 4 2)
        let rd := (encdec_creg_backwards mapping0_)
        if (Bool.and (bne (nz96 ++ (nz54 ++ (nz3 ++ nz2))) (0x00 : (BitVec 8)))
             (← (extensionEnabled Ext_Zca)))
        then (pure (some true))
        else (pure none)
      else (pure none)) with
  | .some result => (pure result)
  | none =>
    match (← do
      let v__808 := head_exp_
      if (Bool.and
           (let mapping2_ : (BitVec 3) := (Sail.BitVec.extractLsb v__808 4 2)
           let mapping1_ : (BitVec 3) := (Sail.BitVec.extractLsb v__808 9 7)
           (Bool.and (encdec_creg_backwards_matches mapping1_)
             (encdec_creg_backwards_matches mapping2_)))
           (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__808 15 13) (0b010 : (BitVec 3)))
             (BEq.beq (Sail.BitVec.extractLsb v__808 1 0) (0b00 : (BitVec 2)))))
      then
        let mapping2_ : (BitVec 3) := (Sail.BitVec.extractLsb v__808 4 2)
        let mapping1_ : (BitVec 3) := (Sail.BitVec.extractLsb v__808 9 7)
        match ((encdec_creg_backwards mapping1_), (encdec_creg_backwards mapping2_)) with
        | (rs1, rd) =>
          if (← (extensionEnabled Ext_Zca))
          then (pure (some true))
          else (pure none)
      else (pure none)) with
    | .some result => (pure result)
    | none =>
      match (← do
        let v__805 := head_exp_
        if (Bool.and
             (let mapping4_ : (BitVec 3) := (Sail.BitVec.extractLsb v__805 4 2)
             let mapping3_ : (BitVec 3) := (Sail.BitVec.extractLsb v__805 9 7)
             (Bool.and (encdec_creg_backwards_matches mapping3_)
               (encdec_creg_backwards_matches mapping4_)))
             (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__805 15 13) (0b011 : (BitVec 3)))
               (BEq.beq (Sail.BitVec.extractLsb v__805 1 0) (0b00 : (BitVec 2)))))
        then
          let mapping4_ : (BitVec 3) := (Sail.BitVec.extractLsb v__805 4 2)
          let mapping3_ : (BitVec 3) := (Sail.BitVec.extractLsb v__805 9 7)
          match ((encdec_creg_backwards mapping3_), (encdec_creg_backwards mapping4_)) with
          | (rs1, rd) =>
            if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
            then (pure (some true))
            else (pure none)
        else (pure none)) with
      | .some result => (pure result)
      | none =>
        match (← do
          let v__802 := head_exp_
          if (Bool.and
               (let mapping6_ : (BitVec 3) := (Sail.BitVec.extractLsb v__802 4 2)
               let mapping5_ : (BitVec 3) := (Sail.BitVec.extractLsb v__802 9 7)
               (Bool.and (encdec_creg_backwards_matches mapping5_)
                 (encdec_creg_backwards_matches mapping6_)))
               (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__802 15 13) (0b110 : (BitVec 3)))
                 (BEq.beq (Sail.BitVec.extractLsb v__802 1 0) (0b00 : (BitVec 2)))))
          then
            let mapping6_ : (BitVec 3) := (Sail.BitVec.extractLsb v__802 4 2)
            let mapping5_ : (BitVec 3) := (Sail.BitVec.extractLsb v__802 9 7)
            match ((encdec_creg_backwards mapping5_), (encdec_creg_backwards mapping6_)) with
            | (rs1, rs2) =>
              if (← (extensionEnabled Ext_Zca))
              then (pure (some true))
              else (pure none)
          else (pure none)) with
        | .some result => (pure result)
        | none =>
          match (← do
            let v__799 := head_exp_
            if (Bool.and
                 (let mapping8_ : (BitVec 3) := (Sail.BitVec.extractLsb v__799 4 2)
                 let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__799 9 7)
                 (Bool.and (encdec_creg_backwards_matches mapping7_)
                   (encdec_creg_backwards_matches mapping8_)))
                 (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__799 15 13) (0b111 : (BitVec 3)))
                   (BEq.beq (Sail.BitVec.extractLsb v__799 1 0) (0b00 : (BitVec 2)))))
            then
              let mapping8_ : (BitVec 3) := (Sail.BitVec.extractLsb v__799 4 2)
              let mapping7_ : (BitVec 3) := (Sail.BitVec.extractLsb v__799 9 7)
              match ((encdec_creg_backwards mapping7_), (encdec_creg_backwards mapping8_)) with
              | (rs1, rs2) =>
                if (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca)))
                then (pure (some true))
                else (pure none)
            else (pure none)) with
          | .some result => (pure result)
          | none =>
            match (← do
              let v__796 := head_exp_
              if (Bool.and
                   (let mapping9_ : (BitVec 5) := (Sail.BitVec.extractLsb v__796 11 7)
                   (encdec_reg_backwards_matches mapping9_))
                   (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__796 15 13) (0b000 : (BitVec 3)))
                     (BEq.beq (Sail.BitVec.extractLsb v__796 1 0) (0b01 : (BitVec 2)))))
              then
                let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__796 12 12)
                let nzi40 : (BitVec 5) := (Sail.BitVec.extractLsb v__796 6 2)
                let mapping9_ : (BitVec 5) := (Sail.BitVec.extractLsb v__796 11 7)
                let rsd := (encdec_reg_backwards mapping9_)
                if (Bool.and (bne (nzi5 ++ nzi40) (0b000000 : (BitVec 6)))
                     (Bool.and (bne rsd zreg) (← (extensionEnabled Ext_Zca))))
                then (pure (some true))
                else (pure none)
              else (pure none)) with
            | .some result => (pure result)
            | none =>
              match (← do
                let v__790 := head_exp_
                if (Bool.and (Bool.and (BEq.beq xlen 32) (← (extensionEnabled Ext_Zca)))
                     (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__790 15 13) (0b001 : (BitVec 3)))
                       (BEq.beq (Sail.BitVec.extractLsb v__790 1 0) (0b01 : (BitVec 2)))))
                then (pure (some true))
                else
                  if (Bool.and
                       (let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__790 11 7)
                       (encdec_reg_backwards_matches mapping10_))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__790 15 13) (0b001 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__790 1 0) (0b01 : (BitVec 2)))))
                  then
                    let mapping10_ : (BitVec 5) := (Sail.BitVec.extractLsb v__790 11 7)
                    let rsd := (encdec_reg_backwards mapping10_)
                    if (Bool.and (bne rsd zreg)
                         (Bool.and (BEq.beq xlen 64) (← (extensionEnabled Ext_Zca))))
                    then (pure (some true))
                    else (pure none)
                  else (pure none)) with
              | .some result => (pure result)
              | none =>
                match (← do
                  let v__787 := head_exp_
                  if (Bool.and
                       (let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__787 11 7)
                       (encdec_reg_backwards_matches mapping11_))
                       (Bool.and
                         (BEq.beq (Sail.BitVec.extractLsb v__787 15 13) (0b010 : (BitVec 3)))
                         (BEq.beq (Sail.BitVec.extractLsb v__787 1 0) (0b01 : (BitVec 2)))))
                  then
                    let mapping11_ : (BitVec 5) := (Sail.BitVec.extractLsb v__787 11 7)
                    let rd := (encdec_reg_backwards mapping11_)
                    if (Bool.and (bne rd zreg) (← (extensionEnabled Ext_Zca)))
                    then (pure (some true))
                    else (pure none)
                  else (pure none)) with
                | .some result => (pure result)
                | none =>
                  match (← do
                    let v__780 := head_exp_
                    if (Bool.and
                         (← do
                           let nzi9 : (BitVec 1) := (Sail.BitVec.extractLsb v__780 12 12)
                           let nzi87 : (BitVec 2) := (Sail.BitVec.extractLsb v__780 4 3)
                           let nzi6 : (BitVec 1) := (Sail.BitVec.extractLsb v__780 5 5)
                           let nzi5 : (BitVec 1) := (Sail.BitVec.extractLsb v__780 2 2)
                           let nzi4 : (BitVec 1) := (Sail.BitVec.extractLsb v__780 6 6)
                           (pure (Bool.and
                               (bne (nzi9 ++ (nzi87 ++ (nzi6 ++ (nzi5 ++ nzi4))))
                                 (0b000000 : (BitVec 6))) (← (extensionEnabled Ext_Zca)))))
                         (Bool.and
                           (BEq.beq (Sail.BitVec.extractLsb v__780 15 13) (0b011 : (BitVec 3)))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__780 11 7) (0b00010 : (BitVec 5)))
                             (BEq.beq (Sail.BitVec.extractLsb v__780 1 0) (0b01 : (BitVec 2))))))
                    then (pure (some true))
                    else
                      if (Bool.and
                           (let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__780 11 7)
                           (encdec_reg_backwards_matches mapping12_))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__780 15 13) (0b011 : (BitVec 3)))
                             (BEq.beq (Sail.BitVec.extractLsb v__780 1 0) (0b01 : (BitVec 2)))))
                      then
                        let mapping12_ : (BitVec 5) := (Sail.BitVec.extractLsb v__780 11 7)
                        let imm17 : (BitVec 1) := (Sail.BitVec.extractLsb v__780 12 12)
                        let imm1612 : (BitVec 5) := (Sail.BitVec.extractLsb v__780 6 2)
                        let rd := (encdec_reg_backwards mapping12_)
                        if (Bool.and (bne rd zreg)
                             (Bool.and (bne rd sp)
                               (Bool.and (bne (imm17 ++ imm1612) (0b000000 : (BitVec 6)))
                                 (← (extensionEnabled Ext_Zca)))))
                        then (pure (some true))
                        else (pure none)
                      else (pure none)) with
                  | .some result => (pure result)
                  | none =>
                    match (← do
                      let v__776 := head_exp_
                      if (Bool.and
                           (let mapping13_ : (BitVec 3) := (Sail.BitVec.extractLsb v__776 9 7)
                           (encdec_creg_backwards_matches mapping13_))
                           (Bool.and
                             (BEq.beq (Sail.BitVec.extractLsb v__776 15 13) (0b100 : (BitVec 3)))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__776 11 10) (0b00 : (BitVec 2)))
                               (BEq.beq (Sail.BitVec.extractLsb v__776 1 0) (0b01 : (BitVec 2))))))
                      then
                        let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__776 12 12)
                        let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__776 6 2)
                        let mapping13_ : (BitVec 3) := (Sail.BitVec.extractLsb v__776 9 7)
                        let rsd := (encdec_creg_backwards mapping13_)
                        if (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                             (Bool.and
                               (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                               (← (extensionEnabled Ext_Zca))))
                        then (pure (some true))
                        else (pure none)
                      else (pure none)) with
                    | .some result => (pure result)
                    | none =>
                      match (← do
                        let v__772 := head_exp_
                        if (Bool.and
                             (let mapping14_ : (BitVec 3) := (Sail.BitVec.extractLsb v__772 9 7)
                             (encdec_creg_backwards_matches mapping14_))
                             (Bool.and
                               (BEq.beq (Sail.BitVec.extractLsb v__772 15 13) (0b100 : (BitVec 3)))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__772 11 10) (0b01 : (BitVec 2)))
                                 (BEq.beq (Sail.BitVec.extractLsb v__772 1 0) (0b01 : (BitVec 2))))))
                        then
                          let nzui5 : (BitVec 1) := (Sail.BitVec.extractLsb v__772 12 12)
                          let nzui40 : (BitVec 5) := (Sail.BitVec.extractLsb v__772 6 2)
                          let mapping14_ : (BitVec 3) := (Sail.BitVec.extractLsb v__772 9 7)
                          let rsd := (encdec_creg_backwards mapping14_)
                          if (Bool.and (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                               (Bool.and
                                 (Bool.or (BEq.beq xlen 64) (BEq.beq nzui5 (0b0 : (BitVec 1))))
                                 (← (extensionEnabled Ext_Zca))))
                          then (pure (some true))
                          else (pure none)
                        else (pure none)) with
                      | .some result => (pure result)
                      | none =>
                        match (← do
                          let v__768 := head_exp_
                          if (Bool.and
                               (let mapping15_ : (BitVec 3) := (Sail.BitVec.extractLsb v__768 9 7)
                               (encdec_creg_backwards_matches mapping15_))
                               (Bool.and
                                 (BEq.beq (Sail.BitVec.extractLsb v__768 15 13) (0b100 : (BitVec 3)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__768 11 10)
                                     (0b10 : (BitVec 2)))
                                   (BEq.beq (Sail.BitVec.extractLsb v__768 1 0) (0b01 : (BitVec 2))))))
                          then
                            let mapping15_ : (BitVec 3) := (Sail.BitVec.extractLsb v__768 9 7)
                            let rsd := (encdec_creg_backwards mapping15_)
                            if (← (extensionEnabled Ext_Zca))
                            then (pure (some true))
                            else (pure none)
                          else (pure none)) with
                        | .some result => (pure result)
                        | none =>
                          match (← do
                            let v__762 := head_exp_
                            if (Bool.and
                                 (let mapping17_ : (BitVec 3) := (Sail.BitVec.extractLsb v__762 4 2)
                                 let mapping16_ : (BitVec 3) := (Sail.BitVec.extractLsb v__762 9 7)
                                 (Bool.and (encdec_creg_backwards_matches mapping16_)
                                   (encdec_creg_backwards_matches mapping17_)))
                                 (Bool.and
                                   (BEq.beq (Sail.BitVec.extractLsb v__762 15 10)
                                     (0b100011 : (BitVec 6)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__762 6 5)
                                       (0b00 : (BitVec 2)))
                                     (BEq.beq (Sail.BitVec.extractLsb v__762 1 0)
                                       (0b01 : (BitVec 2))))))
                            then
                              let mapping17_ : (BitVec 3) := (Sail.BitVec.extractLsb v__762 4 2)
                              let mapping16_ : (BitVec 3) := (Sail.BitVec.extractLsb v__762 9 7)
                              match ((encdec_creg_backwards mapping16_), (encdec_creg_backwards
                                mapping17_)) with
                              | (rsd, rs2) =>
                                if (← (extensionEnabled Ext_Zca))
                                then (pure (some true))
                                else (pure none)
                            else (pure none)) with
                          | .some result => (pure result)
                          | none =>
                            match (← do
                              let v__756 := head_exp_
                              if (Bool.and
                                   (let mapping19_ : (BitVec 3) :=
                                     (Sail.BitVec.extractLsb v__756 4 2)
                                   let mapping18_ : (BitVec 3) :=
                                     (Sail.BitVec.extractLsb v__756 9 7)
                                   (Bool.and (encdec_creg_backwards_matches mapping18_)
                                     (encdec_creg_backwards_matches mapping19_)))
                                   (Bool.and
                                     (BEq.beq (Sail.BitVec.extractLsb v__756 15 10)
                                       (0b100011 : (BitVec 6)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__756 6 5)
                                         (0b01 : (BitVec 2)))
                                       (BEq.beq (Sail.BitVec.extractLsb v__756 1 0)
                                         (0b01 : (BitVec 2))))))
                              then
                                let mapping19_ : (BitVec 3) := (Sail.BitVec.extractLsb v__756 4 2)
                                let mapping18_ : (BitVec 3) := (Sail.BitVec.extractLsb v__756 9 7)
                                match ((encdec_creg_backwards mapping18_), (encdec_creg_backwards
                                  mapping19_)) with
                                | (rsd, rs2) =>
                                  if (← (extensionEnabled Ext_Zca))
                                  then (pure (some true))
                                  else (pure none)
                              else (pure none)) with
                            | .some result => (pure result)
                            | none =>
                              match (← do
                                let v__750 := head_exp_
                                if (Bool.and
                                     (let mapping21_ : (BitVec 3) :=
                                       (Sail.BitVec.extractLsb v__750 4 2)
                                     let mapping20_ : (BitVec 3) :=
                                       (Sail.BitVec.extractLsb v__750 9 7)
                                     (Bool.and (encdec_creg_backwards_matches mapping20_)
                                       (encdec_creg_backwards_matches mapping21_)))
                                     (Bool.and
                                       (BEq.beq (Sail.BitVec.extractLsb v__750 15 10)
                                         (0b100011 : (BitVec 6)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__750 6 5)
                                           (0b10 : (BitVec 2)))
                                         (BEq.beq (Sail.BitVec.extractLsb v__750 1 0)
                                           (0b01 : (BitVec 2))))))
                                then
                                  let mapping21_ : (BitVec 3) := (Sail.BitVec.extractLsb v__750 4 2)
                                  let mapping20_ : (BitVec 3) := (Sail.BitVec.extractLsb v__750 9 7)
                                  match ((encdec_creg_backwards mapping20_), (encdec_creg_backwards
                                    mapping21_)) with
                                  | (rsd, rs2) =>
                                    if (← (extensionEnabled Ext_Zca))
                                    then (pure (some true))
                                    else (pure none)
                                else (pure none)) with
                              | .some result => (pure result)
                              | none =>
                                match (← do
                                  let v__744 := head_exp_
                                  if (Bool.and
                                       (let mapping23_ : (BitVec 3) :=
                                         (Sail.BitVec.extractLsb v__744 4 2)
                                       let mapping22_ : (BitVec 3) :=
                                         (Sail.BitVec.extractLsb v__744 9 7)
                                       (Bool.and (encdec_creg_backwards_matches mapping22_)
                                         (encdec_creg_backwards_matches mapping23_)))
                                       (Bool.and
                                         (BEq.beq (Sail.BitVec.extractLsb v__744 15 10)
                                           (0b100011 : (BitVec 6)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__744 6 5)
                                             (0b11 : (BitVec 2)))
                                           (BEq.beq (Sail.BitVec.extractLsb v__744 1 0)
                                             (0b01 : (BitVec 2))))))
                                  then
                                    let mapping23_ : (BitVec 3) :=
                                      (Sail.BitVec.extractLsb v__744 4 2)
                                    let mapping22_ : (BitVec 3) :=
                                      (Sail.BitVec.extractLsb v__744 9 7)
                                    match ((encdec_creg_backwards mapping22_), (encdec_creg_backwards
                                      mapping23_)) with
                                    | (rsd, rs2) =>
                                      if (← (extensionEnabled Ext_Zca))
                                      then (pure (some true))
                                      else (pure none)
                                  else (pure none)) with
                                | .some result => (pure result)
                                | none =>
                                  match (← do
                                    let v__738 := head_exp_
                                    if (Bool.and
                                         (let mapping25_ : (BitVec 3) :=
                                           (Sail.BitVec.extractLsb v__738 4 2)
                                         let mapping24_ : (BitVec 3) :=
                                           (Sail.BitVec.extractLsb v__738 9 7)
                                         (Bool.and (encdec_creg_backwards_matches mapping24_)
                                           (encdec_creg_backwards_matches mapping25_)))
                                         (Bool.and
                                           (BEq.beq (Sail.BitVec.extractLsb v__738 15 10)
                                             (0b100111 : (BitVec 6)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__738 6 5)
                                               (0b00 : (BitVec 2)))
                                             (BEq.beq (Sail.BitVec.extractLsb v__738 1 0)
                                               (0b01 : (BitVec 2))))))
                                    then
                                      let mapping25_ : (BitVec 3) :=
                                        (Sail.BitVec.extractLsb v__738 4 2)
                                      let mapping24_ : (BitVec 3) :=
                                        (Sail.BitVec.extractLsb v__738 9 7)
                                      match ((encdec_creg_backwards mapping24_), (encdec_creg_backwards
                                        mapping25_)) with
                                      | (rsd, rs2) =>
                                        if (Bool.and (BEq.beq xlen 64)
                                             (← (extensionEnabled Ext_Zca)))
                                        then (pure (some true))
                                        else (pure none)
                                    else (pure none)) with
                                  | .some result => (pure result)
                                  | none =>
                                    match (← do
                                      let v__732 := head_exp_
                                      if (Bool.and
                                           (let mapping27_ : (BitVec 3) :=
                                             (Sail.BitVec.extractLsb v__732 4 2)
                                           let mapping26_ : (BitVec 3) :=
                                             (Sail.BitVec.extractLsb v__732 9 7)
                                           (Bool.and (encdec_creg_backwards_matches mapping26_)
                                             (encdec_creg_backwards_matches mapping27_)))
                                           (Bool.and
                                             (BEq.beq (Sail.BitVec.extractLsb v__732 15 10)
                                               (0b100111 : (BitVec 6)))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__732 6 5)
                                                 (0b01 : (BitVec 2)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__732 1 0)
                                                 (0b01 : (BitVec 2))))))
                                      then
                                        let mapping27_ : (BitVec 3) :=
                                          (Sail.BitVec.extractLsb v__732 4 2)
                                        let mapping26_ : (BitVec 3) :=
                                          (Sail.BitVec.extractLsb v__732 9 7)
                                        match ((encdec_creg_backwards mapping26_), (encdec_creg_backwards
                                          mapping27_)) with
                                        | (rsd, rs2) =>
                                          if (Bool.and (BEq.beq xlen 64)
                                               (← (extensionEnabled Ext_Zca)))
                                          then (pure (some true))
                                          else (pure none)
                                      else (pure none)) with
                                    | .some result => (pure result)
                                    | none =>
                                      match (← do
                                        let v__726 := head_exp_
                                        if (Bool.and (← (extensionEnabled Ext_Zca))
                                             (Bool.and
                                               (BEq.beq (Sail.BitVec.extractLsb v__726 15 13)
                                                 (0b101 : (BitVec 3)))
                                               (BEq.beq (Sail.BitVec.extractLsb v__726 1 0)
                                                 (0b01 : (BitVec 2)))))
                                        then (pure (some true))
                                        else
                                          if (Bool.and
                                               (let mapping28_ : (BitVec 3) :=
                                                 (Sail.BitVec.extractLsb v__726 9 7)
                                               (encdec_creg_backwards_matches mapping28_))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__726 15 13)
                                                   (0b110 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__726 1 0)
                                                   (0b01 : (BitVec 2)))))
                                          then
                                            let mapping28_ : (BitVec 3) :=
                                              (Sail.BitVec.extractLsb v__726 9 7)
                                            let rs := (encdec_creg_backwards mapping28_)
                                            if (← (extensionEnabled Ext_Zca))
                                            then (pure (some true))
                                            else (pure none)
                                          else (pure none)) with
                                      | .some result => (pure result)
                                      | none =>
                                        match (← do
                                          let v__723 := head_exp_
                                          if (Bool.and
                                               (let mapping29_ : (BitVec 3) :=
                                                 (Sail.BitVec.extractLsb v__723 9 7)
                                               (encdec_creg_backwards_matches mapping29_))
                                               (Bool.and
                                                 (BEq.beq (Sail.BitVec.extractLsb v__723 15 13)
                                                   (0b111 : (BitVec 3)))
                                                 (BEq.beq (Sail.BitVec.extractLsb v__723 1 0)
                                                   (0b01 : (BitVec 2)))))
                                          then
                                            let mapping29_ : (BitVec 3) :=
                                              (Sail.BitVec.extractLsb v__723 9 7)
                                            let rs := (encdec_creg_backwards mapping29_)
                                            if (← (extensionEnabled Ext_Zca))
                                            then (pure (some true))
                                            else (pure none)
                                          else (pure none)) with
                                        | .some result => (pure result)
                                        | none =>
                                          match (← do
                                            let v__720 := head_exp_
                                            if (Bool.and
                                                 (let mapping30_ : (BitVec 5) :=
                                                   (Sail.BitVec.extractLsb v__720 11 7)
                                                 (encdec_reg_backwards_matches mapping30_))
                                                 (Bool.and
                                                   (BEq.beq (Sail.BitVec.extractLsb v__720 15 13)
                                                     (0b000 : (BitVec 3)))
                                                   (BEq.beq (Sail.BitVec.extractLsb v__720 1 0)
                                                     (0b10 : (BitVec 2)))))
                                            then
                                              let nzui5 : (BitVec 1) :=
                                                (Sail.BitVec.extractLsb v__720 12 12)
                                              let nzui40 : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__720 6 2)
                                              let mapping30_ : (BitVec 5) :=
                                                (Sail.BitVec.extractLsb v__720 11 7)
                                              let rsd := (encdec_reg_backwards mapping30_)
                                              if (Bool.and
                                                   (bne (nzui5 ++ nzui40) (0b000000 : (BitVec 6)))
                                                   (Bool.and (bne rsd zreg)
                                                     (Bool.and
                                                       (Bool.or (BEq.beq xlen 64)
                                                         (BEq.beq nzui5 (0b0 : (BitVec 1))))
                                                       (← (extensionEnabled Ext_Zca)))))
                                              then (pure (some true))
                                              else (pure none)
                                            else (pure none)) with
                                          | .some result => (pure result)
                                          | none =>
                                            match (← do
                                              let v__717 := head_exp_
                                              if (Bool.and
                                                   (let mapping31_ : (BitVec 5) :=
                                                     (Sail.BitVec.extractLsb v__717 11 7)
                                                   (encdec_reg_backwards_matches mapping31_))
                                                   (Bool.and
                                                     (BEq.beq (Sail.BitVec.extractLsb v__717 15 13)
                                                       (0b010 : (BitVec 3)))
                                                     (BEq.beq (Sail.BitVec.extractLsb v__717 1 0)
                                                       (0b10 : (BitVec 2)))))
                                              then
                                                let mapping31_ : (BitVec 5) :=
                                                  (Sail.BitVec.extractLsb v__717 11 7)
                                                let rd := (encdec_reg_backwards mapping31_)
                                                if (Bool.and (bne rd zreg)
                                                     (← (extensionEnabled Ext_Zca)))
                                                then (pure (some true))
                                                else (pure none)
                                              else (pure none)) with
                                            | .some result => (pure result)
                                            | none =>
                                              match (← do
                                                let v__714 := head_exp_
                                                if (Bool.and
                                                     (let mapping32_ : (BitVec 5) :=
                                                       (Sail.BitVec.extractLsb v__714 11 7)
                                                     (encdec_reg_backwards_matches mapping32_))
                                                     (Bool.and
                                                       (BEq.beq
                                                         (Sail.BitVec.extractLsb v__714 15 13)
                                                         (0b011 : (BitVec 3)))
                                                       (BEq.beq (Sail.BitVec.extractLsb v__714 1 0)
                                                         (0b10 : (BitVec 2)))))
                                                then
                                                  let mapping32_ : (BitVec 5) :=
                                                    (Sail.BitVec.extractLsb v__714 11 7)
                                                  let rd := (encdec_reg_backwards mapping32_)
                                                  if (Bool.and (bne rd zreg)
                                                       (Bool.and (BEq.beq xlen 64)
                                                         (← (extensionEnabled Ext_Zca))))
                                                  then (pure (some true))
                                                  else (pure none)
                                                else (pure none)) with
                                              | .some result => (pure result)
                                              | none =>
                                                match (← do
                                                  let v__711 := head_exp_
                                                  if (Bool.and
                                                       (let mapping33_ : (BitVec 5) :=
                                                         (Sail.BitVec.extractLsb v__711 6 2)
                                                       (encdec_reg_backwards_matches mapping33_))
                                                       (Bool.and
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__711 15 13)
                                                           (0b110 : (BitVec 3)))
                                                         (BEq.beq
                                                           (Sail.BitVec.extractLsb v__711 1 0)
                                                           (0b10 : (BitVec 2)))))
                                                  then
                                                    let mapping33_ : (BitVec 5) :=
                                                      (Sail.BitVec.extractLsb v__711 6 2)
                                                    let rs2 := (encdec_reg_backwards mapping33_)
                                                    if (← (extensionEnabled Ext_Zca))
                                                    then (pure (some true))
                                                    else (pure none)
                                                  else (pure none)) with
                                                | .some result => (pure result)
                                                | none =>
                                                  match (← do
                                                    let v__708 := head_exp_
                                                    if (Bool.and
                                                         (let mapping34_ : (BitVec 5) :=
                                                           (Sail.BitVec.extractLsb v__708 6 2)
                                                         (encdec_reg_backwards_matches mapping34_))
                                                         (Bool.and
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__708 15 13)
                                                             (0b111 : (BitVec 3)))
                                                           (BEq.beq
                                                             (Sail.BitVec.extractLsb v__708 1 0)
                                                             (0b10 : (BitVec 2)))))
                                                    then
                                                      let mapping34_ : (BitVec 5) :=
                                                        (Sail.BitVec.extractLsb v__708 6 2)
                                                      let rs2 := (encdec_reg_backwards mapping34_)
                                                      if (Bool.and (BEq.beq xlen 64)
                                                           (← (extensionEnabled Ext_Zca)))
                                                      then (pure (some true))
                                                      else (pure none)
                                                    else (pure none)) with
                                                  | .some result => (pure result)
                                                  | none =>
                                                    match (← do
                                                      let v__703 := head_exp_
                                                      if (Bool.and
                                                           (let mapping35_ : (BitVec 5) :=
                                                             (Sail.BitVec.extractLsb v__703 11 7)
                                                           (encdec_reg_backwards_matches mapping35_))
                                                           (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__703 15 12)
                                                               (0x8 : (BitVec 4)))
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb v__703 6 0)
                                                               (0b0000010 : (BitVec 7)))))
                                                      then
                                                        let mapping35_ : (BitVec 5) :=
                                                          (Sail.BitVec.extractLsb v__703 11 7)
                                                        let rs1 := (encdec_reg_backwards mapping35_)
                                                        if (Bool.and (bne rs1 zreg)
                                                             (← (extensionEnabled Ext_Zca)))
                                                        then (pure (some true))
                                                        else (pure none)
                                                      else (pure none)) with
                                                    | .some result => (pure result)
                                                    | none =>
                                                      match (← do
                                                        let v__698 := head_exp_
                                                        if (Bool.and
                                                             (let mapping36_ : (BitVec 5) :=
                                                               (Sail.BitVec.extractLsb v__698 11 7)
                                                             (encdec_reg_backwards_matches
                                                               mapping36_))
                                                             (Bool.and
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__698 15
                                                                   12) (0x9 : (BitVec 4)))
                                                               (BEq.beq
                                                                 (Sail.BitVec.extractLsb v__698 6 0)
                                                                 (0b0000010 : (BitVec 7)))))
                                                        then
                                                          let mapping36_ : (BitVec 5) :=
                                                            (Sail.BitVec.extractLsb v__698 11 7)
                                                          let rs1 :=
                                                            (encdec_reg_backwards mapping36_)
                                                          if (Bool.and (bne rs1 zreg)
                                                               (← (extensionEnabled Ext_Zca)))
                                                          then (pure (some true))
                                                          else (pure none)
                                                        else (pure none)) with
                                                      | .some result => (pure result)
                                                      | none =>
                                                        match (← do
                                                          let v__694 := head_exp_
                                                          if (Bool.and
                                                               (let mapping38_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__694 6 2)
                                                               let mapping37_ : (BitVec 5) :=
                                                                 (Sail.BitVec.extractLsb v__694 11 7)
                                                               (Bool.and
                                                                 (encdec_reg_backwards_matches
                                                                   mapping37_)
                                                                 (encdec_reg_backwards_matches
                                                                   mapping38_)))
                                                               (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__694 15
                                                                     12) (0x8 : (BitVec 4)))
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb v__694 1
                                                                     0) (0b10 : (BitVec 2)))))
                                                          then
                                                            let mapping38_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__694 6 2)
                                                            let mapping37_ : (BitVec 5) :=
                                                              (Sail.BitVec.extractLsb v__694 11 7)
                                                            match ((encdec_reg_backwards mapping37_), (encdec_reg_backwards
                                                              mapping38_)) with
                                                            | (rd, rs2) =>
                                                              if (Bool.and (bne rd zreg)
                                                                   (Bool.and (bne rs2 zreg)
                                                                     (← (extensionEnabled Ext_Zca))))
                                                              then (pure (some true))
                                                              else (pure none)
                                                          else (pure none)) with
                                                        | .some result => (pure result)
                                                        | none =>
                                                          match (← do
                                                            let v__684 := head_exp_
                                                            if (Bool.and
                                                                 (← (extensionEnabled Ext_Zca))
                                                                 (BEq.beq v__684
                                                                   (0x9002 : (BitVec 16))))
                                                            then (pure (some true))
                                                            else
                                                              if (Bool.and
                                                                   (let mapping40_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__684
                                                                       6 2)
                                                                   let mapping39_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__684
                                                                       11 7)
                                                                   (Bool.and
                                                                     (encdec_reg_backwards_matches
                                                                       mapping39_)
                                                                     (encdec_reg_backwards_matches
                                                                       mapping40_)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__684 15 12)
                                                                       (0x9 : (BitVec 4)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__684 1 0)
                                                                       (0b10 : (BitVec 2)))))
                                                              then
                                                                let mapping40_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__684 6 2)
                                                                let mapping39_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__684 11
                                                                    7)
                                                                match ((encdec_reg_backwards
                                                                  mapping39_), (encdec_reg_backwards
                                                                  mapping40_)) with
                                                                | (rsd, rs2) =>
                                                                  if (Bool.and (bne rsd zreg)
                                                                       (Bool.and (bne rs2 zreg)
                                                                         (← (extensionEnabled
                                                                             Ext_Zca))))
                                                                  then (pure (some true))
                                                                  else (pure none)
                                                              else (pure none)) with
                                                          | .some result => (pure result)
                                                          | none =>
                                                            match (let v__675 := head_exp_
                                                            if (Bool.and
                                                                 (let im5 : (BitVec 1) :=
                                                                   (Sail.BitVec.extractLsb v__675 12
                                                                     12)
                                                                 let im40 : (BitVec 5) :=
                                                                   (Sail.BitVec.extractLsb v__675 6
                                                                     2)
                                                                 (bne (im5 ++ im40)
                                                                   (0b000000 : (BitVec 6))))
                                                                 (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__675
                                                                       15 13) (0b000 : (BitVec 3)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__675 11 7)
                                                                       (0b00000 : (BitVec 5)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__675 1 0)
                                                                       (0b01 : (BitVec 2))))))
                                                            then (some true)
                                                            else
                                                              if (Bool.and
                                                                   (let mapping41_ : (BitVec 5) :=
                                                                     (Sail.BitVec.extractLsb v__675
                                                                       11 7)
                                                                   (encdec_reg_backwards_matches
                                                                     mapping41_))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__675 15 12)
                                                                       (0x0 : (BitVec 4)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__675 6 0)
                                                                       (0b0000001 : (BitVec 7)))))
                                                              then
                                                                let mapping41_ : (BitVec 5) :=
                                                                  (Sail.BitVec.extractLsb v__675 11
                                                                    7)
                                                                let rsd :=
                                                                  (encdec_reg_backwards mapping41_)
                                                                if (bne rsd zreg)
                                                                then (some true)
                                                                else none
                                                              else none) with
                                                            | .some result => (pure result)
                                                            | none =>
                                                              match (let v__662 := head_exp_
                                                              if (Bool.and
                                                                   (BEq.beq
                                                                     (Sail.BitVec.extractLsb v__662
                                                                       15 13) (0b010 : (BitVec 3)))
                                                                   (Bool.and
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__662 11 7)
                                                                       (0b00000 : (BitVec 5)))
                                                                     (BEq.beq
                                                                       (Sail.BitVec.extractLsb
                                                                         v__662 1 0)
                                                                       (0b01 : (BitVec 2)))))
                                                              then (some true)
                                                              else
                                                                if (Bool.and
                                                                     (let imm17 : (BitVec 1) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__662 12 12)
                                                                     let imm1612 : (BitVec 5) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__662 6 2)
                                                                     (bne (imm17 ++ imm1612)
                                                                       (0b000000 : (BitVec 6))))
                                                                     (Bool.and
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__662 15 13)
                                                                         (0b011 : (BitVec 3)))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__662 11 7)
                                                                           (0b00000 : (BitVec 5)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__662 1 0)
                                                                           (0b01 : (BitVec 2))))))
                                                                then (some true)
                                                                else
                                                                  if (Bool.and
                                                                       (let mapping42_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__662 6 2)
                                                                       (encdec_reg_backwards_matches
                                                                         mapping42_))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__662 15 7)
                                                                           (0b100000000 : (BitVec 9)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__662 1 0)
                                                                           (0b10 : (BitVec 2)))))
                                                                  then
                                                                    let mapping42_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__662
                                                                        6 2)
                                                                    let rs2 :=
                                                                      (encdec_reg_backwards
                                                                        mapping42_)
                                                                    if (bne rs2 zreg)
                                                                    then (some true)
                                                                    else none
                                                                  else none) with
                                                              | .some result => (pure result)
                                                              | none =>
                                                                match (let v__657 := head_exp_
                                                                if (Bool.and
                                                                     (let mapping43_ : (BitVec 5) :=
                                                                       (Sail.BitVec.extractLsb
                                                                         v__657 6 2)
                                                                     (encdec_reg_backwards_matches
                                                                       mapping43_))
                                                                     (Bool.and
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__657 15 7)
                                                                         (0b100100000 : (BitVec 9)))
                                                                       (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           v__657 1 0)
                                                                         (0b10 : (BitVec 2)))))
                                                                then
                                                                  let mapping43_ : (BitVec 5) :=
                                                                    (Sail.BitVec.extractLsb v__657 6
                                                                      2)
                                                                  let rs2 :=
                                                                    (encdec_reg_backwards mapping43_)
                                                                  if (bne rs2 zreg)
                                                                  then (some true)
                                                                  else none
                                                                else none) with
                                                                | .some result => (pure result)
                                                                | none =>
                                                                  match (let v__654 := head_exp_
                                                                  if (Bool.and
                                                                       (let mapping44_ : (BitVec 5) :=
                                                                         (Sail.BitVec.extractLsb
                                                                           v__654 11 7)
                                                                       (encdec_reg_backwards_matches
                                                                         mapping44_))
                                                                       (Bool.and
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__654 15 13)
                                                                           (0b000 : (BitVec 3)))
                                                                         (BEq.beq
                                                                           (Sail.BitVec.extractLsb
                                                                             v__654 1 0)
                                                                           (0b10 : (BitVec 2)))))
                                                                  then
                                                                    let nzui5 : (BitVec 1) :=
                                                                      (Sail.BitVec.extractLsb v__654
                                                                        12 12)
                                                                    let nzui40 : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__654
                                                                        6 2)
                                                                    let mapping44_ : (BitVec 5) :=
                                                                      (Sail.BitVec.extractLsb v__654
                                                                        11 7)
                                                                    let rsd :=
                                                                      (encdec_reg_backwards
                                                                        mapping44_)
                                                                    if (Bool.and
                                                                         (Bool.or
                                                                           (BEq.beq
                                                                             (nzui5 ++ nzui40)
                                                                             (0b000000 : (BitVec 6)))
                                                                           (BEq.beq rsd zreg))
                                                                         (Bool.or (BEq.beq xlen 64)
                                                                           (BEq.beq nzui5
                                                                             (0b0 : (BitVec 1)))))
                                                                    then (some true)
                                                                    else none
                                                                  else none) with
                                                                  | .some result => (pure result)
                                                                  | none =>
                                                                    match (let v__648 := head_exp_
                                                                    if (Bool.and
                                                                         (let mapping45_ : (BitVec 3) :=
                                                                           (Sail.BitVec.extractLsb
                                                                             v__648 9 7)
                                                                         (encdec_creg_backwards_matches
                                                                           mapping45_))
                                                                         (Bool.and
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__648 15 10)
                                                                             (0b100000 : (BitVec 6)))
                                                                           (BEq.beq
                                                                             (Sail.BitVec.extractLsb
                                                                               v__648 6 0)
                                                                             (0b0000001 : (BitVec 7)))))
                                                                    then
                                                                      let mapping45_ : (BitVec 3) :=
                                                                        (Sail.BitVec.extractLsb
                                                                          v__648 9 7)
                                                                      match (encdec_creg_backwards
                                                                        mapping45_) with
                                                                      | rsd => (some true)
                                                                    else none) with
                                                                    | .some result => (pure result)
                                                                    | none =>
                                                                      match (let v__642 := head_exp_
                                                                      if (Bool.and
                                                                           (let mapping46_ : (BitVec 3) :=
                                                                             (Sail.BitVec.extractLsb
                                                                               v__642 9 7)
                                                                           (encdec_creg_backwards_matches
                                                                             mapping46_))
                                                                           (Bool.and
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__642 15 10)
                                                                               (0b100001 : (BitVec 6)))
                                                                             (BEq.beq
                                                                               (Sail.BitVec.extractLsb
                                                                                 v__642 6 0)
                                                                               (0b0000001 : (BitVec 7)))))
                                                                      then
                                                                        let mapping46_ : (BitVec 3) :=
                                                                          (Sail.BitVec.extractLsb
                                                                            v__642 9 7)
                                                                        match (encdec_creg_backwards
                                                                          mapping46_) with
                                                                        | rsd => (some true)
                                                                      else none) with
                                                                      | .some result =>
                                                                        (pure result)
                                                                      | none =>
                                                                        match head_exp_ with
                                                                        | s => (pure true)

def execute_WFI (_ : Unit) : SailM Retired := do
  match (← readReg cur_privilege) with
  | Machine =>
    let _ : Unit := (platform_wfi ())
    (pure RETIRE_SUCCESS)
  | Supervisor =>
    if (BEq.beq (_get_Mstatus_TW (← readReg mstatus)) (0b1 : (BitVec 1)))
    then
      (handle_illegal ())
      (pure RETIRE_FAIL)
    else
      let _ : Unit := (platform_wfi ())
      (pure RETIRE_SUCCESS)
  | User =>
    (handle_illegal ())
    (pure RETIRE_FAIL)

def execute_UTYPE (imm : (BitVec 20)) (rd : regidx) (op : uop) : SailM Retired := do
  let off : xlenbits := (sign_extend (m := ((2 ^i 3) *i 8)) (imm ++ (0x000 : (BitVec 12))))
  (wX_bits rd
    (← do
      match op with
      | RISCV_LUI => (pure off)
      | RISCV_AUIPC => (pure ((← (get_arch_pc ())) + off))))
  (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex114884# : Bool, k_ex114883# : Bool -/
def execute_STORECON (aq : Bool) (rl : Bool) (rs2 : regidx) (rs1 : regidx) (width : word_width) (rd : regidx) : SailM Retired := do
  let width_bytes := (size_bytes_forwards width)
  assert (width_bytes ≤b xlen_bytes) "riscv_insts_aext.sail:116.34-116.35"
  if (BEq.beq (← (speculate_conditional ())) false)
  then
    (wX_bits rd (zero_extend (m := ((2 ^i 3) *i 8)) (0b1 : (BitVec 1))))
    (pure RETIRE_SUCCESS)
  else
    match (← (ext_data_get_addr rs1 (zeros_implicit (n := ((2 ^i 3) *i 8))) (Write Data)
        width_bytes)) with
    | .Ext_DataAddr_Error e =>
      let _ : Unit := (ext_handle_data_check_error e)
      (pure RETIRE_FAIL)
    | .Ext_DataAddr_OK vaddr =>
      if (not (is_aligned (virtaddr_bits vaddr) width))
      then
        (handle_mem_exception vaddr (E_SAMO_Addr_Align ()))
        (pure RETIRE_FAIL)
      else
        match (← (translateAddr vaddr (Write Data))) with
        | .TR_Failure (e, _) =>
          (handle_mem_exception vaddr e)
          (pure RETIRE_FAIL)
        | .TR_Address (addr, _) =>
          if (not (match_reservation (physaddr_bits addr)))
          then
            (wX_bits rd (zero_extend (m := ((2 ^i 3) *i 8)) (0b1 : (BitVec 1))))
            (cancel_reservation ())
            (pure RETIRE_SUCCESS)
          else
            match (← (mem_write_ea addr width_bytes (Bool.and aq rl) rl true)) with
            | .Err e =>
              (handle_mem_exception vaddr e)
              (pure RETIRE_FAIL)
            | .Ok _ =>
              let rs2_val ← do (rX_bits rs2)
              match (← (mem_write_value addr width_bytes
                  (Sail.BitVec.extractLsb rs2_val ((width_bytes *i 8) -i 1) 0) (Bool.and aq rl) rl
                  true)) with
              | .Ok true =>
                (wX_bits rd (zero_extend (m := ((2 ^i 3) *i 8)) (0b0 : (BitVec 1))))
                (cancel_reservation ())
                (pure RETIRE_SUCCESS)
              | .Ok false =>
                (wX_bits rd (zero_extend (m := ((2 ^i 3) *i 8)) (0b1 : (BitVec 1))))
                (cancel_reservation ())
                (pure RETIRE_SUCCESS)
              | .Err e =>
                (handle_mem_exception vaddr e)
                (pure RETIRE_FAIL)

/-- Type quantifiers: k_ex114896# : Bool, k_ex114895# : Bool -/
def execute_STORE (imm : (BitVec 12)) (rs2 : regidx) (rs1 : regidx) (width : word_width) (aq : Bool) (rl : Bool) : SailM Retired := do
  let offset : xlenbits := (sign_extend (m := ((2 ^i 3) *i 8)) imm)
  let width_bytes := (size_bytes_forwards width)
  assert (width_bytes ≤b xlen_bytes) "riscv_insts_base.sail:360.34-360.35"
  match (← (ext_data_get_addr rs1 offset (Write Data) width_bytes)) with
  | .Ext_DataAddr_Error e =>
    let _ : Unit := (ext_handle_data_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_DataAddr_OK vaddr =>
    if (check_misaligned vaddr width)
    then
      (handle_mem_exception vaddr (E_SAMO_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      match (← (translateAddr vaddr (Write Data))) with
      | .TR_Failure (e, _) =>
        (handle_mem_exception vaddr e)
        (pure RETIRE_FAIL)
      | .TR_Address (paddr, _) =>
        match (← (mem_write_ea paddr width_bytes aq rl false)) with
        | .Err e =>
          (handle_mem_exception vaddr e)
          (pure RETIRE_FAIL)
        | .Ok _ =>
          let rs2_val ← do (rX_bits rs2)
          match (← (mem_write_value paddr width_bytes
              (Sail.BitVec.extractLsb rs2_val ((width_bytes *i 8) -i 1) 0) aq rl false)) with
          | .Ok true => (pure RETIRE_SUCCESS)
          | .Ok false =>
            (internal_error "riscv_insts_base.sail" 378 "store got false from mem_write_value")
          | .Err e =>
            (handle_mem_exception vaddr e)
            (pure RETIRE_FAIL)

def execute_SRET (_ : Unit) : SailM Retired := do
  let sret_illegal ← (( do
    match (← readReg cur_privilege) with
    | User => (pure true)
    | Supervisor =>
      (pure (Bool.or (not (← (extensionEnabled Ext_S)))
          (BEq.beq (_get_Mstatus_TSR (← readReg mstatus)) (0b1 : (BitVec 1)))))
    | Machine => (pure (not (← (extensionEnabled Ext_S)))) ) : SailM Bool )
  if sret_illegal
  then
    (handle_illegal ())
    (pure RETIRE_FAIL)
  else
    if (not (ext_check_xret_priv Supervisor))
    then
      let _ : Unit := (ext_fail_xret_priv ())
      (pure RETIRE_FAIL)
    else
      (set_next_pc
        (← (exception_handler (← readReg cur_privilege) (CTL_SRET ()) (← readReg PC))))
      (pure RETIRE_SUCCESS)

def execute_SHIFTIWOP (shamt : (BitVec 5)) (rs1 : regidx) (rd : regidx) (op : sopw) : SailM Retired := do
  let rs1_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs1)) 31 0))
  let result : (BitVec 32) :=
    match op with
    | RISCV_SLLIW => (shift_bits_left rs1_val shamt)
    | RISCV_SRLIW => (shift_bits_right rs1_val shamt)
    | RISCV_SRAIW => (shift_bits_right_arith rs1_val shamt)
  (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) result))
  (pure RETIRE_SUCCESS)

def execute_SHIFTIOP (shamt : (BitVec 6)) (rs1 : regidx) (rd : regidx) (op : sop) : SailM Retired := do
  (wX_bits rd
    (← do
      match op with
      | RISCV_SLLI => (pure (shift_bits_left (← (rX_bits rs1)) shamt))
      | RISCV_SRLI => (pure (shift_bits_right (← (rX_bits rs1)) shamt))
      | RISCV_SRAI => (pure (shift_bits_right_arith (← (rX_bits rs1)) shamt))))
  (pure RETIRE_SUCCESS)

def execute_SFENCE_VMA (rs1 : regidx) (rs2 : regidx) : SailM Retired := do
  let addr ← do
    if (bne rs1 zreg)
    then (pure (some (← (rX_bits rs1))))
    else (pure none)
  let asid ← do
    if (bne rs2 zreg)
    then (pure (some (Sail.BitVec.extractLsb (← (rX_bits rs2)) (asidlen -i 1) 0)))
    else (pure none)
  match (← readReg cur_privilege) with
  | User =>
    (handle_illegal ())
    (pure RETIRE_FAIL)
  | Supervisor =>
    let b__0 ← do (pure (_get_Mstatus_TVM (← readReg mstatus)))
    if (BEq.beq b__0 (0b1 : (BitVec 1)))
    then
      (handle_illegal ())
      (pure RETIRE_FAIL)
    else
      (flush_TLB asid addr)
      (pure RETIRE_SUCCESS)
  | Machine =>
    (flush_TLB asid addr)
    (pure RETIRE_SUCCESS)

def execute_RTYPEW (rs2 : regidx) (rs1 : regidx) (rd : regidx) (op : ropw) : SailM Retired := do
  let rs1_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs1)) 31 0))
  let rs2_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs2)) 31 0))
  let result : (BitVec 32) :=
    match op with
    | RISCV_ADDW => (rs1_val + rs2_val)
    | RISCV_SUBW => (rs1_val - rs2_val)
    | RISCV_SLLW => (shift_bits_left rs1_val (Sail.BitVec.extractLsb rs2_val 4 0))
    | RISCV_SRLW => (shift_bits_right rs1_val (Sail.BitVec.extractLsb rs2_val 4 0))
    | RISCV_SRAW => (shift_bits_right_arith rs1_val (Sail.BitVec.extractLsb rs2_val 4 0))
  (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) result))
  (pure RETIRE_SUCCESS)

def execute_RTYPE (rs2 : regidx) (rs1 : regidx) (rd : regidx) (op : rop) : SailM Retired := do
  (wX_bits rd
    (← do
      match op with
      | RISCV_ADD => (pure ((← (rX_bits rs1)) + (← (rX_bits rs2))))
      | RISCV_SLT =>
        (pure (zero_extend (m := ((2 ^i 3) *i 8))
            (bool_to_bits (zopz0zI_s (← (rX_bits rs1)) (← (rX_bits rs2))))))
      | RISCV_SLTU =>
        (pure (zero_extend (m := ((2 ^i 3) *i 8))
            (bool_to_bits (zopz0zI_u (← (rX_bits rs1)) (← (rX_bits rs2))))))
      | RISCV_AND => (pure ((← (rX_bits rs1)) &&& (← (rX_bits rs2))))
      | RISCV_OR => (pure ((← (rX_bits rs1)) ||| (← (rX_bits rs2))))
      | RISCV_XOR => (pure ((← (rX_bits rs1)) ^^^ (← (rX_bits rs2))))
      | RISCV_SLL =>
        (pure (shift_bits_left (← (rX_bits rs1))
            (Sail.BitVec.extractLsb (← (rX_bits rs2)) (log2_xlen -i 1) 0)))
      | RISCV_SRL =>
        (pure (shift_bits_right (← (rX_bits rs1))
            (Sail.BitVec.extractLsb (← (rX_bits rs2)) (log2_xlen -i 1) 0)))
      | RISCV_SUB => (pure ((← (rX_bits rs1)) - (← (rX_bits rs2))))
      | RISCV_SRA =>
        (pure (shift_bits_right_arith (← (rX_bits rs1))
            (Sail.BitVec.extractLsb (← (rX_bits rs2)) (log2_xlen -i 1) 0)))))
  (pure RETIRE_SUCCESS)

def execute_RISCV_JALR (imm : (BitVec 12)) (rs1 : regidx) (rd : regidx) : SailM Retired := do
  let t ← (( do (pure ((← (rX_bits rs1)) + (sign_extend (m := ((2 ^i 3) *i 8)) imm))) ) : SailM
    xlenbits )
  match (ext_control_check_addr t) with
  | .Ext_ControlAddr_Error e =>
    let _ : Unit := (ext_handle_control_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_ControlAddr_OK addr =>
    let target := (BitVec.update (virtaddr_bits addr) 0 0#1)
    if (Bool.and (← (bit_to_bool (BitVec.access target 1))) (not (← (extensionEnabled Ext_Zca))))
    then
      (handle_mem_exception addr (E_Fetch_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      (wX_bits rd (← (get_next_pc ())))
      (set_next_pc target)
      (pure RETIRE_SUCCESS)

def execute_RISCV_JAL (imm : (BitVec 21)) (rd : regidx) : SailM Retired := do
  let target ← do (pure ((← readReg PC) + (sign_extend (m := ((2 ^i 3) *i 8)) imm)))
  match (ext_control_check_pc target) with
  | .Ext_ControlAddr_Error e =>
    let _ : Unit := (ext_handle_control_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_ControlAddr_OK target =>
    let target_bits := (virtaddr_bits target)
    if (Bool.and (← (bit_to_bool (BitVec.access target_bits 1)))
         (not (← (extensionEnabled Ext_Zca))))
    then
      (handle_mem_exception target (E_Fetch_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      (wX_bits rd (← (get_next_pc ())))
      (set_next_pc target_bits)
      (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex115000# : Bool -/
def execute_REMW (rs2 : regidx) (rs1 : regidx) (rd : regidx) (s : Bool) : SailM Retired := do
  let rs1_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs1)) 31 0))
  let rs2_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs2)) 31 0))
  let rs1_int : Int :=
    if s
    then (BitVec.toInt rs1_val)
    else (BitVec.toNat rs1_val)
  let rs2_int : Int :=
    if s
    then (BitVec.toInt rs2_val)
    else (BitVec.toNat rs2_val)
  let r : Int :=
    if (BEq.beq rs2_int 0)
    then rs1_int
    else (Int.tmod rs1_int rs2_int)
  (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) (to_bits 32 r)))
  (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex115015# : Bool -/
def execute_REM (rs2 : regidx) (rs1 : regidx) (rd : regidx) (s : Bool) : SailM Retired := do
  let rs1_val ← do (rX_bits rs1)
  let rs2_val ← do (rX_bits rs2)
  let rs1_int : Int :=
    if s
    then (BitVec.toInt rs1_val)
    else (BitVec.toNat rs1_val)
  let rs2_int : Int :=
    if s
    then (BitVec.toInt rs2_val)
    else (BitVec.toNat rs2_val)
  let r : Int :=
    if (BEq.beq rs2_int 0)
    then rs1_int
    else (Int.tmod rs1_int rs2_int)
  (wX_bits rd (to_bits xlen r))
  (pure RETIRE_SUCCESS)

def execute_MULW (rs2 : regidx) (rs1 : regidx) (rd : regidx) : SailM Retired := do
  let rs1_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs1)) 31 0))
  let rs2_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs2)) 31 0))
  let rs1_int : Int := (BitVec.toInt rs1_val)
  let rs2_int : Int := (BitVec.toInt rs2_val)
  let result32 := (Sail.BitVec.extractLsb (to_bits 64 (rs1_int *i rs2_int)) 31 0)
  let result : xlenbits := (sign_extend (m := ((2 ^i 3) *i 8)) result32)
  (wX_bits rd result)
  (pure RETIRE_SUCCESS)

def execute_MUL (rs2 : regidx) (rs1 : regidx) (rd : regidx) (mul_op : mul_op) : SailM Retired := do
  let rs1_val ← do (rX_bits rs1)
  let rs2_val ← do (rX_bits rs2)
  let rs1_int : Int :=
    if mul_op.signed_rs1
    then (BitVec.toInt rs1_val)
    else (BitVec.toNat rs1_val)
  let rs2_int : Int :=
    if mul_op.signed_rs2
    then (BitVec.toInt rs2_val)
    else (BitVec.toNat rs2_val)
  let result_wide := (to_bits (2 *i xlen) (rs1_int *i rs2_int))
  let result :=
    if mul_op.high
    then (Sail.BitVec.extractLsb result_wide ((2 *i xlen) -i 1) xlen)
    else (Sail.BitVec.extractLsb result_wide (xlen -i 1) 0)
  (wX_bits rd result)
  (pure RETIRE_SUCCESS)

def execute_MRET (_ : Unit) : SailM Retired := do
  if (bne (← readReg cur_privilege) Machine)
  then
    (handle_illegal ())
    (pure RETIRE_FAIL)
  else
    if (not (ext_check_xret_priv Machine))
    then
      let _ : Unit := (ext_fail_xret_priv ())
      (pure RETIRE_FAIL)
    else
      (set_next_pc
        (← (exception_handler (← readReg cur_privilege) (CTL_MRET ()) (← readReg PC))))
      (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex115053# : Bool, k_ex115052# : Bool -/
def execute_LOADRES (aq : Bool) (rl : Bool) (rs1 : regidx) (width : word_width) (rd : regidx) : SailM Retired := do
  let width_bytes := (size_bytes_forwards width)
  assert (width_bytes ≤b xlen_bytes) "riscv_insts_aext.sail:77.34-77.35"
  match (← (ext_data_get_addr rs1 (zeros_implicit (n := ((2 ^i 3) *i 8))) (Read Data) width_bytes)) with
  | .Ext_DataAddr_Error e =>
    let _ : Unit := (ext_handle_data_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_DataAddr_OK vaddr =>
    if (not (is_aligned (virtaddr_bits vaddr) width))
    then
      (handle_mem_exception vaddr (E_Load_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      match (← (translateAddr vaddr (Read Data))) with
      | .TR_Failure (e, _) =>
        (handle_mem_exception vaddr e)
        (pure RETIRE_FAIL)
      | .TR_Address (addr, _) =>
        match (← (mem_read (Read Data) addr width_bytes aq (Bool.and aq rl) true)) with
        | .Ok result =>
          (load_reservation (physaddr_bits addr))
          (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) result))
          (pure RETIRE_SUCCESS)
        | .Err e =>
          (handle_mem_exception vaddr e)
          (pure RETIRE_FAIL)

/-- Type quantifiers: k_ex115059# : Bool, k_ex115058# : Bool, k_ex115057# : Bool -/
def execute_LOAD (imm : (BitVec 12)) (rs1 : regidx) (rd : regidx) (is_unsigned : Bool) (width : word_width) (aq : Bool) (rl : Bool) : SailM Retired := do
  let offset : xlenbits := (sign_extend (m := ((2 ^i 3) *i 8)) imm)
  let width_bytes := (size_bytes_forwards width)
  assert (width_bytes ≤b xlen_bytes) "riscv_insts_base.sail:304.34-304.35"
  match (← (ext_data_get_addr rs1 offset (Read Data) width_bytes)) with
  | .Ext_DataAddr_Error e =>
    let _ : Unit := (ext_handle_data_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_DataAddr_OK vaddr =>
    if (check_misaligned vaddr width)
    then
      (handle_mem_exception vaddr (E_Load_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      match (← (translateAddr vaddr (Read Data))) with
      | .TR_Failure (e, _) =>
        (handle_mem_exception vaddr e)
        (pure RETIRE_FAIL)
      | .TR_Address (paddr, _) =>
        match (← (mem_read (Read Data) paddr width_bytes aq rl false)) with
        | .Ok result =>
          (wX_bits rd (extend_value is_unsigned result))
          (pure RETIRE_SUCCESS)
        | .Err e =>
          (handle_mem_exception vaddr e)
          (pure RETIRE_FAIL)

def execute_ITYPE (imm : (BitVec 12)) (rs1 : regidx) (rd : regidx) (op : iop) : SailM Retired := do
  let immext : xlenbits := (sign_extend (m := ((2 ^i 3) *i 8)) imm)
  (wX_bits rd
    (← do
      match op with
      | RISCV_ADDI => (pure ((← (rX_bits rs1)) + immext))
      | RISCV_SLTI =>
        (pure (zero_extend (m := ((2 ^i 3) *i 8))
            (bool_to_bits (zopz0zI_s (← (rX_bits rs1)) immext))))
      | RISCV_SLTIU =>
        (pure (zero_extend (m := ((2 ^i 3) *i 8))
            (bool_to_bits (zopz0zI_u (← (rX_bits rs1)) immext))))
      | RISCV_ANDI => (pure ((← (rX_bits rs1)) &&& immext))
      | RISCV_ORI => (pure ((← (rX_bits rs1)) ||| immext))
      | RISCV_XORI => (pure ((← (rX_bits rs1)) ^^^ immext))))
  (pure RETIRE_SUCCESS)

def execute_ILLEGAL (s : (BitVec 32)) : SailM Retired := do
  (handle_illegal ())
  (pure RETIRE_FAIL)

def execute_FENCE_TSO (pred : (BitVec 4)) (succ : (BitVec 4)) : SailM Retired := do
  match (pred, succ) with
  | (v__860, v__861) =>
    if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__860 1 0) (0b11 : (BitVec 2)))
         (BEq.beq (Sail.BitVec.extractLsb v__861 1 0) (0b11 : (BitVec 2))))
    then (sail_barrier Barrier_RISCV_tso)
    else
      if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__860 1 0) (0b00 : (BitVec 2)))
           (BEq.beq (Sail.BitVec.extractLsb v__861 1 0) (0b00 : (BitVec 2))))
      then (pure ())
      else
        let _ : Unit := (print "FIXME: unsupported fence")
        (pure ())
  (pure RETIRE_SUCCESS)

def execute_FENCE_RESERVED (fm : (BitVec 4)) (pred : (BitVec 4)) (succ : (BitVec 4)) (rs : regidx) (rd : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_FENCEI_RESERVED (imm : (BitVec 12)) (rs : regidx) (rd : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_FENCEI (_ : Unit) : Retired :=
  RETIRE_SUCCESS

def execute_FENCE (pred : (BitVec 4)) (succ : (BitVec 4)) : SailM Retired := do
  let fiom ← do (is_fiom_active ())
  let pred := (effective_fence_set pred fiom)
  let succ := (effective_fence_set succ fiom)
  match (pred, succ) with
  | (v__820, v__821) =>
    if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b11 : (BitVec 2)))
         (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b11 : (BitVec 2))))
    then (sail_barrier Barrier_RISCV_rw_rw)
    else
      if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b10 : (BitVec 2)))
           (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b11 : (BitVec 2))))
      then (sail_barrier Barrier_RISCV_r_rw)
      else
        if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b10 : (BitVec 2)))
             (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b10 : (BitVec 2))))
        then (sail_barrier Barrier_RISCV_r_r)
        else
          if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b11 : (BitVec 2)))
               (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b01 : (BitVec 2))))
          then (sail_barrier Barrier_RISCV_rw_w)
          else
            if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b01 : (BitVec 2)))
                 (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b01 : (BitVec 2))))
            then (sail_barrier Barrier_RISCV_w_w)
            else
              if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b01 : (BitVec 2)))
                   (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b11 : (BitVec 2))))
              then (sail_barrier Barrier_RISCV_w_rw)
              else
                if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b11 : (BitVec 2)))
                     (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b10 : (BitVec 2))))
                then (sail_barrier Barrier_RISCV_rw_r)
                else
                  if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b10 : (BitVec 2)))
                       (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b01 : (BitVec 2))))
                  then (sail_barrier Barrier_RISCV_r_w)
                  else
                    if (Bool.and (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b01 : (BitVec 2)))
                         (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b10 : (BitVec 2))))
                    then (sail_barrier Barrier_RISCV_w_r)
                    else
                      if (BEq.beq (Sail.BitVec.extractLsb v__821 1 0) (0b00 : (BitVec 2)))
                      then (pure ())
                      else
                        if (BEq.beq (Sail.BitVec.extractLsb v__820 1 0) (0b00 : (BitVec 2)))
                        then (pure ())
                        else
                          let _ : Unit := (print "FIXME: unsupported fence")
                          (pure ())
  (pure RETIRE_SUCCESS)

def execute_ECALL (_ : Unit) : SailM Retired := do
  let t ← (( do
    (pure { trap := match (← readReg cur_privilege) with
            | User => (E_U_EnvCall ())
            | Supervisor => (E_S_EnvCall ())
            | Machine => (E_M_EnvCall ())
            excinfo := (none : (Option xlenbits))
            ext := none }) ) : SailM sync_exception )
  (set_next_pc (← (exception_handler (← readReg cur_privilege) (CTL_TRAP t) (← readReg PC))))
  (pure RETIRE_FAIL)

def execute_EBREAK (_ : Unit) : SailM Retired := do
  (handle_mem_exception (virtaddr (← readReg PC)) (E_Breakpoint ()))
  (pure RETIRE_FAIL)

/-- Type quantifiers: k_ex115110# : Bool -/
def execute_DIVW (rs2 : regidx) (rs1 : regidx) (rd : regidx) (s : Bool) : SailM Retired := do
  let rs1_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs1)) 31 0))
  let rs2_val ← do (pure (Sail.BitVec.extractLsb (← (rX_bits rs2)) 31 0))
  let rs1_int : Int :=
    if s
    then (BitVec.toInt rs1_val)
    else (BitVec.toNat rs1_val)
  let rs2_int : Int :=
    if s
    then (BitVec.toInt rs2_val)
    else (BitVec.toNat rs2_val)
  let q : Int :=
    if (BEq.beq rs2_int 0)
    then (-1)
    else (Int.tdiv rs1_int rs2_int)
  let q' : Int :=
    if (Bool.and s (q >b ((2 ^i 31) -i 1)))
    then (0 -i (2 ^i 31))
    else q
  (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) (to_bits 32 q')))
  (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex115128# : Bool -/
def execute_DIV (rs2 : regidx) (rs1 : regidx) (rd : regidx) (s : Bool) : SailM Retired := do
  let rs1_val ← do (rX_bits rs1)
  let rs2_val ← do (rX_bits rs2)
  let rs1_int : Int :=
    if s
    then (BitVec.toInt rs1_val)
    else (BitVec.toNat rs1_val)
  let rs2_int : Int :=
    if s
    then (BitVec.toInt rs2_val)
    else (BitVec.toNat rs2_val)
  let q : Int :=
    if (BEq.beq rs2_int 0)
    then (-1)
    else (Int.tdiv rs1_int rs2_int)
  let q' : Int :=
    if (Bool.and s (q >b xlen_max_signed))
    then xlen_min_signed
    else q
  (wX_bits rd (to_bits xlen q'))
  (pure RETIRE_SUCCESS)

def execute_C_XOR (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPE rs2 rsd rsd RISCV_XOR)

def execute_C_SWSP (uimm : (BitVec 6)) (rs2 : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b00 : (BitVec 2))))
  (execute_STORE imm rs2 sp WORD false false)

def execute_C_SW (uimm : (BitVec 5)) (rsc1 : cregidx) (rsc2 : cregidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b00 : (BitVec 2))))
  let rs1 := (creg2reg_idx rsc1)
  let rs2 := (creg2reg_idx rsc2)
  (execute_STORE imm rs2 rs1 WORD false false)

def execute_C_SUBW (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPEW rs2 rsd rsd RISCV_SUBW)

def execute_C_SUB (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPE rs2 rsd rsd RISCV_SUB)

def execute_C_SRLI_HINT (rsd : cregidx) : Retired :=
  RETIRE_SUCCESS

def execute_C_SRLI (shamt : (BitVec 6)) (rsd : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  (execute_SHIFTIOP shamt rsd rsd RISCV_SRLI)

def execute_C_SRAI_HINT (rsd : cregidx) : Retired :=
  RETIRE_SUCCESS

def execute_C_SRAI (shamt : (BitVec 6)) (rsd : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  (execute_SHIFTIOP shamt rsd rsd RISCV_SRAI)

def execute_C_SLLI_HINT (shamt : (BitVec 6)) (rsd : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_C_SLLI (shamt : (BitVec 6)) (rsd : regidx) : SailM Retired := do
  (execute_SHIFTIOP shamt rsd rsd RISCV_SLLI)

def execute_C_SDSP (uimm : (BitVec 6)) (rs2 : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b000 : (BitVec 3))))
  (execute_STORE imm rs2 sp DOUBLE false false)

def execute_C_SD (uimm : (BitVec 5)) (rsc1 : cregidx) (rsc2 : cregidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b000 : (BitVec 3))))
  let rs1 := (creg2reg_idx rsc1)
  let rs2 := (creg2reg_idx rsc2)
  (execute_STORE imm rs2 rs1 DOUBLE false false)

def execute_C_OR (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPE rs2 rsd rsd RISCV_OR)

def execute_C_NOP_HINT (imm : (BitVec 6)) : Retired :=
  RETIRE_SUCCESS

def execute_C_NOP (_ : Unit) : Retired :=
  RETIRE_SUCCESS

def execute_C_MV_HINT (rs2 : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_C_MV (rd : regidx) (rs2 : regidx) : SailM Retired := do
  (execute_RTYPE rs2 zreg rd RISCV_ADD)

def execute_C_LWSP (uimm : (BitVec 6)) (rd : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b00 : (BitVec 2))))
  (execute_LOAD imm sp rd false WORD false false)

def execute_C_LW (uimm : (BitVec 5)) (rsc : cregidx) (rdc : cregidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b00 : (BitVec 2))))
  let rd := (creg2reg_idx rdc)
  let rs := (creg2reg_idx rsc)
  (execute_LOAD imm rs rd false WORD false false)

def execute_C_LUI_HINT (imm : (BitVec 6)) : Retired :=
  RETIRE_SUCCESS

def execute_C_LUI (imm : (BitVec 6)) (rd : regidx) : SailM Retired := do
  let res : (BitVec 20) := (sign_extend (m := 20) imm)
  (execute_UTYPE res rd RISCV_LUI)

def execute_C_LI_HINT (imm : (BitVec 6)) : Retired :=
  RETIRE_SUCCESS

def execute_C_LI (imm : (BitVec 6)) (rd : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (sign_extend (m := 12) imm)
  (execute_ITYPE imm zreg rd RISCV_ADDI)

def execute_C_LDSP (uimm : (BitVec 6)) (rd : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b000 : (BitVec 3))))
  (execute_LOAD imm sp rd false DOUBLE false false)

def execute_C_LD (uimm : (BitVec 5)) (rsc : cregidx) (rdc : cregidx) : SailM Retired := do
  let imm : (BitVec 12) := (zero_extend (m := 12) (uimm ++ (0b000 : (BitVec 3))))
  let rd := (creg2reg_idx rdc)
  let rs := (creg2reg_idx rsc)
  (execute_LOAD imm rs rd false DOUBLE false false)

def execute_C_JR (rs1 : regidx) : SailM Retired := do
  (execute_RISCV_JALR (zeros_implicit (n := 12)) rs1 zreg)

def execute_C_JALR (rs1 : regidx) : SailM Retired := do
  (execute_RISCV_JALR (zeros_implicit (n := 12)) rs1 ra)

def execute_C_JAL (imm : (BitVec 11)) : SailM Retired := do
  (execute_RISCV_JAL (sign_extend (m := 21) (imm ++ (0b0 : (BitVec 1)))) ra)

def execute_C_J (imm : (BitVec 11)) : SailM Retired := do
  (execute_RISCV_JAL (sign_extend (m := 21) (imm ++ (0b0 : (BitVec 1)))) zreg)

def execute_C_ILLEGAL (s : (BitVec 16)) : SailM Retired := do
  (handle_illegal ())
  (pure RETIRE_FAIL)

def execute_C_EBREAK (_ : Unit) : SailM Retired := do
  (execute_EBREAK ())

def execute_BTYPE (imm : (BitVec 13)) (rs2 : regidx) (rs1 : regidx) (op : bop) : SailM Retired := do
  let taken ← (( do
    match op with
    | RISCV_BEQ => (pure (BEq.beq (← (rX_bits rs1)) (← (rX_bits rs2))))
    | RISCV_BNE => (pure (bne (← (rX_bits rs1)) (← (rX_bits rs2))))
    | RISCV_BLT => (pure (zopz0zI_s (← (rX_bits rs1)) (← (rX_bits rs2))))
    | RISCV_BGE => (pure (zopz0zKzJ_s (← (rX_bits rs1)) (← (rX_bits rs2))))
    | RISCV_BLTU => (pure (zopz0zI_u (← (rX_bits rs1)) (← (rX_bits rs2))))
    | RISCV_BGEU => (pure (zopz0zKzJ_u (← (rX_bits rs1)) (← (rX_bits rs2)))) ) : SailM Bool )
  if taken
  then
    let target ← do (pure ((← readReg PC) + (sign_extend (m := ((2 ^i 3) *i 8)) imm)))
    match (ext_control_check_pc target) with
    | .Ext_ControlAddr_Error e =>
      let _ : Unit := (ext_handle_control_check_error e)
      (pure RETIRE_FAIL)
    | .Ext_ControlAddr_OK target =>
      let target_bits := (virtaddr_bits target)
      if (Bool.and (← (bit_to_bool (BitVec.access target_bits 1)))
           (not (← (extensionEnabled Ext_Zca))))
      then
        (handle_mem_exception target (E_Fetch_Addr_Align ()))
        (pure RETIRE_FAIL)
      else
        (set_next_pc target_bits)
        (pure RETIRE_SUCCESS)
  else (pure RETIRE_SUCCESS)

def execute_C_BNEZ (imm : (BitVec 8)) (rs : cregidx) : SailM Retired := do
  (execute_BTYPE (sign_extend (m := 13) (imm ++ (0b0 : (BitVec 1)))) zreg (creg2reg_idx rs)
    RISCV_BNE)

def execute_C_BEQZ (imm : (BitVec 8)) (rs : cregidx) : SailM Retired := do
  (execute_BTYPE (sign_extend (m := 13) (imm ++ (0b0 : (BitVec 1)))) zreg (creg2reg_idx rs)
    RISCV_BEQ)

def execute_C_ANDI (imm : (BitVec 6)) (rsd : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  (execute_ITYPE (sign_extend (m := 12) imm) rsd rsd RISCV_ANDI)

def execute_C_AND (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPE rs2 rsd rsd RISCV_AND)

def execute_C_ADD_HINT (rs2 : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_C_ADDW (rsd : cregidx) (rs2 : cregidx) : SailM Retired := do
  let rsd := (creg2reg_idx rsd)
  let rs2 := (creg2reg_idx rs2)
  (execute_RTYPEW rs2 rsd rsd RISCV_ADDW)

def execute_C_ADDI_HINT (rsd : regidx) : Retired :=
  RETIRE_SUCCESS

def execute_ADDIW (imm : (BitVec 12)) (rs1 : regidx) (rd : regidx) : SailM Retired := do
  let result ← do (pure ((← (rX_bits rs1)) + (sign_extend (m := ((2 ^i 3) *i 8)) imm)))
  (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) (Sail.BitVec.extractLsb result 31 0)))
  (pure RETIRE_SUCCESS)

def execute_C_ADDIW (imm : (BitVec 6)) (rsd : regidx) : SailM Retired := do
  (execute_ADDIW (sign_extend (m := 12) imm) rsd rsd)

def execute_C_ADDI4SPN (rdc : cregidx) (nzimm : (BitVec 8)) : SailM Retired := do
  let imm : (BitVec 12) := ((0b00 : (BitVec 2)) ++ (nzimm ++ (0b00 : (BitVec 2))))
  let rd := (creg2reg_idx rdc)
  (execute_ITYPE imm sp rd RISCV_ADDI)

def execute_C_ADDI16SP (imm : (BitVec 6)) : SailM Retired := do
  let imm : (BitVec 12) := (sign_extend (m := 12) (imm ++ (0x0 : (BitVec 4))))
  (execute_ITYPE imm sp sp RISCV_ADDI)

def execute_C_ADDI (nzi : (BitVec 6)) (rsd : regidx) : SailM Retired := do
  let imm : (BitVec 12) := (sign_extend (m := 12) nzi)
  (execute_ITYPE imm rsd rsd RISCV_ADDI)

def execute_C_ADD (rsd : regidx) (rs2 : regidx) : SailM Retired := do
  (execute_RTYPE rs2 rsd rsd RISCV_ADD)

def read_CSR (b__0 : (BitVec 12)) : SailM (BitVec (2 ^ 3 * 8)) := do
  if (BEq.beq b__0 (0x301 : (BitVec 12)))
  then readReg misa
  else
    if (BEq.beq b__0 (0x300 : (BitVec 12)))
    then (pure (Sail.BitVec.extractLsb (← readReg mstatus) (xlen -i 1) 0))
    else
      if (Bool.and (BEq.beq b__0 (0x310 : (BitVec 12))) (BEq.beq xlen 32))
      then (pure (Sail.BitVec.extractLsb (← readReg mstatus) 63 32))
      else
        if (BEq.beq b__0 (0x30A : (BitVec 12)))
        then (pure (Sail.BitVec.extractLsb (← readReg menvcfg) (xlen -i 1) 0))
        else
          if (Bool.and (BEq.beq b__0 (0x31A : (BitVec 12))) (BEq.beq xlen 32))
          then (pure (Sail.BitVec.extractLsb (← readReg menvcfg) 63 32))
          else
            if (BEq.beq b__0 (0x10A : (BitVec 12)))
            then (pure (Sail.BitVec.extractLsb (← readReg senvcfg) (xlen -i 1) 0))
            else
              if (BEq.beq b__0 (0x304 : (BitVec 12)))
              then readReg mie
              else
                if (BEq.beq b__0 (0x344 : (BitVec 12)))
                then readReg mip
                else
                  if (BEq.beq b__0 (0x302 : (BitVec 12)))
                  then (pure (Sail.BitVec.extractLsb (← readReg medeleg) (xlen -i 1) 0))
                  else
                    if (Bool.and (BEq.beq b__0 (0x312 : (BitVec 12))) (BEq.beq xlen 32))
                    then (pure (Sail.BitVec.extractLsb (← readReg medeleg) 63 32))
                    else
                      if (BEq.beq b__0 (0x303 : (BitVec 12)))
                      then readReg mideleg
                      else
                        if (BEq.beq b__0 (0x342 : (BitVec 12)))
                        then readReg mcause
                        else
                          if (BEq.beq b__0 (0x343 : (BitVec 12)))
                          then readReg mtval
                          else
                            if (BEq.beq b__0 (0x340 : (BitVec 12)))
                            then readReg mscratch
                            else
                              if (BEq.beq b__0 (0x106 : (BitVec 12)))
                              then
                                (pure (zero_extend (m := ((2 ^i 3) *i 8)) (← readReg scounteren)))
                              else
                                if (BEq.beq b__0 (0x306 : (BitVec 12)))
                                then
                                  (pure (zero_extend (m := ((2 ^i 3) *i 8)) (← readReg mcounteren)))
                                else
                                  if (BEq.beq b__0 (0x320 : (BitVec 12)))
                                  then
                                    (pure (zero_extend (m := ((2 ^i 3) *i 8))
                                        (← readReg mcountinhibit)))
                                  else
                                    if (BEq.beq b__0 (0xF11 : (BitVec 12)))
                                    then
                                      (pure (zero_extend (m := ((2 ^i 3) *i 8))
                                          (← readReg mvendorid)))
                                    else
                                      if (BEq.beq b__0 (0xF12 : (BitVec 12)))
                                      then readReg marchid
                                      else
                                        if (BEq.beq b__0 (0xF13 : (BitVec 12)))
                                        then readReg mimpid
                                        else
                                          if (BEq.beq b__0 (0xF14 : (BitVec 12)))
                                          then readReg mhartid
                                          else
                                            if (BEq.beq b__0 (0xF15 : (BitVec 12)))
                                            then readReg mconfigptr
                                            else
                                              if (BEq.beq b__0 (0x100 : (BitVec 12)))
                                              then
                                                (pure (Sail.BitVec.extractLsb
                                                    (lower_mstatus (← readReg mstatus))
                                                    (xlen -i 1) 0))
                                              else
                                                if (BEq.beq b__0 (0x144 : (BitVec 12)))
                                                then
                                                  (pure (lower_mip (← readReg mip)
                                                      (← readReg mideleg)))
                                                else
                                                  if (BEq.beq b__0 (0x104 : (BitVec 12)))
                                                  then
                                                    (pure (lower_mie (← readReg mie)
                                                        (← readReg mideleg)))
                                                  else
                                                    if (BEq.beq b__0 (0x140 : (BitVec 12)))
                                                    then readReg sscratch
                                                    else
                                                      if (BEq.beq b__0 (0x142 : (BitVec 12)))
                                                      then readReg scause
                                                      else
                                                        if (BEq.beq b__0 (0x143 : (BitVec 12)))
                                                        then readReg stval
                                                        else
                                                          if (BEq.beq b__0 (0x7A0 : (BitVec 12)))
                                                          then
                                                            (pure (Complement.complement
                                                                (← readReg tselect)))
                                                          else
                                                            if (Bool.and
                                                                 (BEq.beq
                                                                   (Sail.BitVec.extractLsb b__0 11 4)
                                                                   (0x3A : (BitVec 8)))
                                                                 (let idx : (BitVec 4) :=
                                                                   (Sail.BitVec.extractLsb b__0 3 0)
                                                                 (Bool.or
                                                                   (BEq.beq (BitVec.access idx 0)
                                                                     0#1) (BEq.beq xlen 32))))
                                                            then
                                                              let idx : (BitVec 4) :=
                                                                (Sail.BitVec.extractLsb b__0 3 0)
                                                              (pmpReadCfgReg (BitVec.toNat idx))
                                                            else
                                                              if (BEq.beq
                                                                   (Sail.BitVec.extractLsb b__0 11 4)
                                                                   (0x3B : (BitVec 8)))
                                                              then
                                                                let idx : (BitVec 4) :=
                                                                  (Sail.BitVec.extractLsb b__0 3 0)
                                                                (pmpReadAddrReg
                                                                  (BitVec.toNat
                                                                    ((0b00 : (BitVec 2)) ++ idx)))
                                                              else
                                                                if (BEq.beq
                                                                     (Sail.BitVec.extractLsb b__0 11
                                                                       4) (0x3C : (BitVec 8)))
                                                                then
                                                                  let idx : (BitVec 4) :=
                                                                    (Sail.BitVec.extractLsb b__0 3 0)
                                                                  (pmpReadAddrReg
                                                                    (BitVec.toNat
                                                                      ((0b01 : (BitVec 2)) ++ idx)))
                                                                else
                                                                  if (BEq.beq
                                                                       (Sail.BitVec.extractLsb b__0
                                                                         11 4) (0x3D : (BitVec 8)))
                                                                  then
                                                                    let idx : (BitVec 4) :=
                                                                      (Sail.BitVec.extractLsb b__0 3
                                                                        0)
                                                                    (pmpReadAddrReg
                                                                      (BitVec.toNat
                                                                        ((0b10 : (BitVec 2)) ++ idx)))
                                                                  else
                                                                    if (BEq.beq
                                                                         (Sail.BitVec.extractLsb
                                                                           b__0 11 4)
                                                                         (0x3E : (BitVec 8)))
                                                                    then
                                                                      let idx : (BitVec 4) :=
                                                                        (Sail.BitVec.extractLsb b__0
                                                                          3 0)
                                                                      (pmpReadAddrReg
                                                                        (BitVec.toNat
                                                                          ((0b11 : (BitVec 2)) ++ idx)))
                                                                    else
                                                                      if (BEq.beq b__0
                                                                           (0x008 : (BitVec 12)))
                                                                      then
                                                                        (pure (zero_extend
                                                                            (m := ((2 ^i 3) *i 8))
                                                                            (← readReg vstart)))
                                                                      else
                                                                        if (BEq.beq b__0
                                                                             (0x009 : (BitVec 12)))
                                                                        then
                                                                          (pure (zero_extend
                                                                              (m := ((2 ^i 3) *i 8))
                                                                              (_get_Vcsr_vxsat
                                                                                (← readReg vcsr))))
                                                                        else
                                                                          if (BEq.beq b__0
                                                                               (0x00A : (BitVec 12)))
                                                                          then
                                                                            (pure (zero_extend
                                                                                (m := ((2 ^i 3) *i 8))
                                                                                (_get_Vcsr_vxrm
                                                                                  (← readReg vcsr))))
                                                                          else
                                                                            if (BEq.beq b__0
                                                                                 (0x00F : (BitVec 12)))
                                                                            then
                                                                              (pure (zero_extend
                                                                                  (m := ((2 ^i 3) *i 8))
                                                                                  (← readReg vcsr)))
                                                                            else
                                                                              if (BEq.beq b__0
                                                                                   (0xC20 : (BitVec 12)))
                                                                              then readReg vl
                                                                              else
                                                                                if (BEq.beq b__0
                                                                                     (0xC21 : (BitVec 12)))
                                                                                then readReg vtype
                                                                                else
                                                                                  if (BEq.beq b__0
                                                                                       (0xC22 : (BitVec 12)))
                                                                                  then
                                                                                    (pure (get_vlenb
                                                                                        ()))
                                                                                  else
                                                                                    if (BEq.beq b__0
                                                                                         (0x105 : (BitVec 12)))
                                                                                    then
                                                                                      (get_stvec ())
                                                                                    else
                                                                                      if (BEq.beq
                                                                                           b__0
                                                                                           (0x141 : (BitVec 12)))
                                                                                      then
                                                                                        (get_xepc
                                                                                          Supervisor)
                                                                                      else
                                                                                        if (BEq.beq
                                                                                             b__0
                                                                                             (0x305 : (BitVec 12)))
                                                                                        then
                                                                                          (get_mtvec
                                                                                            ())
                                                                                        else
                                                                                          if (BEq.beq
                                                                                               b__0
                                                                                               (0x341 : (BitVec 12)))
                                                                                          then
                                                                                            (get_xepc
                                                                                              Machine)
                                                                                          else
                                                                                            if (Bool.and
                                                                                                 (BEq.beq
                                                                                                   (Sail.BitVec.extractLsb
                                                                                                     b__0
                                                                                                     11
                                                                                                     5)
                                                                                                   (0b0011001 : (BitVec 7)))
                                                                                                 (let index : (BitVec 5) :=
                                                                                                   (Sail.BitVec.extractLsb
                                                                                                     b__0
                                                                                                     4
                                                                                                     0)
                                                                                                 ((BitVec.toNat
                                                                                                     index) ≥b 3) : Bool))
                                                                                            then
                                                                                              let index : (BitVec 5) :=
                                                                                                (Sail.BitVec.extractLsb
                                                                                                  b__0
                                                                                                  4
                                                                                                  0)
                                                                                              (read_mhpmevent
                                                                                                (← (hpmidx_from_bits
                                                                                                    index)))
                                                                                            else
                                                                                              if (Bool.and
                                                                                                   (BEq.beq
                                                                                                     (Sail.BitVec.extractLsb
                                                                                                       b__0
                                                                                                       11
                                                                                                       5)
                                                                                                     (0b1011000 : (BitVec 7)))
                                                                                                   (let index : (BitVec 5) :=
                                                                                                     (Sail.BitVec.extractLsb
                                                                                                       b__0
                                                                                                       4
                                                                                                       0)
                                                                                                   ((BitVec.toNat
                                                                                                       index) ≥b 3) : Bool))
                                                                                              then
                                                                                                let index : (BitVec 5) :=
                                                                                                  (Sail.BitVec.extractLsb
                                                                                                    b__0
                                                                                                    4
                                                                                                    0)
                                                                                                (read_mhpmcounter
                                                                                                  (← (hpmidx_from_bits
                                                                                                      index)))
                                                                                              else
                                                                                                if (Bool.and
                                                                                                     (BEq.beq
                                                                                                       (Sail.BitVec.extractLsb
                                                                                                         b__0
                                                                                                         11
                                                                                                         5)
                                                                                                       (0b1011100 : (BitVec 7)))
                                                                                                     (let index : (BitVec 5) :=
                                                                                                       (Sail.BitVec.extractLsb
                                                                                                         b__0
                                                                                                         4
                                                                                                         0)
                                                                                                     (Bool.and
                                                                                                       (BEq.beq
                                                                                                         xlen
                                                                                                         32)
                                                                                                       (((BitVec.toNat
                                                                                                           index) ≥b 3) : Bool))))
                                                                                                then
                                                                                                  let index : (BitVec 5) :=
                                                                                                    (Sail.BitVec.extractLsb
                                                                                                      b__0
                                                                                                      4
                                                                                                      0)
                                                                                                  (read_mhpmcounterh
                                                                                                    (← (hpmidx_from_bits
                                                                                                        index)))
                                                                                                else
                                                                                                  if (Bool.and
                                                                                                       (BEq.beq
                                                                                                         (Sail.BitVec.extractLsb
                                                                                                           b__0
                                                                                                           11
                                                                                                           5)
                                                                                                         (0b1100000 : (BitVec 7)))
                                                                                                       (let index : (BitVec 5) :=
                                                                                                         (Sail.BitVec.extractLsb
                                                                                                           b__0
                                                                                                           4
                                                                                                           0)
                                                                                                       ((BitVec.toNat
                                                                                                           index) ≥b 3) : Bool))
                                                                                                  then
                                                                                                    let index : (BitVec 5) :=
                                                                                                      (Sail.BitVec.extractLsb
                                                                                                        b__0
                                                                                                        4
                                                                                                        0)
                                                                                                    (read_mhpmcounter
                                                                                                      (← (hpmidx_from_bits
                                                                                                          index)))
                                                                                                  else
                                                                                                    if (Bool.and
                                                                                                         (BEq.beq
                                                                                                           (Sail.BitVec.extractLsb
                                                                                                             b__0
                                                                                                             11
                                                                                                             5)
                                                                                                           (0b1100100 : (BitVec 7)))
                                                                                                         (let index : (BitVec 5) :=
                                                                                                           (Sail.BitVec.extractLsb
                                                                                                             b__0
                                                                                                             4
                                                                                                             0)
                                                                                                         (Bool.and
                                                                                                           (BEq.beq
                                                                                                             xlen
                                                                                                             32)
                                                                                                           (((BitVec.toNat
                                                                                                               index) ≥b 3) : Bool))))
                                                                                                    then
                                                                                                      let index : (BitVec 5) :=
                                                                                                        (Sail.BitVec.extractLsb
                                                                                                          b__0
                                                                                                          4
                                                                                                          0)
                                                                                                      (read_mhpmcounterh
                                                                                                        (← (hpmidx_from_bits
                                                                                                            index)))
                                                                                                    else
                                                                                                      if (Bool.and
                                                                                                           (BEq.beq
                                                                                                             (Sail.BitVec.extractLsb
                                                                                                               b__0
                                                                                                               11
                                                                                                               5)
                                                                                                             (0b0111001 : (BitVec 7)))
                                                                                                           (let index : (BitVec 5) :=
                                                                                                             (Sail.BitVec.extractLsb
                                                                                                               b__0
                                                                                                               4
                                                                                                               0)
                                                                                                           (Bool.and
                                                                                                             (BEq.beq
                                                                                                               xlen
                                                                                                               32)
                                                                                                             (((BitVec.toNat
                                                                                                                 index) ≥b 3) : Bool))))
                                                                                                      then
                                                                                                        let index : (BitVec 5) :=
                                                                                                          (Sail.BitVec.extractLsb
                                                                                                            b__0
                                                                                                            4
                                                                                                            0)
                                                                                                        (read_mhpmeventh
                                                                                                          (← (hpmidx_from_bits
                                                                                                              index)))
                                                                                                      else
                                                                                                        if (BEq.beq
                                                                                                             b__0
                                                                                                             (0xDA0 : (BitVec 12)))
                                                                                                        then
                                                                                                          (pure (zero_extend
                                                                                                              (m := ((2 ^i 3) *i 8))
                                                                                                              (← (get_scountovf
                                                                                                                  (← readReg cur_privilege)))))
                                                                                                        else
                                                                                                          if (BEq.beq
                                                                                                               b__0
                                                                                                               (0x015 : (BitVec 12)))
                                                                                                          then
                                                                                                            (read_seed_csr
                                                                                                              ())
                                                                                                          else
                                                                                                            if (BEq.beq
                                                                                                                 b__0
                                                                                                                 (0xC00 : (BitVec 12)))
                                                                                                            then
                                                                                                              (pure (Sail.BitVec.extractLsb
                                                                                                                  (← readReg mcycle)
                                                                                                                  (xlen -i 1)
                                                                                                                  0))
                                                                                                            else
                                                                                                              if (BEq.beq
                                                                                                                   b__0
                                                                                                                   (0xC01 : (BitVec 12)))
                                                                                                              then
                                                                                                                (pure (Sail.BitVec.extractLsb
                                                                                                                    (← readReg mtime)
                                                                                                                    (xlen -i 1)
                                                                                                                    0))
                                                                                                              else
                                                                                                                if (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0xC02 : (BitVec 12)))
                                                                                                                then
                                                                                                                  (pure (Sail.BitVec.extractLsb
                                                                                                                      (← readReg minstret)
                                                                                                                      (xlen -i 1)
                                                                                                                      0))
                                                                                                                else
                                                                                                                  if (Bool.and
                                                                                                                       (BEq.beq
                                                                                                                         b__0
                                                                                                                         (0xC80 : (BitVec 12)))
                                                                                                                       (BEq.beq
                                                                                                                         xlen
                                                                                                                         32))
                                                                                                                  then
                                                                                                                    (pure (Sail.BitVec.extractLsb
                                                                                                                        (← readReg mcycle)
                                                                                                                        63
                                                                                                                        32))
                                                                                                                  else
                                                                                                                    if (Bool.and
                                                                                                                         (BEq.beq
                                                                                                                           b__0
                                                                                                                           (0xC81 : (BitVec 12)))
                                                                                                                         (BEq.beq
                                                                                                                           xlen
                                                                                                                           32))
                                                                                                                    then
                                                                                                                      (pure (Sail.BitVec.extractLsb
                                                                                                                          (← readReg mtime)
                                                                                                                          63
                                                                                                                          32))
                                                                                                                    else
                                                                                                                      if (Bool.and
                                                                                                                           (BEq.beq
                                                                                                                             b__0
                                                                                                                             (0xC82 : (BitVec 12)))
                                                                                                                           (BEq.beq
                                                                                                                             xlen
                                                                                                                             32))
                                                                                                                      then
                                                                                                                        (pure (Sail.BitVec.extractLsb
                                                                                                                            (← readReg minstret)
                                                                                                                            63
                                                                                                                            32))
                                                                                                                      else
                                                                                                                        if (BEq.beq
                                                                                                                             b__0
                                                                                                                             (0xB00 : (BitVec 12)))
                                                                                                                        then
                                                                                                                          (pure (Sail.BitVec.extractLsb
                                                                                                                              (← readReg mcycle)
                                                                                                                              (xlen -i 1)
                                                                                                                              0))
                                                                                                                        else
                                                                                                                          if (BEq.beq
                                                                                                                               b__0
                                                                                                                               (0xB02 : (BitVec 12)))
                                                                                                                          then
                                                                                                                            (pure (Sail.BitVec.extractLsb
                                                                                                                                (← readReg minstret)
                                                                                                                                (xlen -i 1)
                                                                                                                                0))
                                                                                                                          else
                                                                                                                            if (Bool.and
                                                                                                                                 (BEq.beq
                                                                                                                                   b__0
                                                                                                                                   (0xB80 : (BitVec 12)))
                                                                                                                                 (BEq.beq
                                                                                                                                   xlen
                                                                                                                                   32))
                                                                                                                            then
                                                                                                                              (pure (Sail.BitVec.extractLsb
                                                                                                                                  (← readReg mcycle)
                                                                                                                                  63
                                                                                                                                  32))
                                                                                                                            else
                                                                                                                              if (Bool.and
                                                                                                                                   (BEq.beq
                                                                                                                                     b__0
                                                                                                                                     (0xB82 : (BitVec 12)))
                                                                                                                                   (BEq.beq
                                                                                                                                     xlen
                                                                                                                                     32))
                                                                                                                              then
                                                                                                                                (pure (Sail.BitVec.extractLsb
                                                                                                                                    (← readReg minstret)
                                                                                                                                    63
                                                                                                                                    32))
                                                                                                                              else
                                                                                                                                if (BEq.beq
                                                                                                                                     b__0
                                                                                                                                     (0x321 : (BitVec 12)))
                                                                                                                                then
                                                                                                                                  (pure (Sail.BitVec.extractLsb
                                                                                                                                      (← readReg mcyclecfg)
                                                                                                                                      (xlen -i 1)
                                                                                                                                      0))
                                                                                                                                else
                                                                                                                                  if (Bool.and
                                                                                                                                       (BEq.beq
                                                                                                                                         b__0
                                                                                                                                         (0x721 : (BitVec 12)))
                                                                                                                                       (BEq.beq
                                                                                                                                         xlen
                                                                                                                                         32))
                                                                                                                                  then
                                                                                                                                    (pure (Sail.BitVec.extractLsb
                                                                                                                                        (← readReg mcyclecfg)
                                                                                                                                        63
                                                                                                                                        32))
                                                                                                                                  else
                                                                                                                                    if (BEq.beq
                                                                                                                                         b__0
                                                                                                                                         (0x322 : (BitVec 12)))
                                                                                                                                    then
                                                                                                                                      (pure (Sail.BitVec.extractLsb
                                                                                                                                          (← readReg minstretcfg)
                                                                                                                                          (xlen -i 1)
                                                                                                                                          0))
                                                                                                                                    else
                                                                                                                                      if (Bool.and
                                                                                                                                           (BEq.beq
                                                                                                                                             b__0
                                                                                                                                             (0x722 : (BitVec 12)))
                                                                                                                                           (BEq.beq
                                                                                                                                             xlen
                                                                                                                                             32))
                                                                                                                                      then
                                                                                                                                        (pure (Sail.BitVec.extractLsb
                                                                                                                                            (← readReg minstretcfg)
                                                                                                                                            63
                                                                                                                                            32))
                                                                                                                                      else
                                                                                                                                        if (BEq.beq
                                                                                                                                             b__0
                                                                                                                                             (0x180 : (BitVec 12)))
                                                                                                                                        then
                                                                                                                                          readReg satp
                                                                                                                                        else
                                                                                                                                          (internal_error
                                                                                                                                            "riscv_csr_end.sail"
                                                                                                                                            17
                                                                                                                                            (HAppend.hAppend
                                                                                                                                              "Read from CSR that does not exist: "
                                                                                                                                              (BitVec.toFormatted
                                                                                                                                                b__0)))

def write_CSR (b__0 : (BitVec 12)) (value : (BitVec (2 ^ 3 * 8))) : SailM (BitVec (2 ^ 3 * 8)) := do
  if (BEq.beq b__0 (0x301 : (BitVec 12)))
  then
    writeReg misa (← (legalize_misa (← readReg misa) value))
    readReg misa
  else
    if (Bool.and (BEq.beq b__0 (0x300 : (BitVec 12))) (BEq.beq xlen 64))
    then
      writeReg mstatus (← (legalize_mstatus (← readReg mstatus) value))
      readReg mstatus
    else
      if (Bool.and (BEq.beq b__0 (0x300 : (BitVec 12))) (BEq.beq xlen 32))
      then
        writeReg mstatus (← (legalize_mstatus (← readReg mstatus)
            ((Sail.BitVec.extractLsb (← readReg mstatus) 63 32) ++ value)))
        (pure (Sail.BitVec.extractLsb (← readReg mstatus) 31 0))
      else
        if (Bool.and (BEq.beq b__0 (0x310 : (BitVec 12))) (BEq.beq xlen 32))
        then
          writeReg mstatus (← (legalize_mstatus (← readReg mstatus)
              (value ++ (Sail.BitVec.extractLsb (← readReg mstatus) 31 0))))
          (pure (Sail.BitVec.extractLsb (← readReg mstatus) 63 32))
        else
          if (Bool.and (BEq.beq b__0 (0x30A : (BitVec 12))) (BEq.beq xlen 32))
          then
            writeReg menvcfg (← (legalize_menvcfg (← readReg menvcfg)
                ((Sail.BitVec.extractLsb (← readReg menvcfg) 63 32) ++ value)))
            (pure (Sail.BitVec.extractLsb (← readReg menvcfg) 31 0))
          else
            if (Bool.and (BEq.beq b__0 (0x30A : (BitVec 12))) (BEq.beq xlen 64))
            then
              writeReg menvcfg (← (legalize_menvcfg (← readReg menvcfg) value))
              readReg menvcfg
            else
              if (Bool.and (BEq.beq b__0 (0x31A : (BitVec 12))) (BEq.beq xlen 32))
              then
                writeReg menvcfg (← (legalize_menvcfg (← readReg menvcfg)
                    (value ++ (Sail.BitVec.extractLsb (← readReg menvcfg) 31 0))))
                (pure (Sail.BitVec.extractLsb (← readReg menvcfg) 63 32))
              else
                if (BEq.beq b__0 (0x10A : (BitVec 12)))
                then
                  writeReg senvcfg (← (legalize_senvcfg (← readReg senvcfg)
                      (zero_extend (m := ((2 ^i 3) *i 8)) value)))
                  (pure (Sail.BitVec.extractLsb (← readReg senvcfg) (xlen -i 1) 0))
                else
                  if (BEq.beq b__0 (0x304 : (BitVec 12)))
                  then
                    writeReg mie (← (legalize_mie (← readReg mie) value))
                    readReg mie
                  else
                    if (BEq.beq b__0 (0x344 : (BitVec 12)))
                    then
                      writeReg mip (← (legalize_mip (← readReg mip) value))
                      readReg mip
                    else
                      if (Bool.and (BEq.beq b__0 (0x302 : (BitVec 12))) (BEq.beq xlen 64))
                      then
                        writeReg medeleg (legalize_medeleg (← readReg medeleg) value)
                        readReg medeleg
                      else
                        if (Bool.and (BEq.beq b__0 (0x302 : (BitVec 12))) (BEq.beq xlen 32))
                        then
                          writeReg medeleg (legalize_medeleg (← readReg medeleg)
                            ((Sail.BitVec.extractLsb (← readReg medeleg) 63 32) ++ value))
                          (pure (Sail.BitVec.extractLsb (← readReg medeleg) 31 0))
                        else
                          if (Bool.and (BEq.beq b__0 (0x312 : (BitVec 12))) (BEq.beq xlen 32))
                          then
                            writeReg medeleg (legalize_medeleg (← readReg medeleg)
                              (value ++ (Sail.BitVec.extractLsb (← readReg medeleg) 31 0)))
                            (pure (Sail.BitVec.extractLsb (← readReg medeleg) 63 32))
                          else
                            if (BEq.beq b__0 (0x303 : (BitVec 12)))
                            then
                              writeReg mideleg (legalize_mideleg (← readReg mideleg) value)
                              readReg mideleg
                            else
                              if (BEq.beq b__0 (0x342 : (BitVec 12)))
                              then
                                writeReg mcause value
                                readReg mcause
                              else
                                if (BEq.beq b__0 (0x343 : (BitVec 12)))
                                then
                                  writeReg mtval value
                                  readReg mtval
                                else
                                  if (BEq.beq b__0 (0x340 : (BitVec 12)))
                                  then
                                    writeReg mscratch value
                                    readReg mscratch
                                  else
                                    if (BEq.beq b__0 (0x106 : (BitVec 12)))
                                    then
                                      writeReg scounteren (legalize_scounteren
                                        (← readReg scounteren) value)
                                      (pure (zero_extend (m := ((2 ^i 3) *i 8))
                                          (← readReg scounteren)))
                                    else
                                      if (BEq.beq b__0 (0x306 : (BitVec 12)))
                                      then
                                        writeReg mcounteren (legalize_mcounteren
                                          (← readReg mcounteren) value)
                                        (pure (zero_extend (m := ((2 ^i 3) *i 8))
                                            (← readReg mcounteren)))
                                      else
                                        if (BEq.beq b__0 (0x320 : (BitVec 12)))
                                        then
                                          writeReg mcountinhibit (legalize_mcountinhibit
                                            (← readReg mcountinhibit) value)
                                          (pure (zero_extend (m := ((2 ^i 3) *i 8))
                                              (← readReg mcountinhibit)))
                                        else
                                          if (BEq.beq b__0 (0x100 : (BitVec 12)))
                                          then
                                            writeReg mstatus (← (legalize_sstatus
                                                (← readReg mstatus) value))
                                            (pure (Sail.BitVec.extractLsb (← readReg mstatus)
                                                (xlen -i 1) 0))
                                          else
                                            if (BEq.beq b__0 (0x144 : (BitVec 12)))
                                            then
                                              writeReg mip (legalize_sip (← readReg mip)
                                                (← readReg mideleg) value)
                                              readReg mip
                                            else
                                              if (BEq.beq b__0 (0x104 : (BitVec 12)))
                                              then
                                                writeReg mie (legalize_sie (← readReg mie)
                                                  (← readReg mideleg) value)
                                                readReg mie
                                              else
                                                if (BEq.beq b__0 (0x140 : (BitVec 12)))
                                                then
                                                  writeReg sscratch value
                                                  readReg sscratch
                                                else
                                                  if (BEq.beq b__0 (0x142 : (BitVec 12)))
                                                  then
                                                    writeReg scause value
                                                    readReg scause
                                                  else
                                                    if (BEq.beq b__0 (0x143 : (BitVec 12)))
                                                    then
                                                      writeReg stval value
                                                      readReg stval
                                                    else
                                                      if (BEq.beq b__0 (0x7A0 : (BitVec 12)))
                                                      then
                                                        writeReg tselect value
                                                        readReg tselect
                                                      else
                                                        if (Bool.and
                                                             (BEq.beq
                                                               (Sail.BitVec.extractLsb b__0 11 4)
                                                               (0x3A : (BitVec 8)))
                                                             (let idx : (BitVec 4) :=
                                                               (Sail.BitVec.extractLsb b__0 3 0)
                                                             (Bool.or
                                                               (BEq.beq (BitVec.access idx 0) 0#1)
                                                               (BEq.beq xlen 32))))
                                                        then
                                                          let idx : (BitVec 4) :=
                                                            (Sail.BitVec.extractLsb b__0 3 0)
                                                          let idx := (BitVec.toNat idx)
                                                          (pmpWriteCfgReg idx value)
                                                          (pmpReadCfgReg idx)
                                                        else
                                                          if (BEq.beq
                                                               (Sail.BitVec.extractLsb b__0 11 4)
                                                               (0x3B : (BitVec 8)))
                                                          then
                                                            let idx : (BitVec 4) :=
                                                              (Sail.BitVec.extractLsb b__0 3 0)
                                                            let idx :=
                                                              (BitVec.toNat
                                                                ((0b00 : (BitVec 2)) ++ idx))
                                                            (pmpWriteAddrReg idx value)
                                                            (pmpReadAddrReg idx)
                                                          else
                                                            if (BEq.beq
                                                                 (Sail.BitVec.extractLsb b__0 11 4)
                                                                 (0x3C : (BitVec 8)))
                                                            then
                                                              let idx : (BitVec 4) :=
                                                                (Sail.BitVec.extractLsb b__0 3 0)
                                                              let idx :=
                                                                (BitVec.toNat
                                                                  ((0b01 : (BitVec 2)) ++ idx))
                                                              (pmpWriteAddrReg idx value)
                                                              (pmpReadAddrReg idx)
                                                            else
                                                              if (BEq.beq
                                                                   (Sail.BitVec.extractLsb b__0 11 4)
                                                                   (0x3D : (BitVec 8)))
                                                              then
                                                                let idx : (BitVec 4) :=
                                                                  (Sail.BitVec.extractLsb b__0 3 0)
                                                                let idx :=
                                                                  (BitVec.toNat
                                                                    ((0b10 : (BitVec 2)) ++ idx))
                                                                (pmpWriteAddrReg idx value)
                                                                (pmpReadAddrReg idx)
                                                              else
                                                                if (BEq.beq
                                                                     (Sail.BitVec.extractLsb b__0 11
                                                                       4) (0x3E : (BitVec 8)))
                                                                then
                                                                  let idx : (BitVec 4) :=
                                                                    (Sail.BitVec.extractLsb b__0 3 0)
                                                                  let idx :=
                                                                    (BitVec.toNat
                                                                      ((0b11 : (BitVec 2)) ++ idx))
                                                                  (pmpWriteAddrReg idx value)
                                                                  (pmpReadAddrReg idx)
                                                                else
                                                                  if (BEq.beq b__0
                                                                       (0x008 : (BitVec 12)))
                                                                  then
                                                                    (set_vstart
                                                                      (Sail.BitVec.extractLsb value
                                                                        15 0))
                                                                    (pure (zero_extend
                                                                        (m := ((2 ^i 3) *i 8))
                                                                        (← readReg vstart)))
                                                                  else
                                                                    if (BEq.beq b__0
                                                                         (0x009 : (BitVec 12)))
                                                                    then
                                                                      (ext_write_vcsr
                                                                        (_get_Vcsr_vxrm
                                                                          (← readReg vcsr))
                                                                        (Sail.BitVec.extractLsb
                                                                          value 0 0))
                                                                      (pure (zero_extend
                                                                          (m := ((2 ^i 3) *i 8))
                                                                          (_get_Vcsr_vxsat
                                                                            (← readReg vcsr))))
                                                                    else
                                                                      if (BEq.beq b__0
                                                                           (0x00A : (BitVec 12)))
                                                                      then
                                                                        (ext_write_vcsr
                                                                          (Sail.BitVec.extractLsb
                                                                            value 1 0)
                                                                          (_get_Vcsr_vxsat
                                                                            (← readReg vcsr)))
                                                                        (pure (zero_extend
                                                                            (m := ((2 ^i 3) *i 8))
                                                                            (_get_Vcsr_vxrm
                                                                              (← readReg vcsr))))
                                                                      else
                                                                        if (BEq.beq b__0
                                                                             (0x00F : (BitVec 12)))
                                                                        then
                                                                          (ext_write_vcsr
                                                                            (Sail.BitVec.extractLsb
                                                                              value 2 1)
                                                                            (Sail.BitVec.extractLsb
                                                                              value 0 0))
                                                                          (pure (zero_extend
                                                                              (m := ((2 ^i 3) *i 8))
                                                                              (← readReg vcsr)))
                                                                        else
                                                                          if (BEq.beq b__0
                                                                               (0x105 : (BitVec 12)))
                                                                          then (set_stvec value)
                                                                          else
                                                                            if (BEq.beq b__0
                                                                                 (0x141 : (BitVec 12)))
                                                                            then
                                                                              (set_xepc Supervisor
                                                                                value)
                                                                            else
                                                                              if (BEq.beq b__0
                                                                                   (0x305 : (BitVec 12)))
                                                                              then (set_mtvec value)
                                                                              else
                                                                                if (BEq.beq b__0
                                                                                     (0x341 : (BitVec 12)))
                                                                                then
                                                                                  (set_xepc Machine
                                                                                    value)
                                                                                else
                                                                                  if (Bool.and
                                                                                       (BEq.beq
                                                                                         (Sail.BitVec.extractLsb
                                                                                           b__0 11 5)
                                                                                         (0b0011001 : (BitVec 7)))
                                                                                       (let index : (BitVec 5) :=
                                                                                         (Sail.BitVec.extractLsb
                                                                                           b__0 4 0)
                                                                                       ((BitVec.toNat
                                                                                           index) ≥b 3) : Bool))
                                                                                  then
                                                                                    let index : (BitVec 5) :=
                                                                                      (Sail.BitVec.extractLsb
                                                                                        b__0 4 0)
                                                                                    let index ← do
                                                                                      (hpmidx_from_bits
                                                                                        index)
                                                                                    (write_mhpmevent
                                                                                      index value)
                                                                                    (read_mhpmevent
                                                                                      index)
                                                                                  else
                                                                                    if (Bool.and
                                                                                         (BEq.beq
                                                                                           (Sail.BitVec.extractLsb
                                                                                             b__0 11
                                                                                             5)
                                                                                           (0b1011000 : (BitVec 7)))
                                                                                         (let index : (BitVec 5) :=
                                                                                           (Sail.BitVec.extractLsb
                                                                                             b__0 4
                                                                                             0)
                                                                                         ((BitVec.toNat
                                                                                             index) ≥b 3) : Bool))
                                                                                    then
                                                                                      let index : (BitVec 5) :=
                                                                                        (Sail.BitVec.extractLsb
                                                                                          b__0 4 0)
                                                                                      let index ← do
                                                                                        (hpmidx_from_bits
                                                                                          index)
                                                                                      (write_mhpmcounter
                                                                                        index value)
                                                                                      (read_mhpmcounter
                                                                                        index)
                                                                                    else
                                                                                      if (Bool.and
                                                                                           (BEq.beq
                                                                                             (Sail.BitVec.extractLsb
                                                                                               b__0
                                                                                               11 5)
                                                                                             (0b1011100 : (BitVec 7)))
                                                                                           (let index : (BitVec 5) :=
                                                                                             (Sail.BitVec.extractLsb
                                                                                               b__0
                                                                                               4 0)
                                                                                           (Bool.and
                                                                                             (BEq.beq
                                                                                               xlen
                                                                                               32)
                                                                                             (((BitVec.toNat
                                                                                                 index) ≥b 3) : Bool))))
                                                                                      then
                                                                                        let index : (BitVec 5) :=
                                                                                          (Sail.BitVec.extractLsb
                                                                                            b__0 4 0)
                                                                                        let index ← do
                                                                                          (hpmidx_from_bits
                                                                                            index)
                                                                                        (write_mhpmcounterh
                                                                                          index
                                                                                          value)
                                                                                        (read_mhpmcounterh
                                                                                          index)
                                                                                      else
                                                                                        if (Bool.and
                                                                                             (BEq.beq
                                                                                               (Sail.BitVec.extractLsb
                                                                                                 b__0
                                                                                                 11
                                                                                                 5)
                                                                                               (0b0111001 : (BitVec 7)))
                                                                                             (let index : (BitVec 5) :=
                                                                                               (Sail.BitVec.extractLsb
                                                                                                 b__0
                                                                                                 4 0)
                                                                                             (Bool.and
                                                                                               (BEq.beq
                                                                                                 xlen
                                                                                                 32)
                                                                                               (((BitVec.toNat
                                                                                                   index) ≥b 3) : Bool))))
                                                                                        then
                                                                                          let index : (BitVec 5) :=
                                                                                            (Sail.BitVec.extractLsb
                                                                                              b__0 4
                                                                                              0)
                                                                                          let index ← do
                                                                                            (hpmidx_from_bits
                                                                                              index)
                                                                                          (write_mhpmeventh
                                                                                            index
                                                                                            value)
                                                                                          (read_mhpmeventh
                                                                                            index)
                                                                                        else
                                                                                          if (BEq.beq
                                                                                               b__0
                                                                                               (0x015 : (BitVec 12)))
                                                                                          then
                                                                                            (pure (write_seed_csr
                                                                                                ()))
                                                                                          else
                                                                                            if (BEq.beq
                                                                                                 b__0
                                                                                                 (0xB00 : (BitVec 12)))
                                                                                            then
                                                                                              writeReg mcycle (Sail.BitVec.updateSubrange
                                                                                                (← readReg mcycle)
                                                                                                (xlen -i 1)
                                                                                                0
                                                                                                value)
                                                                                              (pure value)
                                                                                            else
                                                                                              if (BEq.beq
                                                                                                   b__0
                                                                                                   (0xB02 : (BitVec 12)))
                                                                                              then
                                                                                                writeReg minstret_write (some
                                                                                                  value)
                                                                                                (pure value)
                                                                                              else
                                                                                                if (Bool.and
                                                                                                     (BEq.beq
                                                                                                       b__0
                                                                                                       (0xB80 : (BitVec 12)))
                                                                                                     (BEq.beq
                                                                                                       xlen
                                                                                                       32))
                                                                                                then
                                                                                                  writeReg mcycle (Sail.BitVec.updateSubrange
                                                                                                    (← readReg mcycle)
                                                                                                    63
                                                                                                    32
                                                                                                    value)
                                                                                                  (pure value)
                                                                                                else
                                                                                                  if (Bool.and
                                                                                                       (BEq.beq
                                                                                                         b__0
                                                                                                         (0xB82 : (BitVec 12)))
                                                                                                       (BEq.beq
                                                                                                         xlen
                                                                                                         32))
                                                                                                  then
                                                                                                    writeReg minstreth_write (some
                                                                                                      value)
                                                                                                    (pure value)
                                                                                                  else
                                                                                                    if (Bool.and
                                                                                                         (BEq.beq
                                                                                                           b__0
                                                                                                           (0x321 : (BitVec 12)))
                                                                                                         (BEq.beq
                                                                                                           xlen
                                                                                                           64))
                                                                                                    then
                                                                                                      writeReg mcyclecfg (← (legalize_smcntrpmf
                                                                                                          (← readReg mcyclecfg)
                                                                                                          value))
                                                                                                      readReg mcyclecfg
                                                                                                    else
                                                                                                      if (Bool.and
                                                                                                           (BEq.beq
                                                                                                             b__0
                                                                                                             (0x321 : (BitVec 12)))
                                                                                                           (BEq.beq
                                                                                                             xlen
                                                                                                             32))
                                                                                                      then
                                                                                                        writeReg mcyclecfg (← (legalize_smcntrpmf
                                                                                                            (← readReg mcyclecfg)
                                                                                                            ((Sail.BitVec.extractLsb
                                                                                                                (← readReg mcyclecfg)
                                                                                                                63
                                                                                                                32) ++ value)))
                                                                                                        (pure (Sail.BitVec.extractLsb
                                                                                                            (← readReg mcyclecfg)
                                                                                                            (xlen -i 1)
                                                                                                            0))
                                                                                                      else
                                                                                                        if (Bool.and
                                                                                                             (BEq.beq
                                                                                                               b__0
                                                                                                               (0x721 : (BitVec 12)))
                                                                                                             (BEq.beq
                                                                                                               xlen
                                                                                                               32))
                                                                                                        then
                                                                                                          writeReg mcyclecfg (← (legalize_smcntrpmf
                                                                                                              (← readReg mcyclecfg)
                                                                                                              (value ++ (Sail.BitVec.extractLsb
                                                                                                                  (← readReg mcyclecfg)
                                                                                                                  31
                                                                                                                  0))))
                                                                                                          (pure (Sail.BitVec.extractLsb
                                                                                                              (← readReg mcyclecfg)
                                                                                                              63
                                                                                                              32))
                                                                                                        else
                                                                                                          if (Bool.and
                                                                                                               (BEq.beq
                                                                                                                 b__0
                                                                                                                 (0x322 : (BitVec 12)))
                                                                                                               (BEq.beq
                                                                                                                 xlen
                                                                                                                 64))
                                                                                                          then
                                                                                                            writeReg minstretcfg (← (legalize_smcntrpmf
                                                                                                                (← readReg minstretcfg)
                                                                                                                value))
                                                                                                            (pure (Sail.BitVec.extractLsb
                                                                                                                (← readReg minstretcfg)
                                                                                                                (xlen -i 1)
                                                                                                                0))
                                                                                                          else
                                                                                                            if (Bool.and
                                                                                                                 (BEq.beq
                                                                                                                   b__0
                                                                                                                   (0x322 : (BitVec 12)))
                                                                                                                 (BEq.beq
                                                                                                                   xlen
                                                                                                                   32))
                                                                                                            then
                                                                                                              writeReg minstretcfg (← (legalize_smcntrpmf
                                                                                                                  (← readReg minstretcfg)
                                                                                                                  ((Sail.BitVec.extractLsb
                                                                                                                      (← readReg minstretcfg)
                                                                                                                      63
                                                                                                                      32) ++ value)))
                                                                                                              (pure (Sail.BitVec.extractLsb
                                                                                                                  (← readReg minstretcfg)
                                                                                                                  (xlen -i 1)
                                                                                                                  0))
                                                                                                            else
                                                                                                              if (Bool.and
                                                                                                                   (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0x722 : (BitVec 12)))
                                                                                                                   (BEq.beq
                                                                                                                     xlen
                                                                                                                     32))
                                                                                                              then
                                                                                                                writeReg minstretcfg (← (legalize_smcntrpmf
                                                                                                                    (← readReg minstretcfg)
                                                                                                                    (value ++ (Sail.BitVec.extractLsb
                                                                                                                        (← readReg minstretcfg)
                                                                                                                        31
                                                                                                                        0))))
                                                                                                                (pure (Sail.BitVec.extractLsb
                                                                                                                    (← readReg minstretcfg)
                                                                                                                    63
                                                                                                                    32))
                                                                                                              else
                                                                                                                if (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0x180 : (BitVec 12)))
                                                                                                                then
                                                                                                                  writeReg satp (legalize_satp
                                                                                                                    (← (cur_architecture
                                                                                                                        ()))
                                                                                                                    (← readReg satp)
                                                                                                                    value)
                                                                                                                  readReg satp
                                                                                                                else
                                                                                                                  (internal_error
                                                                                                                    "riscv_csr_end.sail"
                                                                                                                    23
                                                                                                                    (HAppend.hAppend
                                                                                                                      "Write to CSR that does not exist: "
                                                                                                                      (BitVec.toFormatted
                                                                                                                        b__0)))

/-- Type quantifiers: k_ex116274# : Bool -/
def execute_CSR (csr : (BitVec 12)) (rs1 : regidx) (rd : regidx) (is_imm : Bool) (op : csrop) : SailM Retired := do
  let rs1_val ← (( do
    if is_imm
    then (pure (zero_extend (m := ((2 ^i 3) *i 8)) (regidx_bits rs1)))
    else (rX_bits rs1) ) : SailM xlenbits )
  let is_CSR_Write := (Bool.or (BEq.beq op CSRRW) (bne rs1 zreg))
  if (not (← (check_CSR csr (← readReg cur_privilege) is_CSR_Write)))
  then
    (handle_illegal ())
    (pure RETIRE_FAIL)
  else
    if (not (ext_check_CSR csr (← readReg cur_privilege) is_CSR_Write))
    then
      let _ : Unit := (ext_check_CSR_fail ())
      (pure RETIRE_FAIL)
    else
      let is_CSR_Read := (not (Bool.and (BEq.beq op CSRRW) (BEq.beq rd zreg)))
      let csr_val ← (( do
        if is_CSR_Read
        then (read_CSR csr)
        else (pure (zeros_implicit (n := ((2 ^i 3) *i 8)))) ) : SailM xlenbits )
      if is_CSR_Write
      then
        let new_val : xlenbits :=
          match op with
          | CSRRW => rs1_val
          | CSRRS => (csr_val ||| rs1_val)
          | CSRRC => (csr_val &&& (Complement.complement rs1_val))
        let final_val ← do (write_CSR csr new_val)
        if (get_config_print_reg ())
        then
          (pure (print_endline
              (HAppend.hAppend "CSR "
                (HAppend.hAppend (← (csr_name csr))
                  (HAppend.hAppend " <- "
                    (HAppend.hAppend (BitVec.toFormatted final_val)
                      (HAppend.hAppend " (input: "
                        (HAppend.hAppend (BitVec.toFormatted new_val) ")"))))))))
        else (pure ())
      else
        if (get_config_print_reg ())
        then
          (pure (print_endline
              (HAppend.hAppend "CSR "
                (HAppend.hAppend (← (csr_name csr))
                  (HAppend.hAppend " -> " (BitVec.toFormatted csr_val))))))
        else (pure ())
      (wX_bits rd csr_val)
      (pure RETIRE_SUCCESS)

/-- Type quantifiers: k_ex116291# : Bool, k_ex116290# : Bool -/
def execute_AMO (op : amoop) (aq : Bool) (rl : Bool) (rs2 : regidx) (rs1 : regidx) (width : word_width) (rd : regidx) : SailM Retired := do
  let width_bytes := (size_bytes_forwards width)
  assert (width_bytes ≤b xlen_bytes) "riscv_insts_aext.sail:194.34-194.35"
  match (← (ext_data_get_addr rs1 (zeros_implicit (n := ((2 ^i 3) *i 8))) (ReadWrite (Data, Data))
      width_bytes)) with
  | .Ext_DataAddr_Error e =>
    let _ : Unit := (ext_handle_data_check_error e)
    (pure RETIRE_FAIL)
  | .Ext_DataAddr_OK vaddr =>
    if (not (is_aligned (virtaddr_bits vaddr) width))
    then
      (handle_mem_exception vaddr (E_SAMO_Addr_Align ()))
      (pure RETIRE_FAIL)
    else
      match (← (translateAddr vaddr (ReadWrite (Data, Data)))) with
      | .TR_Failure (e, _) =>
        (handle_mem_exception vaddr e)
        (pure RETIRE_FAIL)
      | .TR_Address (addr, _) =>
        let rs2_val ← do
          (pure (Sail.BitVec.extractLsb (← (rX_bits rs2)) ((width_bytes *i 8) -i 1) 0))
        match (← (mem_write_ea addr width_bytes (Bool.and aq rl) rl true)) with
        | .Err e =>
          (handle_mem_exception vaddr e)
          (pure RETIRE_FAIL)
        | .Ok _ =>
          match (← (mem_read (ReadWrite (Data, Data)) addr width_bytes aq (Bool.and aq rl) true)) with
          | .Err e =>
            (handle_mem_exception vaddr e)
            (pure RETIRE_FAIL)
          | .Ok loaded =>
            let result : (BitVec (width_bytes * 8)) :=
              match op with
              | AMOSWAP => rs2_val
              | AMOADD => (rs2_val + loaded)
              | AMOXOR => (rs2_val ^^^ loaded)
              | AMOAND => (rs2_val &&& loaded)
              | AMOOR => (rs2_val ||| loaded)
              | AMOMIN =>
                if (zopz0zI_s rs2_val loaded)
                then rs2_val
                else loaded
              | AMOMAX =>
                if (zopz0zK_s rs2_val loaded)
                then rs2_val
                else loaded
              | AMOMINU =>
                if (zopz0zI_u rs2_val loaded)
                then rs2_val
                else loaded
              | AMOMAXU =>
                if (zopz0zK_u rs2_val loaded)
                then rs2_val
                else loaded
            match (← (mem_write_value addr width_bytes
                (sign_extend (m := (8 *i width_bytes)) result) (Bool.and aq rl) rl true)) with
            | .Ok true =>
              (wX_bits rd (sign_extend (m := ((2 ^i 3) *i 8)) loaded))
              (pure RETIRE_SUCCESS)
            | .Ok false =>
              (internal_error "riscv_insts_aext.sail" 228 "AMO got false from mem_write_value")
            | .Err e =>
              (handle_mem_exception vaddr e)
              (pure RETIRE_FAIL)

def execute (merge_var : ast) : SailM Retired := do
  match merge_var with
  | .UTYPE (imm, rd, op) => (execute_UTYPE imm rd op)
  | .RISCV_JAL (imm, rd) => (execute_RISCV_JAL imm rd)
  | .BTYPE (imm, rs2, rs1, op) => (execute_BTYPE imm rs2 rs1 op)
  | .ITYPE (imm, rs1, rd, op) => (execute_ITYPE imm rs1 rd op)
  | .SHIFTIOP (shamt, rs1, rd, op) => (execute_SHIFTIOP shamt rs1 rd op)
  | .RTYPE (rs2, rs1, rd, op) => (execute_RTYPE rs2 rs1 rd op)
  | .LOAD (imm, rs1, rd, is_unsigned, width, aq, rl) =>
    (execute_LOAD imm rs1 rd is_unsigned width aq rl)
  | .STORE (imm, rs2, rs1, width, aq, rl) => (execute_STORE imm rs2 rs1 width aq rl)
  | .ADDIW (imm, rs1, rd) => (execute_ADDIW imm rs1 rd)
  | .RTYPEW (rs2, rs1, rd, op) => (execute_RTYPEW rs2 rs1 rd op)
  | .SHIFTIWOP (shamt, rs1, rd, op) => (execute_SHIFTIWOP shamt rs1 rd op)
  | .FENCE (pred, succ) => (execute_FENCE pred succ)
  | .FENCE_TSO (pred, succ) => (execute_FENCE_TSO pred succ)
  | .ECALL arg0 => (execute_ECALL arg0)
  | .MRET arg0 => (execute_MRET arg0)
  | .SRET arg0 => (execute_SRET arg0)
  | .EBREAK arg0 => (execute_EBREAK arg0)
  | .WFI arg0 => (execute_WFI arg0)
  | .SFENCE_VMA (rs1, rs2) => (execute_SFENCE_VMA rs1 rs2)
  | .FENCEI arg0 => (pure (execute_FENCEI arg0))
  | .LOADRES (aq, rl, rs1, width, rd) => (execute_LOADRES aq rl rs1 width rd)
  | .STORECON (aq, rl, rs2, rs1, width, rd) => (execute_STORECON aq rl rs2 rs1 width rd)
  | .AMO (op, aq, rl, rs2, rs1, width, rd) => (execute_AMO op aq rl rs2 rs1 width rd)
  | .C_NOP arg0 => (pure (execute_C_NOP arg0))
  | .C_ADDI4SPN (rdc, nzimm) => (execute_C_ADDI4SPN rdc nzimm)
  | .C_LW (uimm, rsc, rdc) => (execute_C_LW uimm rsc rdc)
  | .C_LD (uimm, rsc, rdc) => (execute_C_LD uimm rsc rdc)
  | .C_SW (uimm, rsc1, rsc2) => (execute_C_SW uimm rsc1 rsc2)
  | .C_SD (uimm, rsc1, rsc2) => (execute_C_SD uimm rsc1 rsc2)
  | .C_ADDI (nzi, rsd) => (execute_C_ADDI nzi rsd)
  | .C_JAL imm => (execute_C_JAL imm)
  | .C_ADDIW (imm, rsd) => (execute_C_ADDIW imm rsd)
  | .C_LI (imm, rd) => (execute_C_LI imm rd)
  | .C_ADDI16SP imm => (execute_C_ADDI16SP imm)
  | .C_LUI (imm, rd) => (execute_C_LUI imm rd)
  | .C_SRLI (shamt, rsd) => (execute_C_SRLI shamt rsd)
  | .C_SRAI (shamt, rsd) => (execute_C_SRAI shamt rsd)
  | .C_ANDI (imm, rsd) => (execute_C_ANDI imm rsd)
  | .C_SUB (rsd, rs2) => (execute_C_SUB rsd rs2)
  | .C_XOR (rsd, rs2) => (execute_C_XOR rsd rs2)
  | .C_OR (rsd, rs2) => (execute_C_OR rsd rs2)
  | .C_AND (rsd, rs2) => (execute_C_AND rsd rs2)
  | .C_SUBW (rsd, rs2) => (execute_C_SUBW rsd rs2)
  | .C_ADDW (rsd, rs2) => (execute_C_ADDW rsd rs2)
  | .C_J imm => (execute_C_J imm)
  | .C_BEQZ (imm, rs) => (execute_C_BEQZ imm rs)
  | .C_BNEZ (imm, rs) => (execute_C_BNEZ imm rs)
  | .C_SLLI (shamt, rsd) => (execute_C_SLLI shamt rsd)
  | .C_LWSP (uimm, rd) => (execute_C_LWSP uimm rd)
  | .C_LDSP (uimm, rd) => (execute_C_LDSP uimm rd)
  | .C_SWSP (uimm, rs2) => (execute_C_SWSP uimm rs2)
  | .C_SDSP (uimm, rs2) => (execute_C_SDSP uimm rs2)
  | .C_JR rs1 => (execute_C_JR rs1)
  | .C_JALR rs1 => (execute_C_JALR rs1)
  | .C_MV (rd, rs2) => (execute_C_MV rd rs2)
  | .C_EBREAK arg0 => (execute_C_EBREAK arg0)
  | .C_ADD (rsd, rs2) => (execute_C_ADD rsd rs2)
  | .MUL (rs2, rs1, rd, mul_op) => (execute_MUL rs2 rs1 rd mul_op)
  | .DIV (rs2, rs1, rd, s) => (execute_DIV rs2 rs1 rd s)
  | .REM (rs2, rs1, rd, s) => (execute_REM rs2 rs1 rd s)
  | .MULW (rs2, rs1, rd) => (execute_MULW rs2 rs1 rd)
  | .DIVW (rs2, rs1, rd, s) => (execute_DIVW rs2 rs1 rd s)
  | .REMW (rs2, rs1, rd, s) => (execute_REMW rs2 rs1 rd s)
  | .CSR (csr, rs1, rd, is_imm, op) => (execute_CSR csr rs1 rd is_imm op)
  | .C_NOP_HINT imm => (pure (execute_C_NOP_HINT imm))
  | .C_ADDI_HINT rsd => (pure (execute_C_ADDI_HINT rsd))
  | .C_LI_HINT imm => (pure (execute_C_LI_HINT imm))
  | .C_LUI_HINT imm => (pure (execute_C_LUI_HINT imm))
  | .C_MV_HINT rs2 => (pure (execute_C_MV_HINT rs2))
  | .C_ADD_HINT rs2 => (pure (execute_C_ADD_HINT rs2))
  | .C_SLLI_HINT (shamt, rsd) => (pure (execute_C_SLLI_HINT shamt rsd))
  | .C_SRLI_HINT rsd => (pure (execute_C_SRLI_HINT rsd))
  | .C_SRAI_HINT rsd => (pure (execute_C_SRAI_HINT rsd))
  | .FENCE_RESERVED (fm, pred, succ, rs, rd) => (pure (execute_FENCE_RESERVED fm pred succ rs rd))
  | .FENCEI_RESERVED (imm, rs, rd) => (pure (execute_FENCEI_RESERVED imm rs rd))
  | .RISCV_JALR (imm, rs1, rd) => (execute_RISCV_JALR imm rs1 rd)
  | .ILLEGAL s => (execute_ILLEGAL s)
  | .C_ILLEGAL s => (execute_C_ILLEGAL s)

def assembly_backwards (arg_ : String) : SailM ast := do
  match arg_ with
  | _ => throw Error.Exit

def assembly_forwards_matches (arg_ : ast) : Bool :=
  match arg_ with
  | .UTYPE (imm, rd, op) => true
  | .RISCV_JAL (imm, rd) => true
  | .RISCV_JALR (imm, rs1, rd) => true
  | .BTYPE (imm, rs2, rs1, op) => true
  | .ITYPE (imm, rs1, rd, op) => true
  | .SHIFTIOP (shamt, rs1, rd, op) => true
  | .RTYPE (rs2, rs1, rd, op) => true
  | .LOAD (imm, rs1, rd, is_unsigned, size, aq, rl) => true
  | .STORE (imm, rs2, rs1, size, aq, rl) => true
  | .ADDIW (imm, rs1, rd) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .RTYPEW (rs2, rs1, rd, op) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .SHIFTIWOP (shamt, rs1, rd, op) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .FENCE (pred, succ) => true
  | .FENCE_TSO (pred, succ) => true
  | .ECALL () => true
  | .MRET () => true
  | .SRET () => true
  | .EBREAK () => true
  | .WFI () => true
  | .SFENCE_VMA (rs1, rs2) => true
  | .FENCEI () => true
  | .LOADRES (aq, rl, rs1, size, rd) => true
  | .STORECON (aq, rl, rs2, rs1, size, rd) => true
  | .AMO (op, aq, rl, rs2, rs1, width, rd) => true
  | .C_NOP () => true
  | .C_ADDI4SPN (rdc, nzimm) =>
    if (bne nzimm (0x00 : (BitVec 8)))
    then true
    else false
  | .C_LW (uimm, rsc, rdc) => true
  | .C_LD (uimm, rsc, rdc) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_SW (uimm, rsc1, rsc2) => true
  | .C_SD (uimm, rsc1, rsc2) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_ADDI (nzi, rsd) =>
    if (Bool.and (bne nzi (0b000000 : (BitVec 6))) (bne rsd zreg))
    then true
    else false
  | .C_JAL imm =>
    if (BEq.beq xlen 32)
    then true
    else false
  | .C_ADDIW (imm, rsd) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_LI (imm, rd) =>
    if (bne rd zreg)
    then true
    else false
  | .C_ADDI16SP imm =>
    if (bne imm (0b000000 : (BitVec 6)))
    then true
    else false
  | .C_LUI (imm, rd) =>
    if (Bool.and (bne rd zreg) (Bool.and (bne rd sp) (bne imm (0b000000 : (BitVec 6)))))
    then true
    else false
  | .C_SRLI (shamt, rsd) =>
    if (bne shamt (0b000000 : (BitVec 6)))
    then true
    else false
  | .C_SRAI (shamt, rsd) =>
    if (bne shamt (0b000000 : (BitVec 6)))
    then true
    else false
  | .C_ANDI (imm, rsd) => true
  | .C_SUB (rsd, rs2) => true
  | .C_XOR (rsd, rs2) => true
  | .C_OR (rsd, rs2) => true
  | .C_AND (rsd, rs2) => true
  | .C_SUBW (rsd, rs2) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_ADDW (rsd, rs2) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_J imm => true
  | .C_BEQZ (imm, rs) => true
  | .C_BNEZ (imm, rs) => true
  | .C_SLLI (shamt, rsd) =>
    if (Bool.and (bne shamt (0b000000 : (BitVec 6))) (bne rsd zreg))
    then true
    else false
  | .C_LWSP (uimm, rd) =>
    if (bne rd zreg)
    then true
    else false
  | .C_LDSP (uimm, rd) =>
    if (Bool.and (bne rd zreg) (BEq.beq xlen 64))
    then true
    else false
  | .C_SWSP (uimm, rs2) => true
  | .C_SDSP (uimm, rs2) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .C_JR rs1 =>
    if (bne rs1 zreg)
    then true
    else false
  | .C_JALR rs1 =>
    if (bne rs1 zreg)
    then true
    else false
  | .C_MV (rd, rs2) =>
    if (Bool.and (bne rd zreg) (bne rs2 zreg))
    then true
    else false
  | .C_EBREAK () => true
  | .C_ADD (rsd, rs2) =>
    if (Bool.and (bne rsd zreg) (bne rs2 zreg))
    then true
    else false
  | .MUL (rs2, rs1, rd, mul_op) => true
  | .DIV (rs2, rs1, rd, s) => true
  | .REM (rs2, rs1, rd, s) => true
  | .MULW (rs2, rs1, rd) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .DIVW (rs2, rs1, rd, s) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .REMW (rs2, rs1, rd, s) =>
    if (BEq.beq xlen 64)
    then true
    else false
  | .CSR (csr, .Regidx rs1_bits, rd, true, op) => true
  | .CSR (csr, rs1, rd, false, op) => true
  | .C_NOP_HINT imm => true
  | .C_ADDI_HINT rsd =>
    if (bne rsd zreg)
    then true
    else false
  | .C_LI_HINT imm => true
  | .C_LUI_HINT imm =>
    if (bne imm (0b000000 : (BitVec 6)))
    then true
    else false
  | .C_MV_HINT rs2 =>
    if (bne rs2 zreg)
    then true
    else false
  | .C_ADD_HINT rs2 =>
    if (bne rs2 zreg)
    then true
    else false
  | .C_SLLI_HINT (shamt, rsd) =>
    if (Bool.or (BEq.beq shamt (0b000000 : (BitVec 6))) (BEq.beq rsd zreg))
    then true
    else false
  | .C_SRLI_HINT rsd => true
  | .C_SRAI_HINT rsd => true
  | .FENCE_RESERVED (fm, pred, succ, rs, rd) =>
    if (Bool.or (Bool.and (bne fm (0x0 : (BitVec 4))) (bne fm (0x8 : (BitVec 4))))
         (Bool.or (bne rs zreg) (bne rd zreg)))
    then true
    else false
  | .FENCEI_RESERVED (imm, rs, rd) =>
    if (Bool.or (bne imm (0x000 : (BitVec 12))) (Bool.or (bne rs zreg) (bne rd zreg)))
    then true
    else false
  | .ILLEGAL s => true
  | .C_ILLEGAL s => true

def assembly_backwards_matches (arg_ : String) : SailM Bool := do
  match arg_ with
  | _ => throw Error.Exit

def csr_name_map_backwards (arg_ : String) : SailM (BitVec 12) := do
  let head_exp_ := arg_
  match (match head_exp_ with
  | "misa" => (some (0x301 : (BitVec 12)))
  | "mstatus" => (some (0x300 : (BitVec 12)))
  | "menvcfg" => (some (0x30A : (BitVec 12)))
  | "menvcfgh" => (some (0x31A : (BitVec 12)))
  | "senvcfg" => (some (0x10A : (BitVec 12)))
  | "mie" => (some (0x304 : (BitVec 12)))
  | "mip" => (some (0x344 : (BitVec 12)))
  | "medeleg" => (some (0x302 : (BitVec 12)))
  | "medelegh" => (some (0x312 : (BitVec 12)))
  | "mideleg" => (some (0x303 : (BitVec 12)))
  | "mcause" => (some (0x342 : (BitVec 12)))
  | "mtval" => (some (0x343 : (BitVec 12)))
  | "mscratch" => (some (0x340 : (BitVec 12)))
  | "scounteren" => (some (0x106 : (BitVec 12)))
  | "mcounteren" => (some (0x306 : (BitVec 12)))
  | "mcountinhibit" => (some (0x320 : (BitVec 12)))
  | "mvendorid" => (some (0xF11 : (BitVec 12)))
  | "marchid" => (some (0xF12 : (BitVec 12)))
  | "mimpid" => (some (0xF13 : (BitVec 12)))
  | "mhartid" => (some (0xF14 : (BitVec 12)))
  | "mconfigptr" => (some (0xF15 : (BitVec 12)))
  | "sstatus" => (some (0x100 : (BitVec 12)))
  | "sip" => (some (0x144 : (BitVec 12)))
  | "sie" => (some (0x104 : (BitVec 12)))
  | "sscratch" => (some (0x140 : (BitVec 12)))
  | "scause" => (some (0x142 : (BitVec 12)))
  | "stval" => (some (0x143 : (BitVec 12)))
  | "tselect" => (some (0x7A0 : (BitVec 12)))
  | "tdata1" => (some (0x7A1 : (BitVec 12)))
  | "tdata2" => (some (0x7A2 : (BitVec 12)))
  | "tdata3" => (some (0x7A3 : (BitVec 12)))
  | "pmpcfg0" => (some (0x3A0 : (BitVec 12)))
  | "pmpcfg1" => (some (0x3A1 : (BitVec 12)))
  | "pmpcfg2" => (some (0x3A2 : (BitVec 12)))
  | "pmpcfg3" => (some (0x3A3 : (BitVec 12)))
  | "pmpcfg4" => (some (0x3A4 : (BitVec 12)))
  | "pmpcfg5" => (some (0x3A5 : (BitVec 12)))
  | "pmpcfg6" => (some (0x3A6 : (BitVec 12)))
  | "pmpcfg7" => (some (0x3A7 : (BitVec 12)))
  | "pmpcfg8" => (some (0x3A8 : (BitVec 12)))
  | "pmpcfg9" => (some (0x3A9 : (BitVec 12)))
  | "pmpcfg10" => (some (0x3AA : (BitVec 12)))
  | "pmpcfg11" => (some (0x3AB : (BitVec 12)))
  | "pmpcfg12" => (some (0x3AC : (BitVec 12)))
  | "pmpcfg13" => (some (0x3AD : (BitVec 12)))
  | "pmpcfg14" => (some (0x3AE : (BitVec 12)))
  | "pmpcfg15" => (some (0x3AF : (BitVec 12)))
  | "pmpaddr0" => (some (0x3B0 : (BitVec 12)))
  | "pmpaddr1" => (some (0x3B1 : (BitVec 12)))
  | "pmpaddr2" => (some (0x3B2 : (BitVec 12)))
  | "pmpaddr3" => (some (0x3B3 : (BitVec 12)))
  | "pmpaddr4" => (some (0x3B4 : (BitVec 12)))
  | "pmpaddr5" => (some (0x3B5 : (BitVec 12)))
  | "pmpaddr6" => (some (0x3B6 : (BitVec 12)))
  | "pmpaddr7" => (some (0x3B7 : (BitVec 12)))
  | "pmpaddr8" => (some (0x3B8 : (BitVec 12)))
  | "pmpaddr9" => (some (0x3B9 : (BitVec 12)))
  | "pmpaddr10" => (some (0x3BA : (BitVec 12)))
  | "pmpaddr11" => (some (0x3BB : (BitVec 12)))
  | "pmpaddr12" => (some (0x3BC : (BitVec 12)))
  | "pmpaddr13" => (some (0x3BD : (BitVec 12)))
  | "pmpaddr14" => (some (0x3BE : (BitVec 12)))
  | "pmpaddr15" => (some (0x3BF : (BitVec 12)))
  | "pmpaddr16" => (some (0x3C0 : (BitVec 12)))
  | "pmpaddr17" => (some (0x3C1 : (BitVec 12)))
  | "pmpaddr18" => (some (0x3C2 : (BitVec 12)))
  | "pmpaddr19" => (some (0x3C3 : (BitVec 12)))
  | "pmpaddr20" => (some (0x3C4 : (BitVec 12)))
  | "pmpaddr21" => (some (0x3C5 : (BitVec 12)))
  | "pmpaddr22" => (some (0x3C6 : (BitVec 12)))
  | "pmpaddr23" => (some (0x3C7 : (BitVec 12)))
  | "pmpaddr24" => (some (0x3C8 : (BitVec 12)))
  | "pmpaddr25" => (some (0x3C9 : (BitVec 12)))
  | "pmpaddr26" => (some (0x3CA : (BitVec 12)))
  | "pmpaddr27" => (some (0x3CB : (BitVec 12)))
  | "pmpaddr28" => (some (0x3CC : (BitVec 12)))
  | "pmpaddr29" => (some (0x3CD : (BitVec 12)))
  | "pmpaddr30" => (some (0x3CE : (BitVec 12)))
  | "pmpaddr31" => (some (0x3CF : (BitVec 12)))
  | "pmpaddr32" => (some (0x3D0 : (BitVec 12)))
  | "pmpaddr33" => (some (0x3D1 : (BitVec 12)))
  | "pmpaddr34" => (some (0x3D2 : (BitVec 12)))
  | "pmpaddr35" => (some (0x3D3 : (BitVec 12)))
  | "pmpaddr36" => (some (0x3D4 : (BitVec 12)))
  | "pmpaddr37" => (some (0x3D5 : (BitVec 12)))
  | "pmpaddr38" => (some (0x3D6 : (BitVec 12)))
  | "pmpaddr39" => (some (0x3D7 : (BitVec 12)))
  | "pmpaddr40" => (some (0x3D8 : (BitVec 12)))
  | "pmpaddr41" => (some (0x3D9 : (BitVec 12)))
  | "pmpaddr42" => (some (0x3DA : (BitVec 12)))
  | "pmpaddr43" => (some (0x3DB : (BitVec 12)))
  | "pmpaddr44" => (some (0x3DC : (BitVec 12)))
  | "pmpaddr45" => (some (0x3DD : (BitVec 12)))
  | "pmpaddr46" => (some (0x3DE : (BitVec 12)))
  | "pmpaddr47" => (some (0x3DF : (BitVec 12)))
  | "pmpaddr48" => (some (0x3E0 : (BitVec 12)))
  | "pmpaddr49" => (some (0x3E1 : (BitVec 12)))
  | "pmpaddr50" => (some (0x3E2 : (BitVec 12)))
  | "pmpaddr51" => (some (0x3E3 : (BitVec 12)))
  | "pmpaddr52" => (some (0x3E4 : (BitVec 12)))
  | "pmpaddr53" => (some (0x3E5 : (BitVec 12)))
  | "pmpaddr54" => (some (0x3E6 : (BitVec 12)))
  | "pmpaddr55" => (some (0x3E7 : (BitVec 12)))
  | "pmpaddr56" => (some (0x3E8 : (BitVec 12)))
  | "pmpaddr57" => (some (0x3E9 : (BitVec 12)))
  | "pmpaddr58" => (some (0x3EA : (BitVec 12)))
  | "pmpaddr59" => (some (0x3EB : (BitVec 12)))
  | "pmpaddr60" => (some (0x3EC : (BitVec 12)))
  | "pmpaddr61" => (some (0x3ED : (BitVec 12)))
  | "pmpaddr62" => (some (0x3EE : (BitVec 12)))
  | "pmpaddr63" => (some (0x3EF : (BitVec 12)))
  | "vstart" => (some (0x008 : (BitVec 12)))
  | "vxsat" => (some (0x009 : (BitVec 12)))
  | "vxrm" => (some (0x00A : (BitVec 12)))
  | "vcsr" => (some (0x00F : (BitVec 12)))
  | "vl" => (some (0xC20 : (BitVec 12)))
  | "vtype" => (some (0xC21 : (BitVec 12)))
  | "vlenb" => (some (0xC22 : (BitVec 12)))
  | "stvec" => (some (0x105 : (BitVec 12)))
  | "sepc" => (some (0x141 : (BitVec 12)))
  | "mtvec" => (some (0x305 : (BitVec 12)))
  | "mepc" => (some (0x341 : (BitVec 12)))
  | "hpmcounter3" => (some (0xC03 : (BitVec 12)))
  | "hpmcounter4" => (some (0xC04 : (BitVec 12)))
  | "hpmcounter5" => (some (0xC05 : (BitVec 12)))
  | "hpmcounter6" => (some (0xC06 : (BitVec 12)))
  | "hpmcounter7" => (some (0xC07 : (BitVec 12)))
  | "hpmcounter8" => (some (0xC08 : (BitVec 12)))
  | "hpmcounter9" => (some (0xC09 : (BitVec 12)))
  | "hpmcounter10" => (some (0xC0A : (BitVec 12)))
  | "hpmcounter11" => (some (0xC0B : (BitVec 12)))
  | "hpmcounter12" => (some (0xC0C : (BitVec 12)))
  | "hpmcounter13" => (some (0xC0D : (BitVec 12)))
  | "hpmcounter14" => (some (0xC0E : (BitVec 12)))
  | "hpmcounter15" => (some (0xC0F : (BitVec 12)))
  | "hpmcounter16" => (some (0xC10 : (BitVec 12)))
  | "hpmcounter17" => (some (0xC11 : (BitVec 12)))
  | "hpmcounter18" => (some (0xC12 : (BitVec 12)))
  | "hpmcounter19" => (some (0xC13 : (BitVec 12)))
  | "hpmcounter20" => (some (0xC14 : (BitVec 12)))
  | "hpmcounter21" => (some (0xC15 : (BitVec 12)))
  | "hpmcounter22" => (some (0xC16 : (BitVec 12)))
  | "hpmcounter23" => (some (0xC17 : (BitVec 12)))
  | "hpmcounter24" => (some (0xC18 : (BitVec 12)))
  | "hpmcounter25" => (some (0xC19 : (BitVec 12)))
  | "hpmcounter26" => (some (0xC1A : (BitVec 12)))
  | "hpmcounter27" => (some (0xC1B : (BitVec 12)))
  | "hpmcounter28" => (some (0xC1C : (BitVec 12)))
  | "hpmcounter29" => (some (0xC1D : (BitVec 12)))
  | "hpmcounter30" => (some (0xC1E : (BitVec 12)))
  | "hpmcounter31" => (some (0xC1F : (BitVec 12)))
  | "hpmcounter3h" => (some (0xC83 : (BitVec 12)))
  | "hpmcounter4h" => (some (0xC84 : (BitVec 12)))
  | "hpmcounter5h" => (some (0xC85 : (BitVec 12)))
  | "hpmcounter6h" => (some (0xC86 : (BitVec 12)))
  | "hpmcounter7h" => (some (0xC87 : (BitVec 12)))
  | "hpmcounter8h" => (some (0xC88 : (BitVec 12)))
  | "hpmcounter9h" => (some (0xC89 : (BitVec 12)))
  | "hpmcounter10h" => (some (0xC8A : (BitVec 12)))
  | "hpmcounter11h" => (some (0xC8B : (BitVec 12)))
  | "hpmcounter12h" => (some (0xC8C : (BitVec 12)))
  | "hpmcounter13h" => (some (0xC8D : (BitVec 12)))
  | "hpmcounter14h" => (some (0xC8E : (BitVec 12)))
  | "hpmcounter15h" => (some (0xC8F : (BitVec 12)))
  | "hpmcounter16h" => (some (0xC90 : (BitVec 12)))
  | "hpmcounter17h" => (some (0xC91 : (BitVec 12)))
  | "hpmcounter18h" => (some (0xC92 : (BitVec 12)))
  | "hpmcounter19h" => (some (0xC93 : (BitVec 12)))
  | "hpmcounter20h" => (some (0xC94 : (BitVec 12)))
  | "hpmcounter21h" => (some (0xC95 : (BitVec 12)))
  | "hpmcounter22h" => (some (0xC96 : (BitVec 12)))
  | "hpmcounter23h" => (some (0xC97 : (BitVec 12)))
  | "hpmcounter24h" => (some (0xC98 : (BitVec 12)))
  | "hpmcounter25h" => (some (0xC99 : (BitVec 12)))
  | "hpmcounter26h" => (some (0xC9A : (BitVec 12)))
  | "hpmcounter27h" => (some (0xC9B : (BitVec 12)))
  | "hpmcounter28h" => (some (0xC9C : (BitVec 12)))
  | "hpmcounter29h" => (some (0xC9D : (BitVec 12)))
  | "hpmcounter30h" => (some (0xC9E : (BitVec 12)))
  | "hpmcounter31h" => (some (0xC9F : (BitVec 12)))
  | "mhpmevent3" => (some (0x323 : (BitVec 12)))
  | "mhpmevent4" => (some (0x324 : (BitVec 12)))
  | "mhpmevent5" => (some (0x325 : (BitVec 12)))
  | "mhpmevent6" => (some (0x326 : (BitVec 12)))
  | "mhpmevent7" => (some (0x327 : (BitVec 12)))
  | "mhpmevent8" => (some (0x328 : (BitVec 12)))
  | "mhpmevent9" => (some (0x329 : (BitVec 12)))
  | "mhpmevent10" => (some (0x32A : (BitVec 12)))
  | "mhpmevent11" => (some (0x32B : (BitVec 12)))
  | "mhpmevent12" => (some (0x32C : (BitVec 12)))
  | "mhpmevent13" => (some (0x32D : (BitVec 12)))
  | "mhpmevent14" => (some (0x32E : (BitVec 12)))
  | "mhpmevent15" => (some (0x32F : (BitVec 12)))
  | "mhpmevent16" => (some (0x330 : (BitVec 12)))
  | "mhpmevent17" => (some (0x331 : (BitVec 12)))
  | "mhpmevent18" => (some (0x332 : (BitVec 12)))
  | "mhpmevent19" => (some (0x333 : (BitVec 12)))
  | "mhpmevent20" => (some (0x334 : (BitVec 12)))
  | "mhpmevent21" => (some (0x335 : (BitVec 12)))
  | "mhpmevent22" => (some (0x336 : (BitVec 12)))
  | "mhpmevent23" => (some (0x337 : (BitVec 12)))
  | "mhpmevent24" => (some (0x338 : (BitVec 12)))
  | "mhpmevent25" => (some (0x339 : (BitVec 12)))
  | "mhpmevent26" => (some (0x33A : (BitVec 12)))
  | "mhpmevent27" => (some (0x33B : (BitVec 12)))
  | "mhpmevent28" => (some (0x33C : (BitVec 12)))
  | "mhpmevent29" => (some (0x33D : (BitVec 12)))
  | "mhpmevent30" => (some (0x33E : (BitVec 12)))
  | "mhpmevent31" => (some (0x33F : (BitVec 12)))
  | "mhpmcounter3" => (some (0xB03 : (BitVec 12)))
  | "mhpmcounter4" => (some (0xB04 : (BitVec 12)))
  | "mhpmcounter5" => (some (0xB05 : (BitVec 12)))
  | "mhpmcounter6" => (some (0xB06 : (BitVec 12)))
  | "mhpmcounter7" => (some (0xB07 : (BitVec 12)))
  | "mhpmcounter8" => (some (0xB08 : (BitVec 12)))
  | "mhpmcounter9" => (some (0xB09 : (BitVec 12)))
  | "mhpmcounter10" => (some (0xB0A : (BitVec 12)))
  | "mhpmcounter11" => (some (0xB0B : (BitVec 12)))
  | "mhpmcounter12" => (some (0xB0C : (BitVec 12)))
  | "mhpmcounter13" => (some (0xB0D : (BitVec 12)))
  | "mhpmcounter14" => (some (0xB0E : (BitVec 12)))
  | "mhpmcounter15" => (some (0xB0F : (BitVec 12)))
  | "mhpmcounter16" => (some (0xB10 : (BitVec 12)))
  | "mhpmcounter17" => (some (0xB11 : (BitVec 12)))
  | "mhpmcounter18" => (some (0xB12 : (BitVec 12)))
  | "mhpmcounter19" => (some (0xB13 : (BitVec 12)))
  | "mhpmcounter20" => (some (0xB14 : (BitVec 12)))
  | "mhpmcounter21" => (some (0xB15 : (BitVec 12)))
  | "mhpmcounter22" => (some (0xB16 : (BitVec 12)))
  | "mhpmcounter23" => (some (0xB17 : (BitVec 12)))
  | "mhpmcounter24" => (some (0xB18 : (BitVec 12)))
  | "mhpmcounter25" => (some (0xB19 : (BitVec 12)))
  | "mhpmcounter26" => (some (0xB1A : (BitVec 12)))
  | "mhpmcounter27" => (some (0xB1B : (BitVec 12)))
  | "mhpmcounter28" => (some (0xB1C : (BitVec 12)))
  | "mhpmcounter29" => (some (0xB1D : (BitVec 12)))
  | "mhpmcounter30" => (some (0xB1E : (BitVec 12)))
  | "mhpmcounter31" => (some (0xB1F : (BitVec 12)))
  | "mhpmcounter3h" => (some (0xB83 : (BitVec 12)))
  | "mhpmcounter4h" => (some (0xB84 : (BitVec 12)))
  | "mhpmcounter5h" => (some (0xB85 : (BitVec 12)))
  | "mhpmcounter6h" => (some (0xB86 : (BitVec 12)))
  | "mhpmcounter7h" => (some (0xB87 : (BitVec 12)))
  | "mhpmcounter8h" => (some (0xB88 : (BitVec 12)))
  | "mhpmcounter9h" => (some (0xB89 : (BitVec 12)))
  | "mhpmcounter10h" => (some (0xB8A : (BitVec 12)))
  | "mhpmcounter11h" => (some (0xB8B : (BitVec 12)))
  | "mhpmcounter12h" => (some (0xB8C : (BitVec 12)))
  | "mhpmcounter13h" => (some (0xB8D : (BitVec 12)))
  | "mhpmcounter14h" => (some (0xB8E : (BitVec 12)))
  | "mhpmcounter15h" => (some (0xB8F : (BitVec 12)))
  | "mhpmcounter16h" => (some (0xB90 : (BitVec 12)))
  | "mhpmcounter17h" => (some (0xB91 : (BitVec 12)))
  | "mhpmcounter18h" => (some (0xB92 : (BitVec 12)))
  | "mhpmcounter19h" => (some (0xB93 : (BitVec 12)))
  | "mhpmcounter20h" => (some (0xB94 : (BitVec 12)))
  | "mhpmcounter21h" => (some (0xB95 : (BitVec 12)))
  | "mhpmcounter22h" => (some (0xB96 : (BitVec 12)))
  | "mhpmcounter23h" => (some (0xB97 : (BitVec 12)))
  | "mhpmcounter24h" => (some (0xB98 : (BitVec 12)))
  | "mhpmcounter25h" => (some (0xB99 : (BitVec 12)))
  | "mhpmcounter26h" => (some (0xB9A : (BitVec 12)))
  | "mhpmcounter27h" => (some (0xB9B : (BitVec 12)))
  | "mhpmcounter28h" => (some (0xB9C : (BitVec 12)))
  | "mhpmcounter29h" => (some (0xB9D : (BitVec 12)))
  | "mhpmcounter30h" => (some (0xB9E : (BitVec 12)))
  | "mhpmcounter31h" => (some (0xB9F : (BitVec 12)))
  | "mhpmcounter3h" => (some (0xB83 : (BitVec 12)))
  | "mhpmcounter4h" => (some (0xB84 : (BitVec 12)))
  | "mhpmcounter5h" => (some (0xB85 : (BitVec 12)))
  | "mhpmcounter6h" => (some (0xB86 : (BitVec 12)))
  | "mhpmcounter7h" => (some (0xB87 : (BitVec 12)))
  | "mhpmcounter8h" => (some (0xB88 : (BitVec 12)))
  | "mhpmcounter9h" => (some (0xB89 : (BitVec 12)))
  | "mhpmcounter10h" => (some (0xB8A : (BitVec 12)))
  | "mhpmcounter11h" => (some (0xB8B : (BitVec 12)))
  | "mhpmcounter12h" => (some (0xB8C : (BitVec 12)))
  | "mhpmcounter13h" => (some (0xB8D : (BitVec 12)))
  | "mhpmcounter14h" => (some (0xB8E : (BitVec 12)))
  | "mhpmcounter15h" => (some (0xB8F : (BitVec 12)))
  | "mhpmcounter16h" => (some (0xB90 : (BitVec 12)))
  | "mhpmcounter17h" => (some (0xB91 : (BitVec 12)))
  | "mhpmcounter18h" => (some (0xB92 : (BitVec 12)))
  | "mhpmcounter19h" => (some (0xB93 : (BitVec 12)))
  | "mhpmcounter20h" => (some (0xB94 : (BitVec 12)))
  | "mhpmcounter21h" => (some (0xB95 : (BitVec 12)))
  | "mhpmcounter22h" => (some (0xB96 : (BitVec 12)))
  | "mhpmcounter23h" => (some (0xB97 : (BitVec 12)))
  | "mhpmcounter24h" => (some (0xB98 : (BitVec 12)))
  | "mhpmcounter25h" => (some (0xB99 : (BitVec 12)))
  | "mhpmcounter26h" => (some (0xB9A : (BitVec 12)))
  | "mhpmcounter27h" => (some (0xB9B : (BitVec 12)))
  | "mhpmcounter28h" => (some (0xB9C : (BitVec 12)))
  | "mhpmcounter29h" => (some (0xB9D : (BitVec 12)))
  | "mhpmcounter30h" => (some (0xB9E : (BitVec 12)))
  | "mhpmcounter31h" => (some (0xB9F : (BitVec 12)))
  | "scountovf" => (some (0xDA0 : (BitVec 12)))
  | "seed" => (some (0x015 : (BitVec 12)))
  | "cycle" => (some (0xC00 : (BitVec 12)))
  | "time" => (some (0xC01 : (BitVec 12)))
  | "instret" => (some (0xC02 : (BitVec 12)))
  | "cycleh" => (some (0xC80 : (BitVec 12)))
  | "timeh" => (some (0xC81 : (BitVec 12)))
  | "instreth" => (some (0xC82 : (BitVec 12)))
  | "mcycle" => (some (0xB00 : (BitVec 12)))
  | "minstret" => (some (0xB02 : (BitVec 12)))
  | "mcycleh" => (some (0xB80 : (BitVec 12)))
  | "minstreth" => (some (0xB82 : (BitVec 12)))
  | "mcyclecfg" => (some (0x321 : (BitVec 12)))
  | "mcyclecfgh" => (some (0x721 : (BitVec 12)))
  | "minstretcfg" => (some (0x322 : (BitVec 12)))
  | "minstretcfgh" => (some (0x722 : (BitVec 12)))
  | "satp" => (some (0x180 : (BitVec 12)))
  | mapping0_ =>
    if (hex_bits_12_backwards_matches mapping0_)
    then
      match (hex_bits_12_backwards mapping0_) with
      | reg => (some reg)
    else none) with
  | .some result => (pure result)
  | _ =>
    assert false "Pattern match failure at unknown location"
    throw Error.Exit

def csr_name_map_forwards_matches (arg_ : (BitVec 12)) : Bool :=
  let b__0 := arg_
  if (BEq.beq b__0 (0x301 : (BitVec 12)))
  then true
  else
    if (BEq.beq b__0 (0x300 : (BitVec 12)))
    then true
    else
      if (BEq.beq b__0 (0x30A : (BitVec 12)))
      then true
      else
        if (BEq.beq b__0 (0x31A : (BitVec 12)))
        then true
        else
          if (BEq.beq b__0 (0x10A : (BitVec 12)))
          then true
          else
            if (BEq.beq b__0 (0x304 : (BitVec 12)))
            then true
            else
              if (BEq.beq b__0 (0x344 : (BitVec 12)))
              then true
              else
                if (BEq.beq b__0 (0x302 : (BitVec 12)))
                then true
                else
                  if (BEq.beq b__0 (0x312 : (BitVec 12)))
                  then true
                  else
                    if (BEq.beq b__0 (0x303 : (BitVec 12)))
                    then true
                    else
                      if (BEq.beq b__0 (0x342 : (BitVec 12)))
                      then true
                      else
                        if (BEq.beq b__0 (0x343 : (BitVec 12)))
                        then true
                        else
                          if (BEq.beq b__0 (0x340 : (BitVec 12)))
                          then true
                          else
                            if (BEq.beq b__0 (0x106 : (BitVec 12)))
                            then true
                            else
                              if (BEq.beq b__0 (0x306 : (BitVec 12)))
                              then true
                              else
                                if (BEq.beq b__0 (0x320 : (BitVec 12)))
                                then true
                                else
                                  if (BEq.beq b__0 (0xF11 : (BitVec 12)))
                                  then true
                                  else
                                    if (BEq.beq b__0 (0xF12 : (BitVec 12)))
                                    then true
                                    else
                                      if (BEq.beq b__0 (0xF13 : (BitVec 12)))
                                      then true
                                      else
                                        if (BEq.beq b__0 (0xF14 : (BitVec 12)))
                                        then true
                                        else
                                          if (BEq.beq b__0 (0xF15 : (BitVec 12)))
                                          then true
                                          else
                                            if (BEq.beq b__0 (0x100 : (BitVec 12)))
                                            then true
                                            else
                                              if (BEq.beq b__0 (0x144 : (BitVec 12)))
                                              then true
                                              else
                                                if (BEq.beq b__0 (0x104 : (BitVec 12)))
                                                then true
                                                else
                                                  if (BEq.beq b__0 (0x140 : (BitVec 12)))
                                                  then true
                                                  else
                                                    if (BEq.beq b__0 (0x142 : (BitVec 12)))
                                                    then true
                                                    else
                                                      if (BEq.beq b__0 (0x143 : (BitVec 12)))
                                                      then true
                                                      else
                                                        if (BEq.beq b__0 (0x7A0 : (BitVec 12)))
                                                        then true
                                                        else
                                                          if (BEq.beq b__0 (0x7A1 : (BitVec 12)))
                                                          then true
                                                          else
                                                            if (BEq.beq b__0 (0x7A2 : (BitVec 12)))
                                                            then true
                                                            else
                                                              if (BEq.beq b__0 (0x7A3 : (BitVec 12)))
                                                              then true
                                                              else
                                                                if (BEq.beq b__0
                                                                     (0x3A0 : (BitVec 12)))
                                                                then true
                                                                else
                                                                  if (BEq.beq b__0
                                                                       (0x3A1 : (BitVec 12)))
                                                                  then true
                                                                  else
                                                                    if (BEq.beq b__0
                                                                         (0x3A2 : (BitVec 12)))
                                                                    then true
                                                                    else
                                                                      if (BEq.beq b__0
                                                                           (0x3A3 : (BitVec 12)))
                                                                      then true
                                                                      else
                                                                        if (BEq.beq b__0
                                                                             (0x3A4 : (BitVec 12)))
                                                                        then true
                                                                        else
                                                                          if (BEq.beq b__0
                                                                               (0x3A5 : (BitVec 12)))
                                                                          then true
                                                                          else
                                                                            if (BEq.beq b__0
                                                                                 (0x3A6 : (BitVec 12)))
                                                                            then true
                                                                            else
                                                                              if (BEq.beq b__0
                                                                                   (0x3A7 : (BitVec 12)))
                                                                              then true
                                                                              else
                                                                                if (BEq.beq b__0
                                                                                     (0x3A8 : (BitVec 12)))
                                                                                then true
                                                                                else
                                                                                  if (BEq.beq b__0
                                                                                       (0x3A9 : (BitVec 12)))
                                                                                  then true
                                                                                  else
                                                                                    if (BEq.beq b__0
                                                                                         (0x3AA : (BitVec 12)))
                                                                                    then true
                                                                                    else
                                                                                      if (BEq.beq
                                                                                           b__0
                                                                                           (0x3AB : (BitVec 12)))
                                                                                      then true
                                                                                      else
                                                                                        if (BEq.beq
                                                                                             b__0
                                                                                             (0x3AC : (BitVec 12)))
                                                                                        then true
                                                                                        else
                                                                                          if (BEq.beq
                                                                                               b__0
                                                                                               (0x3AD : (BitVec 12)))
                                                                                          then true
                                                                                          else
                                                                                            if (BEq.beq
                                                                                                 b__0
                                                                                                 (0x3AE : (BitVec 12)))
                                                                                            then
                                                                                              true
                                                                                            else
                                                                                              if (BEq.beq
                                                                                                   b__0
                                                                                                   (0x3AF : (BitVec 12)))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                if (BEq.beq
                                                                                                     b__0
                                                                                                     (0x3B0 : (BitVec 12)))
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  if (BEq.beq
                                                                                                       b__0
                                                                                                       (0x3B1 : (BitVec 12)))
                                                                                                  then
                                                                                                    true
                                                                                                  else
                                                                                                    if (BEq.beq
                                                                                                         b__0
                                                                                                         (0x3B2 : (BitVec 12)))
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      if (BEq.beq
                                                                                                           b__0
                                                                                                           (0x3B3 : (BitVec 12)))
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        if (BEq.beq
                                                                                                             b__0
                                                                                                             (0x3B4 : (BitVec 12)))
                                                                                                        then
                                                                                                          true
                                                                                                        else
                                                                                                          if (BEq.beq
                                                                                                               b__0
                                                                                                               (0x3B5 : (BitVec 12)))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            if (BEq.beq
                                                                                                                 b__0
                                                                                                                 (0x3B6 : (BitVec 12)))
                                                                                                            then
                                                                                                              true
                                                                                                            else
                                                                                                              if (BEq.beq
                                                                                                                   b__0
                                                                                                                   (0x3B7 : (BitVec 12)))
                                                                                                              then
                                                                                                                true
                                                                                                              else
                                                                                                                if (BEq.beq
                                                                                                                     b__0
                                                                                                                     (0x3B8 : (BitVec 12)))
                                                                                                                then
                                                                                                                  true
                                                                                                                else
                                                                                                                  if (BEq.beq
                                                                                                                       b__0
                                                                                                                       (0x3B9 : (BitVec 12)))
                                                                                                                  then
                                                                                                                    true
                                                                                                                  else
                                                                                                                    if (BEq.beq
                                                                                                                         b__0
                                                                                                                         (0x3BA : (BitVec 12)))
                                                                                                                    then
                                                                                                                      true
                                                                                                                    else
                                                                                                                      if (BEq.beq
                                                                                                                           b__0
                                                                                                                           (0x3BB : (BitVec 12)))
                                                                                                                      then
                                                                                                                        true
                                                                                                                      else
                                                                                                                        if (BEq.beq
                                                                                                                             b__0
                                                                                                                             (0x3BC : (BitVec 12)))
                                                                                                                        then
                                                                                                                          true
                                                                                                                        else
                                                                                                                          if (BEq.beq
                                                                                                                               b__0
                                                                                                                               (0x3BD : (BitVec 12)))
                                                                                                                          then
                                                                                                                            true
                                                                                                                          else
                                                                                                                            if (BEq.beq
                                                                                                                                 b__0
                                                                                                                                 (0x3BE : (BitVec 12)))
                                                                                                                            then
                                                                                                                              true
                                                                                                                            else
                                                                                                                              if (BEq.beq
                                                                                                                                   b__0
                                                                                                                                   (0x3BF : (BitVec 12)))
                                                                                                                              then
                                                                                                                                true
                                                                                                                              else
                                                                                                                                if (BEq.beq
                                                                                                                                     b__0
                                                                                                                                     (0x3C0 : (BitVec 12)))
                                                                                                                                then
                                                                                                                                  true
                                                                                                                                else
                                                                                                                                  if (BEq.beq
                                                                                                                                       b__0
                                                                                                                                       (0x3C1 : (BitVec 12)))
                                                                                                                                  then
                                                                                                                                    true
                                                                                                                                  else
                                                                                                                                    if (BEq.beq
                                                                                                                                         b__0
                                                                                                                                         (0x3C2 : (BitVec 12)))
                                                                                                                                    then
                                                                                                                                      true
                                                                                                                                    else
                                                                                                                                      if (BEq.beq
                                                                                                                                           b__0
                                                                                                                                           (0x3C3 : (BitVec 12)))
                                                                                                                                      then
                                                                                                                                        true
                                                                                                                                      else
                                                                                                                                        if (BEq.beq
                                                                                                                                             b__0
                                                                                                                                             (0x3C4 : (BitVec 12)))
                                                                                                                                        then
                                                                                                                                          true
                                                                                                                                        else
                                                                                                                                          if (BEq.beq
                                                                                                                                               b__0
                                                                                                                                               (0x3C5 : (BitVec 12)))
                                                                                                                                          then
                                                                                                                                            true
                                                                                                                                          else
                                                                                                                                            if (BEq.beq
                                                                                                                                                 b__0
                                                                                                                                                 (0x3C6 : (BitVec 12)))
                                                                                                                                            then
                                                                                                                                              true
                                                                                                                                            else
                                                                                                                                              if (BEq.beq
                                                                                                                                                   b__0
                                                                                                                                                   (0x3C7 : (BitVec 12)))
                                                                                                                                              then
                                                                                                                                                true
                                                                                                                                              else
                                                                                                                                                if (BEq.beq
                                                                                                                                                     b__0
                                                                                                                                                     (0x3C8 : (BitVec 12)))
                                                                                                                                                then
                                                                                                                                                  true
                                                                                                                                                else
                                                                                                                                                  if (BEq.beq
                                                                                                                                                       b__0
                                                                                                                                                       (0x3C9 : (BitVec 12)))
                                                                                                                                                  then
                                                                                                                                                    true
                                                                                                                                                  else
                                                                                                                                                    if (BEq.beq
                                                                                                                                                         b__0
                                                                                                                                                         (0x3CA : (BitVec 12)))
                                                                                                                                                    then
                                                                                                                                                      true
                                                                                                                                                    else
                                                                                                                                                      if (BEq.beq
                                                                                                                                                           b__0
                                                                                                                                                           (0x3CB : (BitVec 12)))
                                                                                                                                                      then
                                                                                                                                                        true
                                                                                                                                                      else
                                                                                                                                                        if (BEq.beq
                                                                                                                                                             b__0
                                                                                                                                                             (0x3CC : (BitVec 12)))
                                                                                                                                                        then
                                                                                                                                                          true
                                                                                                                                                        else
                                                                                                                                                          if (BEq.beq
                                                                                                                                                               b__0
                                                                                                                                                               (0x3CD : (BitVec 12)))
                                                                                                                                                          then
                                                                                                                                                            true
                                                                                                                                                          else
                                                                                                                                                            if (BEq.beq
                                                                                                                                                                 b__0
                                                                                                                                                                 (0x3CE : (BitVec 12)))
                                                                                                                                                            then
                                                                                                                                                              true
                                                                                                                                                            else
                                                                                                                                                              if (BEq.beq
                                                                                                                                                                   b__0
                                                                                                                                                                   (0x3CF : (BitVec 12)))
                                                                                                                                                              then
                                                                                                                                                                true
                                                                                                                                                              else
                                                                                                                                                                if (BEq.beq
                                                                                                                                                                     b__0
                                                                                                                                                                     (0x3D0 : (BitVec 12)))
                                                                                                                                                                then
                                                                                                                                                                  true
                                                                                                                                                                else
                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                       b__0
                                                                                                                                                                       (0x3D1 : (BitVec 12)))
                                                                                                                                                                  then
                                                                                                                                                                    true
                                                                                                                                                                  else
                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                         b__0
                                                                                                                                                                         (0x3D2 : (BitVec 12)))
                                                                                                                                                                    then
                                                                                                                                                                      true
                                                                                                                                                                    else
                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                           b__0
                                                                                                                                                                           (0x3D3 : (BitVec 12)))
                                                                                                                                                                      then
                                                                                                                                                                        true
                                                                                                                                                                      else
                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                             b__0
                                                                                                                                                                             (0x3D4 : (BitVec 12)))
                                                                                                                                                                        then
                                                                                                                                                                          true
                                                                                                                                                                        else
                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                               b__0
                                                                                                                                                                               (0x3D5 : (BitVec 12)))
                                                                                                                                                                          then
                                                                                                                                                                            true
                                                                                                                                                                          else
                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                 b__0
                                                                                                                                                                                 (0x3D6 : (BitVec 12)))
                                                                                                                                                                            then
                                                                                                                                                                              true
                                                                                                                                                                            else
                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                   b__0
                                                                                                                                                                                   (0x3D7 : (BitVec 12)))
                                                                                                                                                                              then
                                                                                                                                                                                true
                                                                                                                                                                              else
                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                     b__0
                                                                                                                                                                                     (0x3D8 : (BitVec 12)))
                                                                                                                                                                                then
                                                                                                                                                                                  true
                                                                                                                                                                                else
                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                       b__0
                                                                                                                                                                                       (0x3D9 : (BitVec 12)))
                                                                                                                                                                                  then
                                                                                                                                                                                    true
                                                                                                                                                                                  else
                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                         b__0
                                                                                                                                                                                         (0x3DA : (BitVec 12)))
                                                                                                                                                                                    then
                                                                                                                                                                                      true
                                                                                                                                                                                    else
                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                           b__0
                                                                                                                                                                                           (0x3DB : (BitVec 12)))
                                                                                                                                                                                      then
                                                                                                                                                                                        true
                                                                                                                                                                                      else
                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                             b__0
                                                                                                                                                                                             (0x3DC : (BitVec 12)))
                                                                                                                                                                                        then
                                                                                                                                                                                          true
                                                                                                                                                                                        else
                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                               b__0
                                                                                                                                                                                               (0x3DD : (BitVec 12)))
                                                                                                                                                                                          then
                                                                                                                                                                                            true
                                                                                                                                                                                          else
                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                 b__0
                                                                                                                                                                                                 (0x3DE : (BitVec 12)))
                                                                                                                                                                                            then
                                                                                                                                                                                              true
                                                                                                                                                                                            else
                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                   b__0
                                                                                                                                                                                                   (0x3DF : (BitVec 12)))
                                                                                                                                                                                              then
                                                                                                                                                                                                true
                                                                                                                                                                                              else
                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                     b__0
                                                                                                                                                                                                     (0x3E0 : (BitVec 12)))
                                                                                                                                                                                                then
                                                                                                                                                                                                  true
                                                                                                                                                                                                else
                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                       b__0
                                                                                                                                                                                                       (0x3E1 : (BitVec 12)))
                                                                                                                                                                                                  then
                                                                                                                                                                                                    true
                                                                                                                                                                                                  else
                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                         b__0
                                                                                                                                                                                                         (0x3E2 : (BitVec 12)))
                                                                                                                                                                                                    then
                                                                                                                                                                                                      true
                                                                                                                                                                                                    else
                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                           b__0
                                                                                                                                                                                                           (0x3E3 : (BitVec 12)))
                                                                                                                                                                                                      then
                                                                                                                                                                                                        true
                                                                                                                                                                                                      else
                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                             b__0
                                                                                                                                                                                                             (0x3E4 : (BitVec 12)))
                                                                                                                                                                                                        then
                                                                                                                                                                                                          true
                                                                                                                                                                                                        else
                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                               b__0
                                                                                                                                                                                                               (0x3E5 : (BitVec 12)))
                                                                                                                                                                                                          then
                                                                                                                                                                                                            true
                                                                                                                                                                                                          else
                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                 (0x3E6 : (BitVec 12)))
                                                                                                                                                                                                            then
                                                                                                                                                                                                              true
                                                                                                                                                                                                            else
                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                   (0x3E7 : (BitVec 12)))
                                                                                                                                                                                                              then
                                                                                                                                                                                                                true
                                                                                                                                                                                                              else
                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                     (0x3E8 : (BitVec 12)))
                                                                                                                                                                                                                then
                                                                                                                                                                                                                  true
                                                                                                                                                                                                                else
                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                       (0x3E9 : (BitVec 12)))
                                                                                                                                                                                                                  then
                                                                                                                                                                                                                    true
                                                                                                                                                                                                                  else
                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                         (0x3EA : (BitVec 12)))
                                                                                                                                                                                                                    then
                                                                                                                                                                                                                      true
                                                                                                                                                                                                                    else
                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                           (0x3EB : (BitVec 12)))
                                                                                                                                                                                                                      then
                                                                                                                                                                                                                        true
                                                                                                                                                                                                                      else
                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                             (0x3EC : (BitVec 12)))
                                                                                                                                                                                                                        then
                                                                                                                                                                                                                          true
                                                                                                                                                                                                                        else
                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                               (0x3ED : (BitVec 12)))
                                                                                                                                                                                                                          then
                                                                                                                                                                                                                            true
                                                                                                                                                                                                                          else
                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                 (0x3EE : (BitVec 12)))
                                                                                                                                                                                                                            then
                                                                                                                                                                                                                              true
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                   (0x3EF : (BitVec 12)))
                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                true
                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                     (0x008 : (BitVec 12)))
                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                       (0x009 : (BitVec 12)))
                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                         (0x00A : (BitVec 12)))
                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                           (0x00F : (BitVec 12)))
                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                             (0xC20 : (BitVec 12)))
                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                               (0xC21 : (BitVec 12)))
                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                 (0xC22 : (BitVec 12)))
                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                   (0x105 : (BitVec 12)))
                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                     (0x141 : (BitVec 12)))
                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                       (0x305 : (BitVec 12)))
                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                         (0x341 : (BitVec 12)))
                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                           (0xC03 : (BitVec 12)))
                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                             (0xC04 : (BitVec 12)))
                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                               (0xC05 : (BitVec 12)))
                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                 (0xC06 : (BitVec 12)))
                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                   (0xC07 : (BitVec 12)))
                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                     (0xC08 : (BitVec 12)))
                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                       (0xC09 : (BitVec 12)))
                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                         (0xC0A : (BitVec 12)))
                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                           (0xC0B : (BitVec 12)))
                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                             (0xC0C : (BitVec 12)))
                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                               (0xC0D : (BitVec 12)))
                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                 (0xC0E : (BitVec 12)))
                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                   (0xC0F : (BitVec 12)))
                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                     (0xC10 : (BitVec 12)))
                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                       (0xC11 : (BitVec 12)))
                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                         (0xC12 : (BitVec 12)))
                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                           (0xC13 : (BitVec 12)))
                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                             (0xC14 : (BitVec 12)))
                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                               (0xC15 : (BitVec 12)))
                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                 (0xC16 : (BitVec 12)))
                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                   (0xC17 : (BitVec 12)))
                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                     (0xC18 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                       (0xC19 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                         (0xC1A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                           (0xC1B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                             (0xC1C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                               (0xC1D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                 (0xC1E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                   (0xC1F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                     (0xC83 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                       (0xC84 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                         (0xC85 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                           (0xC86 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                             (0xC87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                               (0xC88 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                 (0xC89 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                   (0xC8A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                     (0xC8B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                       (0xC8C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                         (0xC8D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                           (0xC8E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                             (0xC8F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                               (0xC90 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                 (0xC91 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                   (0xC92 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                     (0xC93 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                       (0xC94 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                         (0xC95 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                           (0xC96 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                             (0xC97 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                               (0xC98 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                 (0xC99 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                   (0xC9A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                     (0xC9B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                       (0xC9C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                         (0xC9D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                           (0xC9E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                             (0xC9F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                               (0x323 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                 (0x324 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                   (0x325 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                     (0x326 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                       (0x327 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                         (0x328 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                           (0x329 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                             (0x32A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                               (0x32B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                 (0x32C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                   (0x32D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                     (0x32E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                       (0x32F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                         (0x330 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                           (0x331 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                             (0x332 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                               (0x333 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                 (0x334 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                   (0x335 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                     (0x336 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                       (0x337 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                         (0x338 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                           (0x339 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                             (0x33A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                               (0x33B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                 (0x33C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                   (0x33D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                     (0x33E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                       (0x33F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB03 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB04 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB05 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB06 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB07 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB08 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB09 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB0A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB0B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB0C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB0D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB0E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB0F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB10 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB11 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB12 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB13 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB14 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB15 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB16 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB17 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB18 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB19 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB1A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB1B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB1C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB1D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB1E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB1F : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (0xB83 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (0xB84 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0xB85 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (0xB86 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           (0xB87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB88 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB89 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB8A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   b__0
xB8B : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
b__0
xB8C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
b__0
xB8D : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
if (BEq.beq
b__0
xB8E : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else
if (BEq.beq
b__0
xB8F : (BitVec 12)))
then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
xB90 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB91 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
true
else
if (BEq.beq
b__0
xB92 : (BitVec 12)))
then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (BEq.beq
b__0
xB93 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then
true
else
if (BEq.beq
b__0
xB94 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB95 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB96 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
else
if (BEq.beq
b__0
xB97 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB98 : (BitVec 12)))
then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               b__0
xB99 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else
if (BEq.beq
b__0
xB9B : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9C : (BitVec 12)))
then
true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
if (BEq.beq
b__0
xB9D : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9E : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9F : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (0xB83 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB84 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB85 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB86 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB87 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (BEq.beq
b__0
xB88 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB89 : (BitVec 12)))
then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
b__0
xB8A : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             b__0
xB8B : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (0xB8C : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
true
else
if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (0xB8D : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB8E : (BitVec 12)))
then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
xB8F : (BitVec 12)))
then
true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else
if (BEq.beq
b__0
xB90 : (BitVec 12)))
then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
xB91 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB92 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB93 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB94 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 b__0
xB95 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
true
else
if (BEq.beq
b__0
xB96 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB97 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB98 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         b__0
xB99 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      true
else
if (BEq.beq
b__0
xB9A : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9B : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9C : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9D : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9E : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB9F : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xDA0 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
x015 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (BEq.beq
b__0
xC00 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xC01 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xC02 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xC80 : (BitVec 12)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then
true
else
if (BEq.beq
b__0
xC81 : (BitVec 12)))
then
true
else
if (BEq.beq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     b__0
xC82 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB00 : (BitVec 12)))
then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (BEq.beq
b__0
xB02 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
xB80 : (BitVec 12)))
then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if (BEq.beq
b__0
xB82 : (BitVec 12)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          true
else
if (BEq.beq
b__0
x321 : (BitVec 12)))
then
true
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else
if (BEq.beq
b__0
x721 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
x322 : (BitVec 12)))
then
true
else
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if (BEq.beq
b__0
x722 : (BitVec 12)))
then
true
else
if (BEq.beq
b__0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (0x180 : (BitVec 12)))
then
true
else
true

def csr_name_map_backwards_matches (arg_ : String) : Bool :=
  let head_exp_ := arg_
  match (match head_exp_ with
  | "misa" => (some true)
  | "mstatus" => (some true)
  | "menvcfg" => (some true)
  | "menvcfgh" => (some true)
  | "senvcfg" => (some true)
  | "mie" => (some true)
  | "mip" => (some true)
  | "medeleg" => (some true)
  | "medelegh" => (some true)
  | "mideleg" => (some true)
  | "mcause" => (some true)
  | "mtval" => (some true)
  | "mscratch" => (some true)
  | "scounteren" => (some true)
  | "mcounteren" => (some true)
  | "mcountinhibit" => (some true)
  | "mvendorid" => (some true)
  | "marchid" => (some true)
  | "mimpid" => (some true)
  | "mhartid" => (some true)
  | "mconfigptr" => (some true)
  | "sstatus" => (some true)
  | "sip" => (some true)
  | "sie" => (some true)
  | "sscratch" => (some true)
  | "scause" => (some true)
  | "stval" => (some true)
  | "tselect" => (some true)
  | "tdata1" => (some true)
  | "tdata2" => (some true)
  | "tdata3" => (some true)
  | "pmpcfg0" => (some true)
  | "pmpcfg1" => (some true)
  | "pmpcfg2" => (some true)
  | "pmpcfg3" => (some true)
  | "pmpcfg4" => (some true)
  | "pmpcfg5" => (some true)
  | "pmpcfg6" => (some true)
  | "pmpcfg7" => (some true)
  | "pmpcfg8" => (some true)
  | "pmpcfg9" => (some true)
  | "pmpcfg10" => (some true)
  | "pmpcfg11" => (some true)
  | "pmpcfg12" => (some true)
  | "pmpcfg13" => (some true)
  | "pmpcfg14" => (some true)
  | "pmpcfg15" => (some true)
  | "pmpaddr0" => (some true)
  | "pmpaddr1" => (some true)
  | "pmpaddr2" => (some true)
  | "pmpaddr3" => (some true)
  | "pmpaddr4" => (some true)
  | "pmpaddr5" => (some true)
  | "pmpaddr6" => (some true)
  | "pmpaddr7" => (some true)
  | "pmpaddr8" => (some true)
  | "pmpaddr9" => (some true)
  | "pmpaddr10" => (some true)
  | "pmpaddr11" => (some true)
  | "pmpaddr12" => (some true)
  | "pmpaddr13" => (some true)
  | "pmpaddr14" => (some true)
  | "pmpaddr15" => (some true)
  | "pmpaddr16" => (some true)
  | "pmpaddr17" => (some true)
  | "pmpaddr18" => (some true)
  | "pmpaddr19" => (some true)
  | "pmpaddr20" => (some true)
  | "pmpaddr21" => (some true)
  | "pmpaddr22" => (some true)
  | "pmpaddr23" => (some true)
  | "pmpaddr24" => (some true)
  | "pmpaddr25" => (some true)
  | "pmpaddr26" => (some true)
  | "pmpaddr27" => (some true)
  | "pmpaddr28" => (some true)
  | "pmpaddr29" => (some true)
  | "pmpaddr30" => (some true)
  | "pmpaddr31" => (some true)
  | "pmpaddr32" => (some true)
  | "pmpaddr33" => (some true)
  | "pmpaddr34" => (some true)
  | "pmpaddr35" => (some true)
  | "pmpaddr36" => (some true)
  | "pmpaddr37" => (some true)
  | "pmpaddr38" => (some true)
  | "pmpaddr39" => (some true)
  | "pmpaddr40" => (some true)
  | "pmpaddr41" => (some true)
  | "pmpaddr42" => (some true)
  | "pmpaddr43" => (some true)
  | "pmpaddr44" => (some true)
  | "pmpaddr45" => (some true)
  | "pmpaddr46" => (some true)
  | "pmpaddr47" => (some true)
  | "pmpaddr48" => (some true)
  | "pmpaddr49" => (some true)
  | "pmpaddr50" => (some true)
  | "pmpaddr51" => (some true)
  | "pmpaddr52" => (some true)
  | "pmpaddr53" => (some true)
  | "pmpaddr54" => (some true)
  | "pmpaddr55" => (some true)
  | "pmpaddr56" => (some true)
  | "pmpaddr57" => (some true)
  | "pmpaddr58" => (some true)
  | "pmpaddr59" => (some true)
  | "pmpaddr60" => (some true)
  | "pmpaddr61" => (some true)
  | "pmpaddr62" => (some true)
  | "pmpaddr63" => (some true)
  | "vstart" => (some true)
  | "vxsat" => (some true)
  | "vxrm" => (some true)
  | "vcsr" => (some true)
  | "vl" => (some true)
  | "vtype" => (some true)
  | "vlenb" => (some true)
  | "stvec" => (some true)
  | "sepc" => (some true)
  | "mtvec" => (some true)
  | "mepc" => (some true)
  | "hpmcounter3" => (some true)
  | "hpmcounter4" => (some true)
  | "hpmcounter5" => (some true)
  | "hpmcounter6" => (some true)
  | "hpmcounter7" => (some true)
  | "hpmcounter8" => (some true)
  | "hpmcounter9" => (some true)
  | "hpmcounter10" => (some true)
  | "hpmcounter11" => (some true)
  | "hpmcounter12" => (some true)
  | "hpmcounter13" => (some true)
  | "hpmcounter14" => (some true)
  | "hpmcounter15" => (some true)
  | "hpmcounter16" => (some true)
  | "hpmcounter17" => (some true)
  | "hpmcounter18" => (some true)
  | "hpmcounter19" => (some true)
  | "hpmcounter20" => (some true)
  | "hpmcounter21" => (some true)
  | "hpmcounter22" => (some true)
  | "hpmcounter23" => (some true)
  | "hpmcounter24" => (some true)
  | "hpmcounter25" => (some true)
  | "hpmcounter26" => (some true)
  | "hpmcounter27" => (some true)
  | "hpmcounter28" => (some true)
  | "hpmcounter29" => (some true)
  | "hpmcounter30" => (some true)
  | "hpmcounter31" => (some true)
  | "hpmcounter3h" => (some true)
  | "hpmcounter4h" => (some true)
  | "hpmcounter5h" => (some true)
  | "hpmcounter6h" => (some true)
  | "hpmcounter7h" => (some true)
  | "hpmcounter8h" => (some true)
  | "hpmcounter9h" => (some true)
  | "hpmcounter10h" => (some true)
  | "hpmcounter11h" => (some true)
  | "hpmcounter12h" => (some true)
  | "hpmcounter13h" => (some true)
  | "hpmcounter14h" => (some true)
  | "hpmcounter15h" => (some true)
  | "hpmcounter16h" => (some true)
  | "hpmcounter17h" => (some true)
  | "hpmcounter18h" => (some true)
  | "hpmcounter19h" => (some true)
  | "hpmcounter20h" => (some true)
  | "hpmcounter21h" => (some true)
  | "hpmcounter22h" => (some true)
  | "hpmcounter23h" => (some true)
  | "hpmcounter24h" => (some true)
  | "hpmcounter25h" => (some true)
  | "hpmcounter26h" => (some true)
  | "hpmcounter27h" => (some true)
  | "hpmcounter28h" => (some true)
  | "hpmcounter29h" => (some true)
  | "hpmcounter30h" => (some true)
  | "hpmcounter31h" => (some true)
  | "mhpmevent3" => (some true)
  | "mhpmevent4" => (some true)
  | "mhpmevent5" => (some true)
  | "mhpmevent6" => (some true)
  | "mhpmevent7" => (some true)
  | "mhpmevent8" => (some true)
  | "mhpmevent9" => (some true)
  | "mhpmevent10" => (some true)
  | "mhpmevent11" => (some true)
  | "mhpmevent12" => (some true)
  | "mhpmevent13" => (some true)
  | "mhpmevent14" => (some true)
  | "mhpmevent15" => (some true)
  | "mhpmevent16" => (some true)
  | "mhpmevent17" => (some true)
  | "mhpmevent18" => (some true)
  | "mhpmevent19" => (some true)
  | "mhpmevent20" => (some true)
  | "mhpmevent21" => (some true)
  | "mhpmevent22" => (some true)
  | "mhpmevent23" => (some true)
  | "mhpmevent24" => (some true)
  | "mhpmevent25" => (some true)
  | "mhpmevent26" => (some true)
  | "mhpmevent27" => (some true)
  | "mhpmevent28" => (some true)
  | "mhpmevent29" => (some true)
  | "mhpmevent30" => (some true)
  | "mhpmevent31" => (some true)
  | "mhpmcounter3" => (some true)
  | "mhpmcounter4" => (some true)
  | "mhpmcounter5" => (some true)
  | "mhpmcounter6" => (some true)
  | "mhpmcounter7" => (some true)
  | "mhpmcounter8" => (some true)
  | "mhpmcounter9" => (some true)
  | "mhpmcounter10" => (some true)
  | "mhpmcounter11" => (some true)
  | "mhpmcounter12" => (some true)
  | "mhpmcounter13" => (some true)
  | "mhpmcounter14" => (some true)
  | "mhpmcounter15" => (some true)
  | "mhpmcounter16" => (some true)
  | "mhpmcounter17" => (some true)
  | "mhpmcounter18" => (some true)
  | "mhpmcounter19" => (some true)
  | "mhpmcounter20" => (some true)
  | "mhpmcounter21" => (some true)
  | "mhpmcounter22" => (some true)
  | "mhpmcounter23" => (some true)
  | "mhpmcounter24" => (some true)
  | "mhpmcounter25" => (some true)
  | "mhpmcounter26" => (some true)
  | "mhpmcounter27" => (some true)
  | "mhpmcounter28" => (some true)
  | "mhpmcounter29" => (some true)
  | "mhpmcounter30" => (some true)
  | "mhpmcounter31" => (some true)
  | "mhpmcounter3h" => (some true)
  | "mhpmcounter4h" => (some true)
  | "mhpmcounter5h" => (some true)
  | "mhpmcounter6h" => (some true)
  | "mhpmcounter7h" => (some true)
  | "mhpmcounter8h" => (some true)
  | "mhpmcounter9h" => (some true)
  | "mhpmcounter10h" => (some true)
  | "mhpmcounter11h" => (some true)
  | "mhpmcounter12h" => (some true)
  | "mhpmcounter13h" => (some true)
  | "mhpmcounter14h" => (some true)
  | "mhpmcounter15h" => (some true)
  | "mhpmcounter16h" => (some true)
  | "mhpmcounter17h" => (some true)
  | "mhpmcounter18h" => (some true)
  | "mhpmcounter19h" => (some true)
  | "mhpmcounter20h" => (some true)
  | "mhpmcounter21h" => (some true)
  | "mhpmcounter22h" => (some true)
  | "mhpmcounter23h" => (some true)
  | "mhpmcounter24h" => (some true)
  | "mhpmcounter25h" => (some true)
  | "mhpmcounter26h" => (some true)
  | "mhpmcounter27h" => (some true)
  | "mhpmcounter28h" => (some true)
  | "mhpmcounter29h" => (some true)
  | "mhpmcounter30h" => (some true)
  | "mhpmcounter31h" => (some true)
  | "mhpmcounter3h" => (some true)
  | "mhpmcounter4h" => (some true)
  | "mhpmcounter5h" => (some true)
  | "mhpmcounter6h" => (some true)
  | "mhpmcounter7h" => (some true)
  | "mhpmcounter8h" => (some true)
  | "mhpmcounter9h" => (some true)
  | "mhpmcounter10h" => (some true)
  | "mhpmcounter11h" => (some true)
  | "mhpmcounter12h" => (some true)
  | "mhpmcounter13h" => (some true)
  | "mhpmcounter14h" => (some true)
  | "mhpmcounter15h" => (some true)
  | "mhpmcounter16h" => (some true)
  | "mhpmcounter17h" => (some true)
  | "mhpmcounter18h" => (some true)
  | "mhpmcounter19h" => (some true)
  | "mhpmcounter20h" => (some true)
  | "mhpmcounter21h" => (some true)
  | "mhpmcounter22h" => (some true)
  | "mhpmcounter23h" => (some true)
  | "mhpmcounter24h" => (some true)
  | "mhpmcounter25h" => (some true)
  | "mhpmcounter26h" => (some true)
  | "mhpmcounter27h" => (some true)
  | "mhpmcounter28h" => (some true)
  | "mhpmcounter29h" => (some true)
  | "mhpmcounter30h" => (some true)
  | "mhpmcounter31h" => (some true)
  | "scountovf" => (some true)
  | "seed" => (some true)
  | "cycle" => (some true)
  | "time" => (some true)
  | "instret" => (some true)
  | "cycleh" => (some true)
  | "timeh" => (some true)
  | "instreth" => (some true)
  | "mcycle" => (some true)
  | "minstret" => (some true)
  | "mcycleh" => (some true)
  | "minstreth" => (some true)
  | "mcyclecfg" => (some true)
  | "mcyclecfgh" => (some true)
  | "minstretcfg" => (some true)
  | "minstretcfgh" => (some true)
  | "satp" => (some true)
  | mapping0_ =>
    if (hex_bits_12_backwards_matches mapping0_)
    then
      match (hex_bits_12_backwards mapping0_) with
      | reg => (some true)
    else none) with
  | .some result => result
  | none =>
    match head_exp_ with
    | _ => false

def ext_fetch_hook (f : FetchResult) : FetchResult :=
  f

def ext_pre_step_hook (_ : Unit) : Unit :=
  ()

def ext_post_step_hook (_ : Unit) : Unit :=
  ()

def ext_reset (_ : Unit) : Unit :=
  ()

def ext_decode_compressed (bv : (BitVec 16)) : SailM ast := do
  (encdec_compressed_backwards bv)

def ext_decode (bv : (BitVec 32)) : SailM ast := do
  (encdec_backwards bv)

def isRVC (h : (BitVec 16)) : Bool :=
  (not (BEq.beq (Sail.BitVec.extractLsb h 1 0) (0b11 : (BitVec 2))))

def fetch (_ : Unit) : SailM FetchResult := do
  match (ext_fetch_check_pc (← readReg PC) (← readReg PC)) with
  | .Ext_FetchAddr_Error e => (pure (F_Ext_Error e))
  | .Ext_FetchAddr_OK use_pc =>
    let use_pc_bits := (virtaddr_bits use_pc)
    if (Bool.or (bne (BitVec.access use_pc_bits 0) 0#1)
         (Bool.and (bne (BitVec.access use_pc_bits 1) 0#1) (not (← (extensionEnabled Ext_Zca)))))
    then (pure (F_Error ((E_Fetch_Addr_Align ()), (← readReg PC))))
    else
      match (← (translateAddr use_pc (Execute ()))) with
      | .TR_Failure (e, _) => (pure (F_Error (e, (← readReg PC))))
      | .TR_Address (ppclo, _) =>
        match (← (mem_read (Execute ()) ppclo 2 false false false)) with
        | .Err e => (pure (F_Error (e, (← readReg PC))))
        | .Ok ilo =>
          if (isRVC ilo)
          then (pure (F_RVC ilo))
          else
            let PC_hi ← do (pure (BitVec.addInt (← readReg PC) 2))
            match (ext_fetch_check_pc (← readReg PC) PC_hi) with
            | .Ext_FetchAddr_Error e => (pure (F_Ext_Error e))
            | .Ext_FetchAddr_OK use_pc_hi =>
              match (← (translateAddr use_pc_hi (Execute ()))) with
              | .TR_Failure (e, _) => (pure (F_Error (e, PC_hi)))
              | .TR_Address (ppchi, _) =>
                match (← (mem_read (Execute ()) ppchi 2 false false false)) with
                | .Err e => (pure (F_Error (e, PC_hi)))
                | .Ok ihi => (pure (F_Base (ihi ++ ilo)))

/-- Type quantifiers: step_no : Int -/
def step (step_no : Int) : SailM Bool := do
  let _ : Unit := (ext_pre_step_hook ())
  writeReg minstret_increment (← (should_inc_minstret (← readReg cur_privilege)))
  writeReg minstret_write none
  writeReg minstreth_write none
  let (retired, stepped) ← (( do
    match (← (dispatchInterrupt (← readReg cur_privilege))) with
    | .some (intr, priv) =>
      let _ : Unit :=
        if (get_config_print_instr ())
        then (print_bits "Handling interrupt: " (interruptType_to_bits intr))
        else ()
      (handle_interrupt intr priv)
      (pure (RETIRE_FAIL, false))
    | none =>
      match (ext_fetch_hook (← (fetch ()))) with
      | .F_Ext_Error e =>
        let _ : Unit := (ext_handle_fetch_check_error e)
        (pure (RETIRE_FAIL, false))
      | .F_Error (e, addr) =>
        (handle_mem_exception (virtaddr addr) e)
        (pure (RETIRE_FAIL, false))
      | .F_RVC h =>
        let _ : Unit := (sail_instr_announce h)
        writeReg instbits (zero_extend (m := ((2 ^i 3) *i 8)) h)
        let ast ← do (ext_decode_compressed h)
        if (get_config_print_instr ())
        then
          (pure (print_endline
              (HAppend.hAppend "["
                (HAppend.hAppend (Int.repr step_no)
                  (HAppend.hAppend "] ["
                    (HAppend.hAppend (privLevel_to_str (← readReg cur_privilege))
                      (HAppend.hAppend "]: "
                        (HAppend.hAppend (BitVec.toFormatted (← readReg PC))
                          (HAppend.hAppend " ("
                            (HAppend.hAppend (BitVec.toFormatted h)
                              (HAppend.hAppend ") " (← (print_insn ast)))))))))))))
        else (pure ())
        if (← (extensionEnabled Ext_Zca))
        then
          writeReg nextPC (BitVec.addInt (← readReg PC) 2)
          (pure ((← (execute ast)), true))
        else
          (handle_illegal ())
          (pure (RETIRE_FAIL, true))
      | .F_Base w =>
        let _ : Unit := (sail_instr_announce w)
        writeReg instbits (zero_extend (m := ((2 ^i 3) *i 8)) w)
        let ast ← do (ext_decode w)
        if (get_config_print_instr ())
        then
          (pure (print_endline
              (HAppend.hAppend "["
                (HAppend.hAppend (Int.repr step_no)
                  (HAppend.hAppend "] ["
                    (HAppend.hAppend (privLevel_to_str (← readReg cur_privilege))
                      (HAppend.hAppend "]: "
                        (HAppend.hAppend (BitVec.toFormatted (← readReg PC))
                          (HAppend.hAppend " ("
                            (HAppend.hAppend (BitVec.toFormatted w)
                              (HAppend.hAppend ") " (← (print_insn ast)))))))))))))
        else (pure ())
        writeReg nextPC (BitVec.addInt (← readReg PC) 4)
        (pure ((← (execute ast)), true)) ) : SailM (Retired × Bool) )
  (tick_pc ())
  if (bne retired RETIRE_SUCCESS)
  then writeReg minstret_increment false
  else (pure ())
  (update_minstret ())
  let _ : Unit := (ext_post_step_hook ())
  (pure stepped)


def loop (_ : Unit) : SailM Unit := do
  let insns_per_tick := (plat_insns_per_tick ())
  let mut i : Int := 0
  let mut step_no : Int := 0
  while not (← readReg htif_done) do
    let stepped ← step step_no
    if stepped then
      step_no := step_no + 1
      if get_config_print_instr () then pure (print_step ())
      cycle_count ()

    if ← readReg htif_done then
      let exit_val := BitVec.toNat (← readReg htif_exit_code)
      if exit_val == 0 then
        pure (print "SUCCESS")
      else
        pure (print_int "FAILURE: " exit_val)
    else
      i := i + 1
      if i == insns_per_tick then
        tick_clock ()
        tick_platform ()
        i := 0

def reset (_ : Unit) : SailM Unit := do
  (reset_sys ())
  (reset_vmem ())
  (pure (ext_reset ()))

def init_model (_ : Unit) : SailM Unit := do
  (init_platform ())
  (reset ())

def get_entry_point (_ : Unit) : (BitVec (2 ^ 3 * 8)) :=
  (zero_extend (m := ((2 ^i 3) *i 8)) (0x1000 : (BitVec 16)))

def sail_main (_ : Unit) : SailM Unit := do
  writeReg PC (get_entry_point ())
  (pure (print_bits "PC = " (← readReg PC)))
  sailTryCatch ((do
      (init_model ())
      (cycle_count ())
      (loop ()))) (fun the_exception => 
    match the_exception with
      | .Error_not_implemented s => (pure (print_string "Error: Not implemented: " s))
      | .Error_internal_error () => (pure (print "Error: internal error")))

def initialize_registers (_ : Unit) : SailM Unit := do
  writeReg PC (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg nextPC (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg instbits (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x1 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x2 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x3 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x4 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x5 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x6 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x7 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x8 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x9 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x10 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x11 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x12 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x13 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x14 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x15 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x16 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x17 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x18 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x19 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x20 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x21 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x22 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x23 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x24 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x25 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x26 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x27 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x28 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x29 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x30 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg x31 (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg cur_privilege (← (undefined_Privilege ()))
  writeReg cur_inst (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg mie (← (undefined_Minterrupts ()))
  writeReg mip (← (undefined_Minterrupts ()))
  writeReg medeleg (← (undefined_Medeleg ()))
  writeReg mideleg (← (undefined_Minterrupts ()))
  writeReg mtvec (← (undefined_Mtvec ()))
  writeReg mcause (← (undefined_Mcause ()))
  writeReg mepc (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg mtval (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg mscratch (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg scounteren (← (undefined_Counteren ()))
  writeReg mcounteren (← (undefined_Counteren ()))
  writeReg mcountinhibit (← (undefined_Counterin ()))
  writeReg mcycle (← (undefined_bitvector 64))
  writeReg mtime (← (undefined_bitvector 64))
  writeReg minstret (← (undefined_bitvector 64))
  writeReg minstret_increment (← (undefined_bool ()))
  writeReg stvec (← (undefined_Mtvec ()))
  writeReg sscratch (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg sepc (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg scause (← (undefined_Mcause ()))
  writeReg stval (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg tselect (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg vstart (← (undefined_bitvector 16))
  writeReg vl (← (undefined_bitvector ((2 ^i 3) *i 8)))
  writeReg vtype (← (undefined_Vtype ()))
  writeReg pmpcfg_n (← (undefined_vector 64 (← (undefined_Pmpcfg_ent ()))))
  writeReg pmpaddr_n (← (undefined_vector 64 (← (undefined_bitvector ((2 ^i 3) *i 8)))))
  writeReg vr0 (← (undefined_bitvector 65536))
  writeReg vr1 (← (undefined_bitvector 65536))
  writeReg vr2 (← (undefined_bitvector 65536))
  writeReg vr3 (← (undefined_bitvector 65536))
  writeReg vr4 (← (undefined_bitvector 65536))
  writeReg vr5 (← (undefined_bitvector 65536))
  writeReg vr6 (← (undefined_bitvector 65536))
  writeReg vr7 (← (undefined_bitvector 65536))
  writeReg vr8 (← (undefined_bitvector 65536))
  writeReg vr9 (← (undefined_bitvector 65536))
  writeReg vr10 (← (undefined_bitvector 65536))
  writeReg vr11 (← (undefined_bitvector 65536))
  writeReg vr12 (← (undefined_bitvector 65536))
  writeReg vr13 (← (undefined_bitvector 65536))
  writeReg vr14 (← (undefined_bitvector 65536))
  writeReg vr15 (← (undefined_bitvector 65536))
  writeReg vr16 (← (undefined_bitvector 65536))
  writeReg vr17 (← (undefined_bitvector 65536))
  writeReg vr18 (← (undefined_bitvector 65536))
  writeReg vr19 (← (undefined_bitvector 65536))
  writeReg vr20 (← (undefined_bitvector 65536))
  writeReg vr21 (← (undefined_bitvector 65536))
  writeReg vr22 (← (undefined_bitvector 65536))
  writeReg vr23 (← (undefined_bitvector 65536))
  writeReg vr24 (← (undefined_bitvector 65536))
  writeReg vr25 (← (undefined_bitvector 65536))
  writeReg vr26 (← (undefined_bitvector 65536))
  writeReg vr27 (← (undefined_bitvector 65536))
  writeReg vr28 (← (undefined_bitvector 65536))
  writeReg vr29 (← (undefined_bitvector 65536))
  writeReg vr30 (← (undefined_bitvector 65536))
  writeReg vr31 (← (undefined_bitvector 65536))
  writeReg vcsr (← (undefined_Vcsr ()))
  writeReg mhpmevent (← (undefined_vector 32 (← (undefined_HpmEvent ()))))
  writeReg mhpmcounter (← (undefined_vector 32 (← (undefined_bitvector 64))))
  writeReg mcyclecfg (← (undefined_CountSmcntrpmf ()))
  writeReg minstretcfg (← (undefined_CountSmcntrpmf ()))
  writeReg mtimecmp (← (undefined_bitvector 64))
  writeReg stimecmp (← (undefined_bitvector 64))
  writeReg htif_tohost (← (undefined_bitvector 64))
  writeReg htif_done (← (undefined_bool ()))
  writeReg htif_exit_code (← (undefined_bitvector 64))
  writeReg htif_cmd_write (← (undefined_bit ()))
  writeReg htif_payload_writes (← (undefined_bitvector 4))
  writeReg satp (← (undefined_bitvector ((2 ^i 3) *i 8)))

def sail_model_init (x_0 : Unit) : SailM Unit := do
  writeReg misa (_update_Misa_MXL (Mk_Misa (zeros_implicit (n := 64))) (architecture_forwards RV64))
  writeReg mstatus (let mxl := (architecture_forwards RV64)
  (_update_Mstatus_UXL
    (_update_Mstatus_SXL (Mk_Mstatus (zeros_implicit (n := 64)))
      (if (Bool.and (bne xlen 32) (sys_enable_supervisor ()))
      then mxl
      else (zeros_implicit (n := 2))))
    (if (Bool.and (bne xlen 32) (sys_enable_user ()))
    then mxl
    else (zeros_implicit (n := 2)))))
  writeReg menvcfg (← (legalize_menvcfg (Mk_MEnvcfg (zeros_implicit (n := 64)))
      (zeros_implicit (n := 64))))
  writeReg senvcfg (← (legalize_senvcfg (Mk_SEnvcfg (zeros_implicit (n := 64)))
      (zeros_implicit (n := ((2 ^i 3) *i 8)))))
  writeReg minstret_write none
  writeReg minstreth_write none
  writeReg mvendorid (zeros_implicit (n := 32))
  writeReg mimpid (zeros_implicit (n := ((2 ^i 3) *i 8)))
  writeReg marchid (zeros_implicit (n := ((2 ^i 3) *i 8)))
  writeReg mhartid (zeros_implicit (n := ((2 ^i 3) *i 8)))
  writeReg mconfigptr (zeros_implicit (n := ((2 ^i 3) *i 8)))
  writeReg tlb (vectorInit none)
  (initialize_registers ())

end Functions
open Functions

-- def main (_ : List String) : IO UInt32 := do
--   main_of_sail_main ⟨default, (), default, default, default, default⟩ (sail_model_init >=> sail_main)
